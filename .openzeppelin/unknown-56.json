{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x5379F32C8D5F663EACb61eeF63F722950294f452",
    "txHash": "0x6a3396f2b0e87dcd763d12883f9f5d87acea61f637ac39ac1246e713174e0e77"
  },
  "proxies": [
    {
      "address": "0xC2f8CcAf5530d9148bb07A6947b2f0F317e59e23",
      "txHash": "0x59499c61d93052aa8e80e386254da12f2ea0147698393585ed8609d85237ead1",
      "kind": "transparent"
    },
    {
      "address": "0x85fb19fC1fEd868E65BdFec58E64CcCb8546b0bf",
      "txHash": "0x430057f859f789b85a83c6f342fd24d44a89168caf53e10fc32b1cc368b95f5d",
      "kind": "transparent"
    },
    {
      "address": "0xe8323FFf67043C29A19E0A13b66F0EafedB46df4",
      "txHash": "0xc6dcc3c50585fe30998049447c85668b148953135f280241b72b9695238c9a2d",
      "kind": "transparent"
    },
    {
      "address": "0xF4B424DB20d8664cF559Fa3c095C54F4569A7f57",
      "txHash": "0xc43a4612b583bb3f908fe1049a2232e38c8345f1289a1ac522cdbf0233510e96",
      "kind": "transparent"
    },
    {
      "address": "0x50441d9c8E08E3Dcce8D517E2257a3882d43fee9",
      "txHash": "0xccaa8adfe6c2319f1df6c25fadec841a24113aa25c29a66e7f439912b5c09260",
      "kind": "transparent"
    },
    {
      "address": "0x1eaAf599b95d7cab0151B8384d15fe3F68Aa4ee3",
      "txHash": "0x93b5b34718268833e9c87556f379f512c302ee92e0cc131742f675e4f91bfb74",
      "kind": "transparent"
    },
    {
      "address": "0x9f612544075d3E088Ef004b99eC2c77Fe622DA8e",
      "txHash": "0x97db5636bbd0185c6afc0e4a05d6b24cb677d2556f180688dfb87036deaac255",
      "kind": "transparent"
    },
    {
      "address": "0xCfE0fA9Eae5a225A4C33e39d4AefE32667EFf11F",
      "txHash": "0xfe2e30131a9ec51b374f19901c2d667aeb98f24ea04270fd397b8746ca184f28",
      "kind": "transparent"
    },
    {
      "address": "0x4362635a0b2F8dF98cDE4Cdde5F5f3bE96f45316",
      "txHash": "0x40690ed03335ecb3cab65c0448cfa0dacf9f1b1b13394453f7d710033ffde701",
      "kind": "transparent"
    },
    {
      "address": "0x8dcEC5e136B6321a50F8567588c2f25738D286C2",
      "txHash": "0x18604371ec39e96a9194c257902d86df81f5489b2fa1dc54157926b785641431",
      "kind": "transparent"
    },
    {
      "address": "0xfE49AffC3fFa7bed8346F8f33f8250d3C6fDf073",
      "txHash": "0xbeb8e4c87405ee340d3092b9900383513fd405adcc2b45e593f5b4c2b8aa4e34",
      "kind": "transparent"
    },
    {
      "address": "0x3FFa4Cd446F8127db0ED316b1E952876Be2E61B0",
      "txHash": "0xdf8c80b246c10b3d9b904ceed2631f7983aa29d9c1d32c9eb595849f19b8369e",
      "kind": "transparent"
    },
    {
      "address": "0xa6b2a3Fdd415Ca304a36909a35f974B670960843",
      "txHash": "0x3a80106f10757c5f6db3e9cea4b92ddab8d5c62de04533b2df48a5f53a842610",
      "kind": "transparent"
    },
    {
      "address": "0xDD8A4302299115226676F943E01306107DD98495",
      "txHash": "0x5b60b4e5b08172e6d2044cbd6cd64f0623b6c2ed7440ee8a1a56a8da5b19ce9e",
      "kind": "transparent"
    },
    {
      "address": "0xB6960fAf74e7adA47bCBB3923d793da253Ff521f",
      "txHash": "0x5966b8b99ce82b3dd96fbc447d52444ed42eed4f8bd941239181b43d5cb1ecbc",
      "kind": "transparent"
    },
    {
      "address": "0xbD861fE2D91A2E82928FE0413fA77BfEB822F373",
      "txHash": "0x46f100f98c830fef31cfd63925cea754259b8e6e9f1f4f3e7bc9c62313a5a0d8",
      "kind": "transparent"
    },
    {
      "address": "0x1D0EDCA3F151dC9fafb5CE79547D153229985F42",
      "txHash": "0x51c856a3c3ac172ead80df82f9c1286f46b0586786baf65240d685f68cf3e7e0",
      "kind": "transparent"
    },
    {
      "address": "0x0541C542e2039D13238B5AbC6d32A23ae3222B1D",
      "txHash": "0x43f2036eaf2cafc588cf030062f7f4bfd5823d65dc7c21a60e3b062c12e56e06",
      "kind": "transparent"
    },
    {
      "address": "0x68f131fe93cFc18A6B3eC6312e18c089221a5C34",
      "txHash": "0x429aaf9273e8fc26f113031cd0bfa960a5c8985700fe7e30d020351f9e15955f",
      "kind": "transparent"
    },
    {
      "address": "0x32951e060e6AD6D512fC3Eaa958f3A8F4F82ac6C",
      "txHash": "0x5a4917b28402e353d50bb763b54613695ac45861f876734a82531103946ff762",
      "kind": "transparent"
    },
    {
      "address": "0x5C8035eB6f6E724eE6748D9844b6E9ffec0C5cB5",
      "txHash": "0xb8f0e46852af01660a3d90cd2d152458c9ed0d019943a3e453c876c1b53035f0",
      "kind": "transparent"
    },
    {
      "address": "0x03462fB60aA5De5F1A068A597743f66e097B0D9B",
      "txHash": "0x4ba4093b5f597643042df5189f3cb123d05ff3b6d07b2ed37642b979cc791daf",
      "kind": "transparent"
    },
    {
      "address": "0x632e03943Dd4c5c509486233b345FAE86cD5517a",
      "txHash": "0x096264aca37f19b32e82d7656bf76a7b8b140d0ac987e75058e0d8bea90f7fe4",
      "kind": "transparent"
    },
    {
      "address": "0xBD2c6BEd2b89415FE2853941a222662f12166f1D",
      "txHash": "0xff030d424b92400a1398bf97730aa4abb5a7530e92b17f45d756ea1c59bbfe38",
      "kind": "transparent"
    },
    {
      "address": "0x47F1c5F505043DEe9604B98D99304f7Ad4239b72",
      "txHash": "0xf3fee5deccf13b8c76f23e46c07c28af7097aefcb7612e5fa79a0d4bdfd0324b",
      "kind": "transparent"
    },
    {
      "address": "0xDAf7205a8Afc4d77171f5BFd24808946eCCF373e",
      "txHash": "0xcd6a41d056ebe3cf68889ad97c9937898608d54d6c872c77e1f81425c26f8b56",
      "kind": "transparent"
    },
    {
      "address": "0x665a8E4b88f6bfA984b1568505Cb4545f7816Ce2",
      "txHash": "0x28aa554c9a2a36e3b5e064bae322736cda46a49d726a68c06aad9fe612ab64b3",
      "kind": "transparent"
    },
    {
      "address": "0xD8A128e5712D9b240811a0D55D3F9CA8E6599B7A",
      "txHash": "0x69be12c9396775fa373e1e51b8b31f94dfbf1e81a309c6e4cd28be4cb9efc5d7",
      "kind": "transparent"
    },
    {
      "address": "0x632188A1b2f3a2636B59a1c400835e2C5EA40214",
      "txHash": "0xb4e23c497b0263859065c01be6dc5155a81f1d4c9da13f0d16f97d840fe9175c",
      "kind": "transparent"
    },
    {
      "address": "0xB16912cbb98C7ef7aAD30268bDC5602dBb5833f9",
      "txHash": "0xdb84b348545f1caf1999ef8c8f84a207f49481e2b44113ece754f413958d3652",
      "kind": "transparent"
    },
    {
      "address": "0x090ff57ffD64593111b0Aa7f2D664b1Aa3066137",
      "txHash": "0xfbd7f94a79b955c36ef4121d3023db80ecc081d7127156b51908e27b4d150e35",
      "kind": "transparent"
    },
    {
      "address": "0x0768EF9E891725C4c65f3E0fB671aBCD66FC6bee",
      "txHash": "0x18916a8accff3aa5ed2dfb2ef7692c45f7432689d199a3c2059a1bc30ed2d6d4",
      "kind": "transparent"
    },
    {
      "address": "0x34Cce22a47C5f020A5cc4fCc63d231D46577415a",
      "txHash": "0xe537a6e01e251fe980307b54e20730bc402790d9c4e4ac0fd765a6ebaf7f7609",
      "kind": "transparent"
    },
    {
      "address": "0xC9B12a6900c53A9d0eaEd911c1f46f6A1CC8E7Ad",
      "txHash": "0x18784aee6a71343cde42abf621ece8e47db06a0724c5753630afbdc2434d4af8",
      "kind": "transparent"
    },
    {
      "address": "0xB995C6ABCDE40576d4458b2BB0718d3cA5D350F7",
      "txHash": "0x4918f107f16f87cb02c24218c5b06b1a9a5e2febff78dd808a848b3b4eac2d7a",
      "kind": "transparent"
    },
    {
      "address": "0xcAaC62533Cb652F512b61A57455DB00DeD405CCC",
      "txHash": "0xf2ccdf00f755b4c3038a3ddf2da6a828e7de853452787250fad823c27fac255d",
      "kind": "transparent"
    },
    {
      "address": "0x5940760382CaEbf45463Cf8845E610820d3c51d5",
      "txHash": "0xb62942b4f118a594979c389eb51b468090f44c2145c7d2809fbc9b18f9f45e47",
      "kind": "transparent"
    },
    {
      "address": "0xC25f74A4C4c5f814ce1B92aF573f18905BecCB54",
      "txHash": "0x8b290b2e9c1552fe2ef91dca2d9b6540ca584eb3dc5edec4fb87be59ca5bcb10",
      "kind": "transparent"
    },
    {
      "address": "0x0444201F61E06b35Cab85807c2dc4764703bE745",
      "txHash": "0x8c2fd70e96dace0f47d4139b75f021f4a3260eabb4b0c734cd6d52c38a38c69d",
      "kind": "transparent"
    },
    {
      "address": "0x0Ec1B4A034E7a4Dd746F2c5C7DC806293Db7D413",
      "txHash": "0xb6bebc8e25342e8cb3f5b786291c88d49bc5828aaa88402b09bb5de28ee84790",
      "kind": "transparent"
    },
    {
      "address": "0x165102dd6ea72a4fB513fF78f30E835c8f099c25",
      "txHash": "0x7dd7534a10361bf8ac8d813931025e1e69402d1f3eaf81b00ccfb7fe826826c8",
      "kind": "transparent"
    },
    {
      "address": "0xbEB7c0BF4cdc19853CC72281DeC5aF697531f6Cd",
      "txHash": "0x2def060a2f3167f2bd785bee654ac79fa5296434563b66f590dfb2c4a61d4969",
      "kind": "transparent"
    },
    {
      "address": "0xC42023C518014e4f843BeE928b27D4E004926584",
      "txHash": "0xaeaa52416fa209ec8389dd7710ee9c9562374f97d8734c7014418e319c05baf1",
      "kind": "transparent"
    },
    {
      "address": "0x8a426aABF42AaE9E0f483cBe3C0DCc00b7659AEC",
      "txHash": "0x5885b84e88bec3adbeb3a486921f304512ae60b02c37da0e839b7c3da124603a",
      "kind": "transparent"
    },
    {
      "address": "0xA7837a1198fB33aE2fC9Ee1E1d679242B4785FFC",
      "txHash": "0xcbe51ecf8a957b01de4d035fb8f9c73192bff270f2abd32d66c59c98c6b9f2e3",
      "kind": "transparent"
    },
    {
      "address": "0x94bD7C206ce735213c2e9ECeF424af7eb71a425F",
      "txHash": "0xb78aaeba5429e12f593eb43d0b38c71c077a3b1e03a5af644c66ed691ddf020b",
      "kind": "transparent"
    },
    {
      "address": "0x1dBDC3F67e56DaEdFfA6b2b59D2F4a18190BDded",
      "txHash": "0x56f976cdeba01f2f844bce94f7241fa6bffcdcf6bad4cce915223db8a2bd63e3",
      "kind": "transparent"
    },
    {
      "address": "0x2EF53BB6749D9C635ff1FE7580b36303ecA185a3",
      "txHash": "0xab6108a295d41e6b970ca49206b35adff8543942ba438a723b9b67eea42ecd20",
      "kind": "transparent"
    },
    {
      "address": "0x121752a8C3D4aFD5CC0B41c8807dB7887742a608",
      "txHash": "0x4547afb93a54c23ddc6b3033a6e2b73de814c0128aa0ba12517e49c8c11a1e62",
      "kind": "transparent"
    },
    {
      "address": "0x5979cE98e993232f93C81fE4a878815983E71Df9",
      "txHash": "0xa30868df7caceee71b80060b89690d73da01a31b7950873cda5ffd177f623c67",
      "kind": "transparent"
    },
    {
      "address": "0x4D228564cc6BeA08b7cF1bcD4A7074D4b9293851",
      "txHash": "0xb76be35a696b2407c4ea6239d34500b26c2e746a1af482d87d5022b45eeeb13f",
      "kind": "transparent"
    },
    {
      "address": "0x5EffBF90F915B59cc967060740243037CE9E6a7E",
      "txHash": "0x92596db403e6509a639f449d60b9b62b5120096601b7a313fd9bd44ff92322bd",
      "kind": "transparent"
    },
    {
      "address": "0xc836C32048F81a21827ada8bFc3005A420ae546A",
      "txHash": "0xf00c9eb4456282d9127d23fc67280b23f9b26ca163dc235a841b7b8cb4954e7b",
      "kind": "transparent"
    },
    {
      "address": "0xb8e0B422d54aa59552A8aeB2255e1aA8627A5eDA",
      "txHash": "0x1ce0f1956cdb364d00e7fadb1b7876f4d1c7827aaeb07c222df7532e82b55644",
      "kind": "transparent"
    },
    {
      "address": "0xA504afA74195b93A32eA772DF430f2bf69e5D116",
      "txHash": "0x032de14d2eed3ba637ac5c873aec7583d85bacee47d768550cd11842a002eba5",
      "kind": "transparent"
    },
    {
      "address": "0x651ebb3f17F637cEAa77D214f2610D4a0aF5bfde",
      "txHash": "0x104d00a3acf8053683a528d74660190a611c25089265dc6fca7cb83779c08430",
      "kind": "transparent"
    },
    {
      "address": "0x39bBC1B5c46Ac99ECD412533cA831c4A730258cA",
      "txHash": "0x5c3e3b376a80279b631eeadda7ce301902a598e8df355f22c2ada275b49d84d4",
      "kind": "transparent"
    },
    {
      "address": "0xd890f501df285Cf24Fe3b6494E138a1629fc9e11",
      "txHash": "0xfcecf472e1faa5522b70655f0b2d4c470d7275da992106bf6c7c2915ae7456b4",
      "kind": "transparent"
    },
    {
      "address": "0xc796e49C22b58f2d46e4E685b608EAAF46C0878d",
      "txHash": "0xd0ac18a3428c4cd0a2c164ff3427e281c31fd754220f8b32f7abeabb7fa359b9",
      "kind": "transparent"
    },
    {
      "address": "0x4d395258c313bfEe5ba4FF500A9BEFe8ff26991E",
      "txHash": "0xb279d2e713a153cdb375b6c96dc3c5ecb59c9e840473bdfed30f037cb0c3e1b5",
      "kind": "transparent"
    },
    {
      "address": "0x9140AB358BCF6D6C18E36f560Ce72d6458c9cA0A",
      "txHash": "0x0c3f55e4d76b5eed2b6706c329363a7977b03c76dfb16725cd355716b2fe4b6c",
      "kind": "transparent"
    },
    {
      "address": "0xEc4709B3C33d78f0c3f0b3Daa779813b93d48505",
      "txHash": "0x6af28916cf464a5eb6f654ca3a45a808e23de267c9cfc668997e6161574c92df",
      "kind": "transparent"
    },
    {
      "address": "0xbBa4c941E577cfe921e3e88D705a46b22F3B1aDf",
      "txHash": "0x737f822b98c6950325390ad4d70e08dff9e347fbd18152e321a361c02e450463",
      "kind": "transparent"
    },
    {
      "address": "0x7D306Dd73531C45F9847e547a0E8dEEAFe804939",
      "txHash": "0xf1c354657edac01979e99684608855cc3c1f062f4d04ac794fc1fb78996eeae3",
      "kind": "transparent"
    },
    {
      "address": "0xA71381ff15862d0079c614b1E2B1F18485272880",
      "txHash": "0x4873991a723eb76bed63b8f446322c0dfd9335714fef284627ef1c0e37e0360c",
      "kind": "transparent"
    },
    {
      "address": "0x01cf56544A303025C77c76cA77982cbd8655fCBC",
      "txHash": "0x9eb37ee91061abc94fce04cd0863b9c0af50d919241d560ab11872a364c47782",
      "kind": "transparent"
    },
    {
      "address": "0x426BdFE8cAB2c4720B36ABBdc3ff08144BC361f3",
      "txHash": "0xc2d8e13bfd0beb6140a4f2a39fa4f0f630ae1daf5e8ad23f267d7204ec56f804",
      "kind": "transparent"
    },
    {
      "address": "0x800933D685E7Dc753758cEb77C8bd34aBF1E26d7",
      "txHash": "0x6e52cac380829fd80bebff8255a40dd8fc80595a82fb43e2430fb0013a03ef55",
      "kind": "transparent"
    },
    {
      "address": "0x66C7170d102dB819f50f9582973ab0d16d6f5242",
      "txHash": "0xd9d252d2c8502ad914ae85ccba82d96f627588b2b9d36d82cb1fadc59016060e",
      "kind": "transparent"
    },
    {
      "address": "0xf4c6b53bd2A1f0c06D8483e38Cd6e6ceC1860593",
      "txHash": "0xc8f2fa40c7223c34f0a170b2df953f2ccdc3f30748045e0b34da9469a095ccf0",
      "kind": "transparent"
    },
    {
      "address": "0x9a0Beed083D3A45b6463c621b0CE489482459b21",
      "txHash": "0x9c51830345e4873d08ea0771ded8b69c5815c02d919f4c1ddd6088ff938e9cb9",
      "kind": "transparent"
    },
    {
      "address": "0x8064F7019FEedA26038FbCe42031fbb26bEbEfEB",
      "txHash": "0x4d6764ab647532b4f54099455441c326ba2482e94e1871084213a3f502770dc5",
      "kind": "transparent"
    },
    {
      "address": "0xe93f5d253E5F367d3D5D6f5eCd8A409cEB8B510b",
      "txHash": "0x14306dfe22d617fe77036096e763b5bd1b78ea6e84c34e2f6d3d34b6a4b448a0",
      "kind": "transparent"
    },
    {
      "address": "0x58a3AD7f263B75532B58a60Cbf5D78Ee73123C93",
      "txHash": "0x4d88b52ef4c083eaa0f67271ae6d402c560054a5400d2c310b548a2713f99689",
      "kind": "transparent"
    },
    {
      "address": "0xFAC2898Ab87daa4909200ED7a99c5CBAb3bb9303",
      "txHash": "0x8f54e4241d6f2191d8ba111d289fb16210135086c35268ff825114c44c0e0be1",
      "kind": "transparent"
    },
    {
      "address": "0x8b452051666708A005F6C7170baADc3913b4C349",
      "txHash": "0x3f527ab95648cdf5024e85a2ed847468d409cf676931cbe68fc7a0296d7a90fc",
      "kind": "transparent"
    },
    {
      "address": "0xa14c9E1939b4F323EF540566b0Ee80142713A4D9",
      "txHash": "0x55d7c0703f1f15793e0c3af472a1647fdd0ce2c20d4d689ddba8480de4727f75",
      "kind": "transparent"
    },
    {
      "address": "0x5342Fbb861C2Aea626F66521C512ac5Fa03B6a58",
      "txHash": "0xff59275a803745ca65dd9886a2634dfc77afde157ab50791cfd43567b3b13a8d",
      "kind": "transparent"
    },
    {
      "address": "0x08EA5fB66EA41f236E3001d2655e43A1E735787F",
      "txHash": "0xacb0178dacf89493d694ce67b0315f54876b738ed625467c826e9c7b1a2daa2c",
      "kind": "transparent"
    },
    {
      "address": "0x5359911A2081F8AFEB0A19e01CF1Fe6b0457d9D3",
      "txHash": "0xb21e2ed8f1604ab95615b1bc63b3bd31b5ed63b0b7331c518988cb724e2c41dd",
      "kind": "transparent"
    },
    {
      "address": "0x41d2E4ac5B7373041c06A9D331B0624142fa1123",
      "txHash": "0xaf9b60270af5df420d26cf78d499dec2d03c283f85592b6e7aaddd1ec3c84b81",
      "kind": "transparent"
    },
    {
      "address": "0x539FC3fD348b427B5F70B4f87c1a44983c9E8DBD",
      "txHash": "0x671bb1e1ac818b8a4726166a9e54fd0f8d62cbced3eef3d8df461e57c4d8b836",
      "kind": "transparent"
    },
    {
      "address": "0x9AaaD0AB432eFDf86B27b4ea020dF2DfB223e00c",
      "txHash": "0x9d827b7c2a1a546e073282d13b3978afa93fcf6fedf676baa9bcc69e1e5273c3",
      "kind": "transparent"
    },
    {
      "address": "0xcfBCB958514e6c1294F0C900454dE7049110Cf84",
      "txHash": "0xee1433c209faecf725be57aeb97f8aa72222bda95a782f24a7014b5b23f41674",
      "kind": "transparent"
    },
    {
      "address": "0x301897d786adc651473e1edB87b32Ee5821bdd60",
      "txHash": "0x7eb586b6dfeee18a74bdb5dcc9ba0831276242aca49d9d0e8b8a1e7ee061f0f8",
      "kind": "transparent"
    },
    {
      "address": "0x6e3314453642c5Ce9fF273aa5f132c1Cc8463cEf",
      "txHash": "0xea471be630b1bbb34147790dfac901b53270c07977c38a40d04350abc62fa8e9",
      "kind": "transparent"
    },
    {
      "address": "0x5124bAA8cA9c5E327eFc458271DaC157acEB4f04",
      "txHash": "0x55e80efb450f85807dd0c0083021bc52c53970eded271c12dd4f21221d952efa",
      "kind": "transparent"
    },
    {
      "address": "0x1c623105d072Dc69F9a3F8A3dB67b5AeCEDC082b",
      "txHash": "0x6f2c46503cf3e528f3da07f33d19199464a82d560da133c79a5a917c75aa7baa",
      "kind": "transparent"
    },
    {
      "address": "0x452Fc464583ab2a149D6A63437fe90322A65E252",
      "txHash": "0x51dafe79d48dfd6c83ba2b247f5bbb078564092453a6561893262df9707bb390",
      "kind": "transparent"
    },
    {
      "address": "0xC4Ed268754DD3CbCA82A6eE743ACAd2D355D938b",
      "txHash": "0xc7470c2d256635e01d1662df441bd8bbb3228f70ca9467727d00674443efc9b9",
      "kind": "transparent"
    },
    {
      "address": "0x4F4054B4D286213a39cA5b8eF89116AC62c1cf43",
      "txHash": "0x0a294426b5f4664eed46146fdc59d46d1ed00804575f885f74496fea3b3239a7",
      "kind": "transparent"
    },
    {
      "address": "0x2245634E4c325F3f3Fc2b98cf75352b5D92F4c46",
      "txHash": "0xfc3d5a7841db922c64199a98a1518960ddcba86b8872d4e9351df489788a4b70",
      "kind": "transparent"
    },
    {
      "address": "0x1CDEa8F4592e8ff406F0Cd65a3B2F2060e71C754",
      "txHash": "0xade9545bc243e68d83454feb042f1fb06ec8f3ae399606841bd06479a73680d4",
      "kind": "transparent"
    },
    {
      "address": "0x42dA676116DF26EE9bb71595fFe7c18343FB2b64",
      "txHash": "0x903db9176ac99059c30b484c36cbb444f978f7868b82e51a7fa6a99b51404a88",
      "kind": "transparent"
    },
    {
      "address": "0x8EF56e94bbaEe1638C3c87D3ab0de0a90e2cB067",
      "txHash": "0x48922bf6b2cf5689210c674ba24e4a4c7490859dbd90b962b5a3cd3862b67e53",
      "kind": "transparent"
    },
    {
      "address": "0xe9Bd0B7333596d0a87DED9EE1a782AA052B711AB",
      "txHash": "0xf45515bbbd3dd5d486a379fa57e9c1c806c777be8a4f1a350348c98f198e42ae",
      "kind": "transparent"
    },
    {
      "address": "0x933dB54446d1a42216b8EAD55064891359AB9c6b",
      "txHash": "0x2bf6c71ec9f72f9d0ce9dff5936f653e9a274ff4fcc67d22d5a10449bf65b70e",
      "kind": "transparent"
    },
    {
      "address": "0x31e4614551A80eAb40c29AE851d710a3A0B72967",
      "txHash": "0xb8ba511d79b2f2d0cc4501cb8182c3815ca75ddd79557166a716329812e25d39",
      "kind": "transparent"
    },
    {
      "address": "0x83A5d5c54Ad83bBeA8667B3B95d7610E16e52723",
      "txHash": "0x3d18030a822c84efee6a78a408e4d3f69be25f36d4e7e2885921e097307000bf",
      "kind": "transparent"
    },
    {
      "address": "0x4b70c41F514FBBEa718234Ac72f36c1b077a4162",
      "txHash": "0xa986cf542e88d0508a438f86c73a73e47477e28f90b7ac2fc7b9bc96c9624a5b",
      "kind": "transparent"
    },
    {
      "address": "0x8e5CfA7C06F187B56537f7F0CaBfb55611Af6F16",
      "txHash": "0x2e1edb08167a4a4667cdce2381a9d14fc8da44ec51775bf2359f304583497444",
      "kind": "transparent"
    },
    {
      "address": "0xD3f82E0aF8c5a078C783DeDdDF79Ccb762bA413a",
      "txHash": "0x876e3fdaebc53598eb618d8ba91cff17cdc3722f73e631cfe68e55ac1284fee5",
      "kind": "transparent"
    },
    {
      "address": "0x0ff370c7e245992414BeF2CaCBa369422D2A91b3",
      "txHash": "0x0b659635b10825fe3206f77bd20af57526aa26f5c98780fe16fff79b29d545a7",
      "kind": "transparent"
    },
    {
      "address": "0xFa4B1e50f6EF51D0DaB5c2EEA7434cE6974Fa832",
      "txHash": "0x140534fca32078e2104f02e15470d7839769f4ef142175a235f5cf3d3808d844",
      "kind": "transparent"
    },
    {
      "address": "0x0d9fAF7023976B45b220b692699C5f5E9432EFD9",
      "txHash": "0xa2b291c2a4e0948554ba4b048d2e3b062a2296de161fa1d407cb5c7c73395dcf",
      "kind": "transparent"
    },
    {
      "address": "0xC57876a95A4f31a0A4FDB0329Fc78e00B092cC94",
      "txHash": "0xf39fb8dd30c9fa58de2d8b6518efd6a71d294ccf79ed44ec1531fa8df8840238",
      "kind": "transparent"
    },
    {
      "address": "0x595f76F2254Ed6A93E8763c585741aC3fc796E2e",
      "txHash": "0x0cf7c1ca4cd28d7e2f408ac123e98a10b883db6342551733037721703906dc7b",
      "kind": "transparent"
    },
    {
      "address": "0x73c46de8bFA266B40668f82e7c52fD5245Fbfbd0",
      "txHash": "0x6c6b6bde7e1e29512e40b7bb3e47d10e82f215f6b19fe91c7b4a33ce1b899bec",
      "kind": "transparent"
    },
    {
      "address": "0x08B5A95cb94f926a8B620E87eE92e675b35afc7E",
      "txHash": "0xc56c7912f99c5aae30add9efc370db76d274814fc7e6cb4438e5902e010f3606",
      "kind": "transparent"
    },
    {
      "address": "0x5640ce665c4fAc707885A04059449DadAbe56Cf2",
      "txHash": "0x3ee175b76bc6903ee9be5b255e15b28a27e8f3ccb575aad36cdc65a1cc7607a1",
      "kind": "transparent"
    },
    {
      "address": "0x07767daF4e84bDAaBf3A72c80cec8C8Eb962f3Ae",
      "txHash": "0xd2cd877e65bccc368861259463a37046b7ed9114d11ea8c63da7c7a3c37e4887",
      "kind": "transparent"
    },
    {
      "address": "0x54D3218787060463EEb944fa01b0cbE745Ef4DB5",
      "txHash": "0x88a57015d929ab1d413c06d0c7bdf3072ee55f584aff742fe6f7b5901b45040e",
      "kind": "transparent"
    },
    {
      "address": "0x9fE96180AB2ADfaEBc735336f9213F26Bca99aa1",
      "txHash": "0xc0287bc3b81e717bbb2ebdc019a2f724e9075e24d66aeee0056ee9bc1c166e0e",
      "kind": "transparent"
    },
    {
      "address": "0x1d24165CeFa83c14559F67f819b61C2C857c01b4",
      "txHash": "0xeb57ca6d5992c074f6a3abe9526d5e3195eb8e6a75d2a56c06b59b0e4d236c08",
      "kind": "transparent"
    },
    {
      "address": "0x55Be65fA6566BaBe8bd36175Bf5299568A8071bE",
      "txHash": "0xb3728f4bdbc455d418a8045e27e886af563d56d8aa5158cd5863faa537f7113e",
      "kind": "transparent"
    },
    {
      "address": "0x82573b46630cA335A7cA68a0AE42d0eE6a02df68",
      "txHash": "0x88920891a80a8ff3490fc4eee0a63c3af8bcf5bd02400acd24f4cea1f1468ed2",
      "kind": "transparent"
    },
    {
      "address": "0x3DA8c388cd5e5a7011EBd084D3708a117067eBbc",
      "txHash": "0xea0b4b647eed288f0991f65406bf934d6cf76050227ba09c6772020b287577d9",
      "kind": "transparent"
    },
    {
      "address": "0xcf82EaD77de8b09A1d9b7A66760b7744E1BA1C7D",
      "txHash": "0x9e44213dc200cf7975aaeb9ae6292e145c6079df5d4ce7c05220514849dc8832",
      "kind": "transparent"
    },
    {
      "address": "0xae2b281719f2D27C1478a53995Afed82Ccd8B051",
      "txHash": "0xaf3a9458f79f119c23952edf95671857d5d3471a5787ea73b43144269f5e9377",
      "kind": "transparent"
    },
    {
      "address": "0xCB0531f17ff9f4FF3FbEdA38A63250706BE2B853",
      "txHash": "0x72686ff61e011452b6045d7bfd7305719d212e8c951e2e6c02f3477726ff57dd",
      "kind": "transparent"
    },
    {
      "address": "0x96C607E34008630dC8132F517A33Be2772835f9c",
      "txHash": "0x369f18b41e4e426ed41e17f4016a05c0e3992fc7de8d272b15dd38300e2e45f6",
      "kind": "transparent"
    },
    {
      "address": "0xd4f67BcDC74b0655F388Da91F4Fb5B883880b0B4",
      "txHash": "0x6f53f494ca404826ac29f200dfffd1d579755b446003ec6c01ccb80a602e9b9a",
      "kind": "transparent"
    },
    {
      "address": "0x19756C5A8E24A824BE9D4FF1fECfF0F2E63cfFdE",
      "txHash": "0x338d05e191b600b337922915f4c48931bc0e3c4b2ec066424862b4bd852914cd",
      "kind": "transparent"
    },
    {
      "address": "0x361fb085795140c5d8bA604ba547Fb118800ea83",
      "txHash": "0x9f2bb598d81df50b0c1f45507a0cddcf01d4b8b26ecfa2c1e7c3722104f0d767",
      "kind": "transparent"
    },
    {
      "address": "0xb4FF3828d9d8eE0997cc29fF173A1C621D797bD7",
      "txHash": "0x6731268096ddf696a9148ca9d3d2b6d68874adf3e4ce12cb9618d9bc28c0690a",
      "kind": "transparent"
    },
    {
      "address": "0x59984D70342dB0A4797D6C6E256d9445efeeb949",
      "txHash": "0x8cf9a1500abfbf970154cf8923905d65cc75447a81294d283d93cf21fde6c6a5",
      "kind": "transparent"
    },
    {
      "address": "0xD14ED91dcD2E06ED72F536008cCd581DA73adDB5",
      "txHash": "0x6a8f0d97de78fc794dc74a008377bedae5cd1aefcb6b4f8b4744071bcef17499",
      "kind": "transparent"
    },
    {
      "address": "0x49966a489a6B6a43652Ee1924349B902fE14bC6F",
      "txHash": "0x9935efa69cc8da99e79edde4f85e6f955efccf781dc3b1bf72b9e6467eeb1a43",
      "kind": "transparent"
    }
  ],
  "impls": {
    "026142ba7a51ea17afdba8db51649e139fcb3a6937b369582ba7b8c94ee88cea": {
      "address": "0x13C052C34BeAEd5f7C4856fAA4Da0544B9Df99a7",
      "txHash": "0x0f7872d754f1cc364a2a13494398b9384e1cd2a9c0a18f5ed456b91faeecce0e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddBaseTokenOnly.sol:20"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)8678",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddBaseTokenOnly.sol:21"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)8678": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "16eb2d598a98c1b50ee4e5d1b76001180b1fbfbd5b86f451536394b46b1b2c8f": {
      "address": "0x3Af78AeB766059e2dB89654ed438a8d976CD2dc5",
      "txHash": "0x6ab0b454f8b1728b6ddcda12554110965b5a5154ba47bdeb8ff8ad8c65a37cbd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyLiquidate.sol:17"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)8678",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)8678": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d7b62848423c8c0885c38c4c3c2e724470e136b5731686ae9a38e21a2cdd088b": {
      "address": "0x588c58d88319B2EDF7426006668cDfF60940F3C7",
      "txHash": "0xdc45571ab8874834f880add7c99a814e0749f89992f624c641343ac265c9761a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SimplePriceOracle",
            "label": "feeder",
            "type": "t_address",
            "src": "contracts/6/protocol/SimplePriceOracle.sol:11"
          },
          {
            "contract": "SimplePriceOracle",
            "label": "store",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(PriceData)6151_storage))",
            "src": "contracts/6/protocol/SimplePriceOracle.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(PriceData)6151_storage))": {
            "label": "mapping(address => mapping(address => struct SimplePriceOracle.PriceData))"
          },
          "t_mapping(t_address,t_struct(PriceData)6151_storage)": {
            "label": "mapping(address => struct SimplePriceOracle.PriceData)"
          },
          "t_struct(PriceData)6151_storage": {
            "label": "struct SimplePriceOracle.PriceData",
            "members": [
              {
                "label": "price",
                "type": "t_uint192"
              },
              {
                "label": "lastUpdate",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "6c883b146c73b165c5657fe34f9eb19c86870b61d1141bb7bcfe3617158d2576": {
      "address": "0x3175EC52c36fFF63dCe00E8a50E6066D38884a11",
      "txHash": "0x9595cb82856f9d7d9a06bd439ab87d6474bff4986e081bafcd2b0fb585c6300c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)6127",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:29"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)14398_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:30"
          }
        ],
        "types": {
          "t_contract(PriceOracle)6127": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)14398_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)14398_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7f29d4fd64f3656c2c27c15f92ba44e0910ee99be21b0bcbc9fd9c46f4b6044d": {
      "address": "0xFe16999D88856a9E492cE3088Eaea8Fc9E2a05C4",
      "txHash": "0x20a3765bf6a394f4a50900d82ae9032d43b7504949b163da368831a012aab031",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:42"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:44"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:46"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)11746)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:48"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)3918",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:50"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:57"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)11746)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)11746": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)3918": {
            "label": "contract InterestModel"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f837206ea7531c10dd48f7528a75c4b7c512b3c95f812a9fff53025f969559c1": {
      "address": "0xD50aAb6B210fe049B6c5262f5A7676204699AB8E",
      "txHash": "0x9062c4528bd5c5eb05d83ec5cc5d2ee8df0b6ea919469046e3fc0c96831f3f21",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)11654",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)6721_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)11654": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)6721_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)6721_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9f94e1235301de89bd272a056e00e3924629397d386c13b662852bd1646be40f": {
      "address": "0x88d5186eb7fE8a28b358f1382A1499B2b81D8550",
      "txHash": "0x492ba508a4f6f2e21910dc81c02bc18065724edc09b4c716705d71e9b115aab2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:19"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:21"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)9376",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:22"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)9376": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9c34d77d958c30538df46e8b86963f6c7ff13c4ef76862ac965fe16b4bd26d1a": {
      "address": "0xC1203f662CecE399768ab9a92A2717d3CA93B465",
      "txHash": "0xb7f435f0f45ccc274fd2e0a92663e3f0ee9780bba1dabd01120ac19ea402b957",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyLiquidate.sol:17"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)9376",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)9376": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0e78b610f8ad84ec18fb3da2cd151377adda6c89a359e22eafdde7601f58007a": {
      "address": "0x205eC09443deBb37A526a384f68622baE69F6Fc6",
      "txHash": "0xe9b74bd4b5f651f4c49015fe177bb58291e099fbe8b87b59d7f08cb001ffebdd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "DebtToken",
            "label": "timelock",
            "type": "t_address",
            "src": "contracts/6/protocol/DebtToken.sol:11"
          },
          {
            "contract": "DebtToken",
            "label": "okHolders",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/DebtToken.sol:13"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bff9fe37dacb8f7f2affab5474fafb19e4d94d5905c97473eb713e202620b102": {
      "address": "0x7EEAA96bf1aBaA206615046c0991E678a2b12Da1",
      "txHash": "0x36b6ac0cc06f713a136dc108175829cb7e2a2b681cd985feaf0152d580f70f10",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)12483",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)7324_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)12483": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)7324_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)7324_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c961655dc0586f031055131c37a9927b1dd85aba2f3939288cee850f3c96a65d": {
      "address": "0xb63AcD06c7d6ecE492dFbA61C606855e49FB93F3",
      "txHash": "0x2c0579db550cd4d2d49a9d0c961f07a18396f2db4ce90d7dbcbb2057e3bb1c9f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)12377",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:31"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:32"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9393",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:33"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3393",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:34"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:35"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:36"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:37"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:38"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:39"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:40"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:43"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:44"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:45"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12390",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:46"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)12390",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:47"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:48"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:49"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:50"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)12377": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9393": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3393": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12390": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3e5460bb0c86748c85e7ce4682ab70f06ae2c7daf8e6e366681efe208e7f06e5": {
      "address": "0xabE59308AC72f04b1a2D04175d5247ba981075a6",
      "txHash": "0x8aec036da3c4619372d831e72d15c3a7959963a154c84daf1ebb2947c93ae7e9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9393",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)12398",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9393": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)12398": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5428f0ba3268ba1cc7c786a4099d43ddf4db7ec68afd5c8ef34e0b556f7fc208": {
      "address": "0x7e1A283C5FBE6b69C95397dEe0D02E6688afd0ff",
      "txHash": "0x9dfaee61de8a7353575e345daa60cb25a60befdd16cf9d2e7d32ad9fd512c503",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:13"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:15"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:17"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)12620)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:19"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)12633",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:21"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:23"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:25"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:28"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)12620)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)12620": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)12633": {
            "label": "contract InterestModel"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4cee1b89aed468306fe1fb6c5ec5dd3cdb4499e0627dd7ceee207cd31947e029": {
      "address": "0x02728B3d91823C86E4009D2441d46E7397F7BDd0",
      "txHash": "0x71a197e8e58e75f9f222d4e9989a72086ad0f4b13749be8eed1f2353e2b6ccf0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimalMigrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimalMigrate.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimalMigrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimalMigrate.sol:22"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f1e1a9472007289080912e6b19387577c38d6dc3e6b6d9a08887d9f76bb15bdb": {
      "address": "0x83dF8EDB615B455bFCe270ee2EE3562FD202353F",
      "txHash": "0x3421aecc48ae16df7f4188b26019907e048662618ff5ab52f4ce1acb50551d6d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddBaseTokenOnly.sol:19"
          },
          {
            "contract": "PancakeswapV2StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddBaseTokenOnly.sol:20"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "48a8b489935ac30d66c2f44ec0412b0c4d1271e453bff73b304b26fa06db8875": {
      "address": "0x4F34511e604a1795E854aEF9D872cb9c9836F1dF",
      "txHash": "0xd42bf9ad8f32e86f74242c7fe9739ad2ba19bb2ce5e75a04e7aaed8a92e47892",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyLiquidate.sol:17"
          },
          {
            "contract": "PancakeswapV2StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "21d3b67135442ee77b7443cf7b523059267978b1cd9ec2fd39e1833f9106e5d7": {
      "address": "0x811938726bC82Da82fC4aC5de28851F27Cc1dcb3",
      "txHash": "0x219070e455cf03b87fab6c4aa1e3da812efc8ee908f174d62a8306dd072ed403",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyWithdrawMinimizeTrading.sol:20"
          },
          {
            "contract": "PancakeswapV2StrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyWithdrawMinimizeTrading.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyWithdrawMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)15119",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyWithdrawMinimizeTrading.sol:22"
          },
          {
            "contract": "PancakeswapV2StrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)15127",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyWithdrawMinimizeTrading.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IWETH)15119": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)15127": {
            "label": "contract IWNativeRelayer"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "382d6f8a174c545b58f6e519a8e7c1e4a6f6e0d931145be6d87ddc3bec3a3e67": {
      "address": "0x77d23aFF927f3d46e51D449372c957B3CBBFB40e",
      "txHash": "0xc438dc7f26622afcb0dd2bbbd0bc76a8fb70720b69c02b58bcc805365a3063c0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddBaseTokenOnly.sol:19"
          },
          {
            "contract": "PancakeswapV2StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddBaseTokenOnly.sol:20"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0e096643820f2115971d4faf686bc318e95fd18548bddf834ac4336d3b25e247": {
      "address": "0xf02bE2D27461c4FB4fB7d474215E799cA07F3A97",
      "txHash": "0x32916977bc590a0de5c6dd1d1ce15ed9fa3c9d6bd1f33a1df9827b0dde0654a1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)15014",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)15014": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f10a7b89c6c4c11dbeddc841f4ab231cdf45a0d948d4aeffb9f74be70c6d3e3b": {
      "address": "0xAd4e7E32F2168073e456a9A14e11abb116e6b305",
      "txHash": "0x15c1cdb18cb7332e5699bf0808732609f99bb6a9af1b5fe60526be704517bb2c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3a301e3d17b75ae5b03f8222d86c333e3aeab0b369fba084843c1ae702232bc9": {
      "address": "0x349dBcF399e39642D43B6926C8Ac30D9CFEC5b80",
      "txHash": "0x4dc22fde26455cc5b67666dbcb2f25cc6ee2d93ad6b234bc92f3c92abb9f6f17",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bf5da656c7e7e48676402cfb9120aec68806a53a9f1bd5bddb45bdab0886809f": {
      "address": "0x9e698f779Cec7F42663B051Ff8176A55FCb8d471",
      "txHash": "0xe8d4711c35fe57701bfbdc86c8056b19e77bd198c44a8c85d830426ace53e5cf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7bd0f64c58a654d06a610f48f15adcbc0f800ac8a5fd1cc68b0bd07ab833b0e5": {
      "address": "0x7880Fd4125772d5Ef0e6F342E209c193d8c2c8A3",
      "txHash": "0xbac70b21ad65e5e846cc0b46de31215e5d7212f687cfb35d61d31a5f941a4753",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)12659",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:31"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:32"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:33"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:34"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:35"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:36"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:37"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:38"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:39"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:40"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:43"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:44"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:45"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12672",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:46"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)12672",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:47"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:48"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:49"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:50"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:53"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)12659": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12672": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8949036904553fbf6e1433c155dba40c2f57abb7463cea36466d3fa327a93d1a": {
      "address": "0x09FD9321aad19bF98C85A7DF06891b38ABcbe57B",
      "txHash": "0xa1b8cab81f2fb26ea60b31a421aa959b794c3fc5116ed11462931731233ca4d5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:13"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:15"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:17"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)15215)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:19"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)15228",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:21"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:23"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:25"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:27"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:29"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)15215)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)15215": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)15228": {
            "label": "contract InterestModel"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5c9bc885c81d307817c13349e92180112226688296e909b8f712731f5d574e2a": {
      "address": "0x036664394715D255895f600861fE882A167dbF57",
      "txHash": "0x97874e36e150be07614a93358be2752b64f45b0af15a703e7a576f56fa9d13ab",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "DebtToken",
            "label": "timelock",
            "type": "t_address",
            "src": "contracts/6/protocol/DebtToken.sol:11"
          },
          {
            "contract": "DebtToken",
            "label": "okHolders",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/DebtToken.sol:13"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d56626a41bc68f496a348f13ec34418b3a4860dfe1d75516d4326e9c96f0c01a": {
      "address": "0xcF33D2dFdA8A99ca81876E301577FF83866ce88B",
      "txHash": "0xbbdbe4e960e21f48ed8543d45273e5910234924a0518a7635d5286b580bbba66",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)15099",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)7428_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)15099": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)7428_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)7428_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9b3938766bbd9ba4345874a66b368e86b4ef784fae6a480c2fef18d9224f1636": {
      "address": "0x0EEca1690C59FB195Fd158f44C4f3230Ed28561C",
      "txHash": "0xb2bcad547c86e9d2ea0e7b4e7f78e6e53df428fbf87f8304041af2088ad2ad34",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)15014",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)15014": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c33d097ab882f73cab9db8eebf24c10e34ff31659632c0b7dcfbdbed02789308": {
      "address": "0x462c2D17fd631B6BDB172a72d6da7D7EC48f4e14",
      "txHash": "0xf5dfe36ab7f645bd8300006ada680c36b1b106b44b3dc18a65b5965b08d929e2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c1ac4680e67a393367af5b24ff033c3ef802be99720ecaead3ac9f1ff7a15e15": {
      "address": "0xBbf2a7FacDB318F7670cE87A5F6571Bb001d8F06",
      "txHash": "0x52019a5863e5a7dd96e5f4dba19a16dd06752135cce0816c91873db645d288f5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)15014",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)15014": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2698fd32ca8d71c3df4a538ab0f790788326cdb50a5c6924cd6c51ea879d05e1": {
      "address": "0xD50A06E444d2A85098B3dbc66a5D1946789Bb869",
      "txHash": "0x122370ea38d5e80b294f999c88e5f108ee2cc063e67ff4382f75be979d4abb73",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignRewardInfo",
            "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)908_storage)dyn_storage)",
            "src": "contracts/6.12/GrazingRange.sol:56"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignInfo",
            "type": "t_array(t_struct(CampaignInfo)903_storage)dyn_storage",
            "src": "contracts/6.12/GrazingRange.sol:58"
          },
          {
            "contract": "GrazingRange",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)888_storage))",
            "src": "contracts/6.12/GrazingRange.sol:61"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardInfoLimit",
            "type": "t_uint256",
            "src": "contracts/6.12/GrazingRange.sol:65"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardHolder",
            "type": "t_address",
            "src": "contracts/6.12/GrazingRange.sol:67"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_array(t_struct(RewardInfo)908_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct GrazingRange.RewardInfo[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(RewardInfo)908_storage)dyn_storage": {
            "label": "struct GrazingRange.RewardInfo[]"
          },
          "t_struct(RewardInfo)908_storage": {
            "label": "struct GrazingRange.RewardInfo",
            "members": [
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(CampaignInfo)903_storage)dyn_storage": {
            "label": "struct GrazingRange.CampaignInfo[]"
          },
          "t_struct(CampaignInfo)903_storage": {
            "label": "struct GrazingRange.CampaignInfo",
            "members": [
              {
                "label": "stakingToken",
                "type": "t_contract(IERC20)523"
              },
              {
                "label": "rewardToken",
                "type": "t_contract(IERC20)523"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20)523": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)888_storage))": {
            "label": "mapping(uint256 => mapping(address => struct GrazingRange.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)888_storage)": {
            "label": "mapping(address => struct GrazingRange.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)888_storage": {
            "label": "struct GrazingRange.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b854e9e07531db861363894aaf3d8a7523747ac1870ff6c83372e45178e485bd": {
      "address": "0xB7dA04CB7dae797397e290C79079f959e4877009",
      "txHash": "0x58d85784e5b65c90b184415e98719b89d7a86fb271f1daf7043756ee471d90d7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddBaseTokenOnly.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddBaseTokenOnly.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddBaseTokenOnly.sol:24"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6ab477c6e5921e4c3db10f9b7dd6c804c2c5a07996b01db4f403dac15be4fc69": {
      "address": "0x93E8027515a51c68fed014E3Ae76d6c490358796",
      "txHash": "0xe02d363a9228851f66820602e07a553bfc5592d29620ecb5d11ff54c94351b0d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:18"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:19"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:21"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7ee01e9ac28ae0ce3b3e5ad38c2a901d68144f96a77e46f528ca7c949de5b650": {
      "address": "0x32b02e91dD0D7496FF34EBD9dEB12973eE86e946",
      "txHash": "0x2092bfdd65c2c604db705313f373b5757b9dc3b13ca5b9f398ade9740867f7bf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:21"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)12806",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)12814",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:24"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:26"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IWETH)12806": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)12814": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "549f7fbbdce84772b6b3efd3f60297e1181b8a3bfe2feb3c1280f9e3c128c94a": {
      "address": "0x4a967509e424969Bc766D5B0dA74e59e18392CDA",
      "txHash": "0x0d6064c30e0029e8954491a5c8ab3c9c810aa08a6112060e0a772d774d7949e3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)12701",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:24"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:26"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)12701": {
            "label": "contract IVault"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c362a0ff214b93bfb274b9e752721dd977d60fb6d07d995b38ec1679247c76f1": {
      "address": "0xcac73A0f24968e201c2cc326edbC92A87666b430",
      "txHash": "0xa03b0412d85206d09a6a5bef2011a1ad68178ffcc46cc5ad86c5258a6c5c8010",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)16756",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7906",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:52"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:54"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:55"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:56"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:57"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:58"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:60"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:61"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:62"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:62"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:65"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:69"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:70"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)16756": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7906": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16784": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e16b45f17caded9d02b697c1d54c25feebcfe0d98eb76ebc71dae461af138c5e": {
      "address": "0x744BB95C6f31A0B6f7E7B53c46342b42Aafc21D3",
      "txHash": "0xe906d13a2bbebd8fe5e107e86fc04cca9b88623736f05e03b2720c0c1427a43c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddBaseTokenOnly.sol:21"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddBaseTokenOnly.sol:22"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddBaseTokenOnly.sol:23"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "38cb5eeb8a7d2a8f851ac2733b94a097ac7cbccb419c7a65355b538ddd0ea100": {
      "address": "0xd7F9D59381346da932C68BA399e398501E0601E1",
      "txHash": "0xa763fdb2908c4179426d1146b77cfae91d65f0fad5d92eb20baa6362afb9265c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:19"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:20"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:22"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "930a6bd255d31ddf17df073ae962078e496df03a99c6d046f9d7e4b617e3cb32": {
      "address": "0xBf4C99bF1DB12E1AD96672C7ad652BC5fE0F23eb",
      "txHash": "0x0afe074b42daf93e09cae7f983fd50a9782dc275584229463ca6ac87b854c1d9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:26"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:27"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)16187",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:28"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)16195",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:29"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:31"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IWETH)16187": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)16195": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d7e17487189ee0f031b2a169bc7cd63474f13efe3f12259b4193071035284258": {
      "address": "0xda5C06064d29bd7525123D86d17c57512cE98586",
      "txHash": "0xf80e7f4646be0251a66f052ea2584086768dd39ec7ca6ccb7cce4569ed32feeb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:23"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:24"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)16082",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:25"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:27"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IVault)16082": {
            "label": "contract IVault"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9e5b06d4dc1a15900daccae2a880d31a87b430309687c0bf69a497a84833593d": {
      "address": "0x9D97bAd1fD253bA3Ac46A8281ae6571Ad6D307dE",
      "txHash": "0x273345372522844a5cdfc405cdf936fff68751bea3a121ef480ccd97ead39e7a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "wexMaster",
            "type": "t_contract(IWexMaster)17010",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:46"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12951",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:47"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)13589",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:47"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:49"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:50"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:50"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:52"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "wex",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:55"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:55"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:56"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:58"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:59"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:61"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:62"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:63"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:63"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:64"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:66"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:68"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:69"
          }
        ],
        "types": {
          "t_contract(IWexMaster)17010": {
            "label": "contract IWexMaster"
          },
          "t_contract(IWaultSwapFactory)12951": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)13589": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16784": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4743c1df3eaf4146aa00f9013222e083cba23380bf04aedfe0fa31606ba19120": {
      "address": "0x3DFC436f2194CA9Ab2faf314F95492c0485b16b5",
      "txHash": "0x4cf09fce17be573b60f4177169a90035c82f692d9fb54d2efeafbb236af2360e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)16906",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:52"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)29450_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:54"
          },
          {
            "contract": "WorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:55"
          }
        ],
        "types": {
          "t_contract(PriceOracle)16906": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)29450_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)29450_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "747cda4e0173bbd85c0829dd31f2f0db408884dbaacc9ccb3ae0c100eefffa13": {
      "address": "0x9A5105C9dD6c6AE76518f4afbbd388514C334D96",
      "txHash": "0x6a9764582f2d7a8dbed4372b69615015a6d023b092df9a5655fe3eaeab8857fa",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly.sol:35"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly.sol:36"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly.sol:38"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "03d83c12a0a15aae680a21edf05c60ef2a4ba87e1bbb049ba8114bc2dca10c4a": {
      "address": "0x75A6B8C95bB115706b111C50BCad3607b9565E83",
      "txHash": "0x3f9813de6c74250a3de93099c20605bc811779604f19fe4fbd91dc65ee0c9691",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:39"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8079",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:42"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:42"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8079": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5ae60b12ece203dd85d16008cecfe18bf0935976280bb629bbc2106c4c02d1c1": {
      "address": "0xb7025d33762580FD48b412c3A5108Be33c91Df77",
      "txHash": "0x8be47cc4336c4b4163da388ab5ee737fa7aac5d7bdf156204cb6e3f4ae5d9a32",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading.sol:39"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)16195",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading.sol:42"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IWNativeRelayer)16195": {
            "label": "contract IWNativeRelayer"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8d392be80039560cca3fae929b53016e9b27d62ce4d4625a4e7a83ffdbe12bd7": {
      "address": "0x69B5018910F9C8D82d544f315e9D3477236eD0E1",
      "txHash": "0xf27b8144b1512e797bb07d305c5bb1bd3719a76b0e51369e297fbf692f9d590c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:36"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:37"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "vault",
            "type": "t_contract(IVault)16082",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:40"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVault)16082": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "aa0c4c091151b5396d7e62bde780d27253e0b97747d60e4f0f08f89190b3a23b": {
      "address": "0xFBeFffDBa82C98cf157Cc709Ab0cf7e19301BC27",
      "txHash": "0x0bfb177b2001ec7f513f050dcf1d078d0422dd16c48c92804b21ec7ba08928b1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)16906",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:56"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:57"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:58"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)28866_storage)",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:59"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:60"
          }
        ],
        "types": {
          "t_contract(PriceOracle)16906": {
            "label": "contract PriceOracle"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Config)28866_storage)": {
            "label": "mapping(address => struct SingleAssetWorkerConfig.Config)"
          },
          "t_struct(Config)28866_storage": {
            "label": "struct SingleAssetWorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "78c2c2e20b87f68aecd8ee7f699847597b2796fe86a953ae49888834bb655acc": {
      "address": "0x025bA0e82d45E29E831c53637Bea2cE9D88199C2",
      "txHash": "0x605e5b246200a3cae83fcd4c6840cd4573b6bf16a7b0303b4a5b4608eea957c0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)16756",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:55"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:57"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7906",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:57"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:59"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:60"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:60"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:62"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:63"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:65"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "beneficialVault",
            "type": "t_contract(IVault)16818",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:66"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:67"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:68"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:70"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:71"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:72"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:72"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:73"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:75"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:75"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:76"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:79"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:79"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:83"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:84"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)16756": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7906": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)16818": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16784": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b5e52a1495508415c1b36f7212daf2f616684ed75321737c671a83a85940401e": {
      "address": "0x564c51709Ce87eB07a16Ba6f595C08b8bd20400a",
      "txHash": "0xeb85d2fea8f8e2b7e8f6d8247bef1bae62a1b06a2bb75f89aec5fd574a24398e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "OracleMedianizer",
            "label": "primarySourceCount",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:26"
          },
          {
            "contract": "OracleMedianizer",
            "label": "primarySources",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660)))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:28"
          },
          {
            "contract": "OracleMedianizer",
            "label": "maxPriceDeviations",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:30"
          },
          {
            "contract": "OracleMedianizer",
            "label": "maxPriceStales",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:32"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => contract PriceOracle)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660))": {
            "label": "mapping(address => mapping(uint256 => contract PriceOracle))"
          },
          "t_mapping(t_uint256,t_contract(PriceOracle)16660)": {
            "label": "mapping(uint256 => contract PriceOracle)"
          },
          "t_contract(PriceOracle)16660": {
            "label": "contract PriceOracle"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "c4c781872862b93d23896d4769a5054cc50defc19092c77c67fc2ff116e858ca": {
      "address": "0xc60E83fA880E525FA7E46f170e3E1337d87BaAa3",
      "txHash": "0xebd070626da3b24f3736c37e20d60e44e6c2d4710b37fed1f13629d6a1ee1be8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:41"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:43"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:45"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17090)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:47"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17103",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:49"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:56"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:58"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17090)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17090": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17103": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7e3bb24126c1ed5dfb12be3c890b52b8cab0ca0879abedcad9da26066f8af8a6": {
      "address": "0x58aE2f9aae13Fde75c61Dd2448838D84B43F66ea",
      "txHash": "0xaac1f533c4a8bea60d02d6f8cf366d53c84b0a5b10f49355f7aa90e4fadd7fe9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ChainLinkPriceOracle",
            "label": "priceFeeds",
            "type": "t_mapping(t_address,t_mapping(t_address,t_contract(AggregatorV3Interface)45))",
            "src": "contracts/6/protocol/price-oracle/ChainLinkPriceOracle.sol:27"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_address,t_contract(AggregatorV3Interface)45))": {
            "label": "mapping(address => mapping(address => contract AggregatorV3Interface))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_contract(AggregatorV3Interface)45)": {
            "label": "mapping(address => contract AggregatorV3Interface)"
          },
          "t_contract(AggregatorV3Interface)45": {
            "label": "contract AggregatorV3Interface"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "53d8a580bfee38780474e0cbd3234d673390d73f89251fcc2337f3c1d654cbf6": {
      "address": "0x0e98F04411d43c800608CA5019C216C212aAE694",
      "txHash": "0x7832a131755b9e15902ef256baa3fe58bd93f88a5595ed057f9ffeabd4173e43",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:60"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:71"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)16884",
            "src": "contracts/6/protocol/Vault.sol:78"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5817_storage)",
            "src": "contracts/6/protocol/Vault.sol:79"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:82"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:83"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)16884": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5817_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5817_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c7846a35ee75364980b54a3270872a4928a315aa702244b09981216820c881e1": {
      "address": "0xc69C8C2944C331a8f9B49C5027dA45E427c3708b",
      "txHash": "0xcc4310df46f2c59c81d1f7752711055ea028ba36bc31ff3848a6e2729365c4e8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)27062",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:66"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)18144",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:70"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:73"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:75"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:76"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:77"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:78"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:79"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:81"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:82"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:84"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:86"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:90"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:90"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:93"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:94"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:95"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)27124",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:97"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:100"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:101"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)27062": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)18144": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)27090": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)27124": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1dac03f2ffae2ee766c042fbcb96d5f091f92503bfbd8e37c488ef129e35214b": {
      "address": "0x3297961610d8A64f41CB4f577448bf3a57738303",
      "txHash": "0xafe2dd11397e26a904d76cbcff1174a8cefee9aa1087c97236e9d713d3980f32",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "OracleMedianizer",
            "label": "primarySourceCount",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:26"
          },
          {
            "contract": "OracleMedianizer",
            "label": "primarySources",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660)))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:28"
          },
          {
            "contract": "OracleMedianizer",
            "label": "maxPriceDeviations",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:30"
          },
          {
            "contract": "OracleMedianizer",
            "label": "maxPriceStales",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:32"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => contract PriceOracle)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660))": {
            "label": "mapping(address => mapping(uint256 => contract PriceOracle))"
          },
          "t_mapping(t_uint256,t_contract(PriceOracle)16660)": {
            "label": "mapping(uint256 => contract PriceOracle)"
          },
          "t_contract(PriceOracle)16660": {
            "label": "contract PriceOracle"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "6ff80cb937e10bb9e493ac8b54525ceb3ef2baadff9e65376fa203827cd5227f": {
      "address": "0x238B84Fc7635C33F46313ebff4283dc0e2eE3221",
      "txHash": "0x5902d649866e0ab75e38db38a85cecefce9aaa5fcd95f899b1cf5bbc125432d7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:44"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:46"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:48"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17138)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:50"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17151",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWrappedNativeAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:56"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getFairLaunchAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:59"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:61"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:62"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillTreasuryBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:64"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:68"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17138)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17138": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17151": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0d80212f715e777f517734365e885853280d1e2dbc4039420feb56569b4ce6e7": {
      "address": "0xCE8ecbaB55105164FdcfE9B8ac67b0f644B212FC",
      "txHash": "0x4c9662593b484b3ae219097c349268d9fdee9db786892fa3617413c2ddcd8150",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:60"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:71"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)16923",
            "src": "contracts/6/protocol/Vault.sol:78"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5756_storage)",
            "src": "contracts/6/protocol/Vault.sol:79"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:82"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:83"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)16923": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5756_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5756_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f7ec519ca6b6f1d0bd57bab7c84cc66d70dafa565ccf28085fd617a72574eed3": {
      "address": "0x97D3282F64Dc0A0243386880fC00542CD00a20f4",
      "txHash": "0x462e165bdcb0fb11a46657c0cc573c5a6a8f048c070370d6f4afe54790780ecb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wexMaster",
            "type": "t_contract(IWexMaster)27378",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:67"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)23189",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:68"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)23827",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:68"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:70"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:71"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:71"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:73"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wex",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:76"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:76"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:77"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:79"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:80"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:82"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:83"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:84"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:84"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:85"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:87"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:89"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:89"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:92"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:93"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:94"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:95"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)27124",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:95"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:96"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:99"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:100"
          }
        ],
        "types": {
          "t_contract(IWexMaster)27378": {
            "label": "contract IWexMaster"
          },
          "t_contract(IWaultSwapFactory)23189": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)23827": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)27090": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)27124": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b100103ee955aab9679e79fd9a1bf3a6da8e579bdb27a361c7d445a930de6956": {
      "address": "0xC82aca9C28Da7092527C160F5bD72dBC3dF6c8E3",
      "txHash": "0x9c3613e419b8573ff6ea318734b7516e6b7290d105fe4d04649888be389ff95b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)22422",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3419",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)13471",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3661",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:71"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:73"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)22629",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:75"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:78"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)22450",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:79"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)22450",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:94"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:95"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:97"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:98"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)22422": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3419": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)13471": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3661": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)22629": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)22450": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "569462fdded32ec1cf28fce98c2ea3d939364312a4bad7077409baf585e0eda9": {
      "address": "0x1313C57C5Db43F932A8c91e12d19c2890fe3AE55",
      "txHash": "0x465c1c24198b4ac6bdf481c83a09962450f2f39173ef8fd6ad9de360a2d5665f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseLiquidate.sol:41"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseLiquidate.sol:41"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseLiquidate.sol:43"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "226f6395a340b895794c9cda27e45d8c147638f1b1a450715c37be256e32a693": {
      "address": "0x1fA4d6a2498CbdEc555fA727689f9B9d4587B464",
      "txHash": "0x93a6cf26ec6e863cce2c522f5683cfda800c111e69f8c61ae8eb5d6b6ada18d1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading.sol:42"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading.sol:43"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)17147",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading.sol:45"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)17155",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading.sol:45"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading.sol:47"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IWETH)17147": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)17155": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1ed313e8a8d5cf832b6c25a6edb6bf605340a12471543f5b1983871cc3c2e4b0": {
      "address": "0x91C1F2E7F7E6B77171EbDA204F074a574eDf2D24",
      "txHash": "0xcc28d04cd2a5200d8358dc86bb2e6377b7655b8a783833d6e7c1743ab671685e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseLiquidate",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)13131",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseLiquidate.sol:35"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseLiquidate",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)13769",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseLiquidate.sol:36"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseLiquidate.sol:38"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)13131": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)13769": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d68b7e92392b9975efc4475cd8abbf4b19d8cc8a9ebc7d6f810885bc3240d819": {
      "address": "0x83D6f3ac9c88C238B0d1676e1FcE59F4B026ad03",
      "txHash": "0x692bb9264b20f156f99e5fbcf86a424680afaad9592ad3b2680432501f61d342",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)13131",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseMinimizeTrading.sol:41"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)13769",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseMinimizeTrading.sol:42"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)17147",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseMinimizeTrading.sol:44"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)17155",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseMinimizeTrading.sol:44"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseMinimizeTrading.sol:46"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)13131": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)13769": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IWETH)17147": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)17155": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "eafa4c08c020a0bde27ca67c550c4f981a75be87d5f05442a6542fdd6bc1d46d": {
      "address": "0x23850A04f9dBf488780d998Dd0048d472f7cC61c",
      "txHash": "0x4364f7f0562a0fb862b8008dc250eab1302c14f49f70db94581d044e2898f492",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate.sol:41"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate.sol:43"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate.sol:43"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "354225867a5c534728a16189d1785b51bb6d9d3148547e41d576c93d50920959": {
      "address": "0xd1B41E43fe46Db03959ee87Dc00f498AE3D7c547",
      "txHash": "0xdcdd923772c1938dd274e724d35c4700bc200fc25f951138526771f08f67fff9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseWithdrawMinimizeTrading.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseWithdrawMinimizeTrading.sol:41"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseMinimizeTrading",
            "label": "wbnb",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseWithdrawMinimizeTrading.sol:42"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseWithdrawMinimizeTrading.sol:42"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)17155",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseWithdrawMinimizeTrading.sol:44"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IWNativeRelayer)17155": {
            "label": "contract IWNativeRelayer"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a2f5e484ee43caefe253bb5237a7d8442d5ca35d97e8f649f9ef8cc6f7322af5": {
      "address": "0x20EbEe5D5127d47b686ECfAcf548Ca4a65108684",
      "txHash": "0xd8d5e98233de1dc0ca87bba35221b3d241cf11f063194c369e433e635b1745a9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:40"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6e84bcbce484df6f99cd90d4ca266fceb7ae67e2dcfd152745a784770e80e0d9": {
      "address": "0x67420cc8FDa18B061Fb4ba63777736Cd8aE3053F",
      "txHash": "0x3fea338b0f8c42a2541d487f93bc9744e23f074f4cdd9d04aafcb7d1332e356b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:41"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:43"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:43"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c83ff55be7ed992979b5f41bd224c0b90a59d4ec97c43779c9d91f974aa5cb57": {
      "address": "0x64E7dE687625981497f21bD31135F6A9049935F7",
      "txHash": "0x0787b18f2a10e548f3699945216162aad45bd9a6b758b2863fee9c85ea219bc8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)13131",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:37"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)13769",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:38"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:40"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)13131": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)13769": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "59e0c0b2246a9ffe76b89a6edf3a09782dd871068693623adc2cc80d37ed2495": {
      "address": "0xC2d5CF622F314E8d79f84C5c643e18C509425857",
      "txHash": "0x03da2fdb828655be4054e9f5a1d20ceac3d752c1f73c2f1b434cf05485fcf883",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)16976",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:52"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)29671_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:54"
          },
          {
            "contract": "WorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:55"
          }
        ],
        "types": {
          "t_contract(PriceOracle)16976": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)29671_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)29671_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b400d79171b91d78211fd33cb45021684a9871b8739daf91db74ab55bbc09f06": {
      "address": "0x9b659a26938e6Bf15264A89457B555B46b034D34",
      "txHash": "0x2b50edf5c6b695b0058add28585d3871097c9a22f0476ede032066c1f37c36d3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)16976",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:56"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:57"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:58"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)28963_storage)",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:59"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:60"
          }
        ],
        "types": {
          "t_contract(PriceOracle)16976": {
            "label": "contract PriceOracle"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Config)28963_storage)": {
            "label": "mapping(address => struct SingleAssetWorkerConfig.Config)"
          },
          "t_struct(Config)28963_storage": {
            "label": "struct SingleAssetWorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c55d5475e8dbfabafd9064d18301d39849b12c357967ba5bf07052ac48eac05b": {
      "address": "0x5702223873b50b934265360074AF68973900613F",
      "txHash": "0x820f7e2c5be6136b627f6d16d3176cba80a5cb93bd4fd9ce368240b0221c5ffb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:45"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:47"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:49"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17383)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:51"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17396",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:53"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWrappedNativeAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:55"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:57"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getFairLaunchAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:60"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:62"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:63"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillTreasuryBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:65"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:68"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "approvedAddStrategies",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:70"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17383)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17383": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17396": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "99fe2a72b87783175f0648b6b3c9dcb9eb326004a9f2bbedcea9d477be805716": {
      "address": "0xac85FA48997B9CC3784c4FeDff0070091a322C31",
      "txHash": "0x1977297028d1033cc38858f7cf9dad0fd0210967db1b89d4f307d2bf5825dd82",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:65"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:75"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)17152",
            "src": "contracts/6/protocol/Vault.sol:80"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5942_storage)",
            "src": "contracts/6/protocol/Vault.sol:81"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:86"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)17152": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5942_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5942_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3fe77852d4fa3d86e8bfc4115a60318eab658f28688d744b9394eb12acd696a5": {
      "address": "0xCbBC7F00B6c68c0901AF71d103c9DBf362Fc429C",
      "txHash": "0xa94e8e2835666fee10ec1288e1758e63218ece9764cf9edc28a39e2541009dc3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)17021",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:52"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)29756_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:54"
          },
          {
            "contract": "WorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:55"
          }
        ],
        "types": {
          "t_contract(PriceOracle)17021": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)29756_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)29756_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cd347d4914f7860cb5d35c95d62089d97057b3dd10428420f34cefd92a473f78": {
      "address": "0x0a3617197113Ed2a9BbcadfB3C4f417734b1F8Aa",
      "txHash": "0xcdbd48f668b2a79ee7eb26128e184d74940bf3f50866e36e31f00d657dbbe8dd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)17021",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:56"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:57"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:58"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)29028_storage)",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:59"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:60"
          }
        ],
        "types": {
          "t_contract(PriceOracle)17021": {
            "label": "contract PriceOracle"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Config)29028_storage)": {
            "label": "mapping(address => struct SingleAssetWorkerConfig.Config)"
          },
          "t_struct(Config)29028_storage": {
            "label": "struct SingleAssetWorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4fb88fd4eafde2b593c152a6761aa1cbc015762d28bc51ad5e0df39408882fef": {
      "address": "0x14613598f0E929f8bb1F89051FD976b0A7b67beC",
      "txHash": "0xf24b6bbfc5a2dea19f0f13d39467b332bf2f2f829a931d0dd4ea14138ff83278",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:45"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:47"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:49"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17448)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:51"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17461",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:53"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWrappedNativeAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:55"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:57"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getFairLaunchAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:60"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:62"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:63"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillTreasuryBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:65"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:68"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "approvedAddStrategies",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:70"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17448)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17448": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17461": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7eeba5c432e7954bec1fa6ce9a35b3bb45140d2c6004bd2f9b23fac62a416063": {
      "address": "0x15bC06b928917228893DA2496b0EA86345a63853",
      "txHash": "0x80c3283e4bb9ea205ce935823beeb2b2e27a933a28eae766e02007acd52eb4a4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:65"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:75"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)17207",
            "src": "contracts/6/protocol/Vault.sol:80"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5987_storage)",
            "src": "contracts/6/protocol/Vault.sol:81"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:86"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)17207": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5987_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5987_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "88d9101882c2c79d37a5ea07ebaa823d0328ddafaefd920f306aef6bcc1482c7": {
      "address": "0xC2f7c637702b9131cb58dCBf49A119b77D994eD3",
      "txHash": "0x10c42ccb5e1fc16b310a801094a4a56e8d25773962fe0f4b96ee7f34fb3fdaf1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:46"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:48"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:50"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17563)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17576",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWrappedNativeAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:56"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:58"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getFairLaunchAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:61"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:63"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:64"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillTreasuryBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:66"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:69"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "approvedAddStrategies",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:70"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedLiquidators",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:73"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17563)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17563": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17576": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "37d5545254a7ab729b54e2f28ce2b3e33dc77beb6399216ff4cbee2196448add": {
      "address": "0xcC7830c29Fa5FdF0E289562470672285290e3a20",
      "txHash": "0x1235f0905c2a13bf2f78988f37aae326bcb89c1bfc889a3c9fa553522ec6ed66",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:65"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:75"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)17322",
            "src": "contracts/6/protocol/Vault.sol:80"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)6080_storage)",
            "src": "contracts/6/protocol/Vault.sol:81"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:86"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)17322": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)6080_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)6080_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "805c8510b68f41a1c9be1996c04b242599731bd3ae985d2e5add8a13ee134283": {
      "address": "0xCDd640F7Cc3c5001CA06f00d578b85F895Dd2379",
      "txHash": "0x7f14793a90ba65a6023ea5c8e14623375ea9c94371aa65c73f5443e6caffd06a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)27062",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)18144",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:71"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:73"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)27124",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:75"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:78"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:79"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:94"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:95"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:97"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:98"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)27062": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)18144": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)27124": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)27090": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "61f5fb7c5436eb25d5435fd6688ccfd1d41fd9237a3cd4ee10cc2df53a1abc76": {
      "address": "0x9cBc68B89fe7EDdE4609d0FCfCa835c976C959c9",
      "txHash": "0x4d2f0527218df093ef561275ed50ed62addf6edfad2b1e97e8034d1a0fd99d24",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)27062",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)18144",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:71"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:73"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)27124",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:75"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:78"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:79"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:94"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:95"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:97"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:98"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)27062": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)18144": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)27124": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)27090": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9b1b651d275c5fc71d3c9e28301c439173e678923a3f3a10dee8303039a3d3f3": {
      "address": "0x0E7b1e4dedC07f711493ad696e2ee4969a119E2f",
      "txHash": "0xf22d8fe7c80b94d4bc733f281aabade67d125155613d0126cfc50e0c4ce0edd5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)27062",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:66"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)18144",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:70"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:73"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:75"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:76"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:77"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:78"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:79"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:81"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:82"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:84"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:86"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:90"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:90"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:93"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:94"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:95"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)27124",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:97"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:100"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:101"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)27062": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)18144": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)27090": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)27124": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "64b9849e8df6ec5edf9aae1f177d0f8d5f8c7ee79a70028bdc117201fb3e1635": {
      "address": "0xf9bdA298fa04200002fF3b7e08E407a6BDe04246",
      "txHash": "0x75ca0938508592a6f220c6cb1c1f054a9cf6df9cdb1dc100cfc0d057647451ec",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wexMaster",
            "type": "t_contract(IWexMaster)27378",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:67"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)23189",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:68"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)23827",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:68"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:70"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:71"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:71"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:73"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wex",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:76"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:76"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:77"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:79"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:80"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:82"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:83"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:84"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:84"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:85"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:87"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:89"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:89"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:92"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:93"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:94"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:95"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)27124",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:95"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:96"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:99"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:100"
          }
        ],
        "types": {
          "t_contract(IWexMaster)27378": {
            "label": "contract IWexMaster"
          },
          "t_contract(IWaultSwapFactory)23189": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)23827": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)27090": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)27124": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5581da09e1c2ec032de9b34f90fff245505ad88c74f96ed7c94da0ab6b120a24": {
      "address": "0x0455Ce6B16629883C52D54ac5D5fcB4622D8275D",
      "txHash": "0x193e486ba441777d2613099db645ba85c7cdb7714f1a92a9b70eb2ff3857e5f9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)30199",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)30131",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)19671",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)30441",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:71"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:73"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)31437",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:75"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:78"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)30522",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:79"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)30522",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:94"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:95"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:97"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:98"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)30199": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)30131": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)19671": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)30441": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)31437": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)30522": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bbb16d03c86877a4e3c6689869598aaaa1edc72ad88f3cbd26488d5f51239c1c": {
      "address": "0x29A08f38aF02FcC2a75E91144E3931E26d31c88a",
      "txHash": "0x5b322425af540d7aa2c20b0fdfabe8bfedb78be8765e7f1a49a3f995fc1f6237",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wexMaster",
            "type": "t_contract(IWexMaster)31691",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:67"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)26263",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:68"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)26901",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:68"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)30441",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:70"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:71"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:71"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:73"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wex",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:76"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:76"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:77"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:79"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:80"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:82"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)30522",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:83"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)30522",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:84"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:84"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:85"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:87"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:89"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:89"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:92"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:93"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:94"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:95"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)31437",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:95"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:96"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:99"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:100"
          }
        ],
        "types": {
          "t_contract(IWexMaster)31691": {
            "label": "contract IWexMaster"
          },
          "t_contract(IWaultSwapFactory)26263": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)26901": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IPancakePair)30441": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)30522": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)31437": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "55883bcc3eca3bc812b4061d256f30908dd8b98c39812657cb067db7a2441bb6": {
      "address": "0xEAc60EC7f7623b3db636C9fc9758E8Cbf3fF0548",
      "txHash": "0x7f128d964b1cbf0ecd1d293f687d0b74d2760a842732bc55846432a3a834dc41",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "MdexRestrictedStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IMdexFactory)11013",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyAddBaseTokenOnly.sol:42"
          },
          {
            "contract": "MdexRestrictedStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IMdexRouter)11658",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyAddBaseTokenOnly.sol:43"
          },
          {
            "contract": "MdexRestrictedStrategyAddBaseTokenOnly",
            "label": "mdx",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyAddBaseTokenOnly.sol:45"
          },
          {
            "contract": "MdexRestrictedStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyAddBaseTokenOnly.sol:45"
          }
        ],
        "types": {
          "t_contract(IMdexFactory)11013": {
            "label": "contract IMdexFactory"
          },
          "t_contract(IMdexRouter)11658": {
            "label": "contract IMdexRouter"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0701a4652c52375f4f487d86afce641206a5fce2450f796a9e7e8a41b15518c2": {
      "address": "0x812298f58B7CC413f06aA88F10fad71BD55ae475",
      "txHash": "0xffcc41b18051ebf6983fc3fe10ecb8fd5d8e2c16f9870a0e9ac6bdd5b1e7366a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "MdexRestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IMdexFactory)11013",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyLiquidate.sol:40"
          },
          {
            "contract": "MdexRestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IMdexRouter)11658",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyLiquidate.sol:42"
          },
          {
            "contract": "MdexRestrictedStrategyLiquidate",
            "label": "mdx",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyLiquidate.sol:44"
          },
          {
            "contract": "MdexRestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyLiquidate.sol:44"
          }
        ],
        "types": {
          "t_contract(IMdexFactory)11013": {
            "label": "contract IMdexFactory"
          },
          "t_contract(IMdexRouter)11658": {
            "label": "contract IMdexRouter"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4b0603dc707ce73e84bfbdb9712745e28da75b1961531a93ee7034b44c8ab260": {
      "address": "0xa5e98C503D62ee19619b3ef12085F0D35D2a3463",
      "txHash": "0x0c0ccaba83c20ff1841f3b16c8fa8b4216391438869a9a11e931c685afe067f1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "MdexRestrictedStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IMdexFactory)11013",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyWithdrawMinimizeTrading.sol:43"
          },
          {
            "contract": "MdexRestrictedStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IMdexRouter)11658",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyWithdrawMinimizeTrading.sol:45"
          },
          {
            "contract": "MdexRestrictedStrategyWithdrawMinimizeTrading",
            "label": "mdx",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyWithdrawMinimizeTrading.sol:45"
          },
          {
            "contract": "MdexRestrictedStrategyWithdrawMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)27311",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyWithdrawMinimizeTrading.sol:47"
          },
          {
            "contract": "MdexRestrictedStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)27319",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyWithdrawMinimizeTrading.sol:47"
          },
          {
            "contract": "MdexRestrictedStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyWithdrawMinimizeTrading.sol:49"
          }
        ],
        "types": {
          "t_contract(IMdexFactory)11013": {
            "label": "contract IMdexFactory"
          },
          "t_contract(IMdexRouter)11658": {
            "label": "contract IMdexRouter"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWETH)27311": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)27319": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d8748b8fb6edba751331af5eb3534e3fbc00ed4bbf119bebf7b0bd770cea6457": {
      "address": "0xd7103AC4C3B888FDfe9c7adBe596C15e5dDF68B4",
      "txHash": "0x04b756a68a186e8f9d95b1714700b63807cbf3a04b3d04382b9d0dd9ef3f6c24",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "MdexRestrictedStrategyPartialCloseLiquidate",
            "label": "factory",
            "type": "t_contract(IMdexFactory)11013",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyPartialCloseLiquidate.sol:41"
          },
          {
            "contract": "MdexRestrictedStrategyPartialCloseLiquidate",
            "label": "router",
            "type": "t_contract(IMdexRouter)11658",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyPartialCloseLiquidate.sol:43"
          },
          {
            "contract": "MdexRestrictedStrategyPartialCloseLiquidate",
            "label": "mdx",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyPartialCloseLiquidate.sol:45"
          },
          {
            "contract": "MdexRestrictedStrategyPartialCloseLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyPartialCloseLiquidate.sol:45"
          }
        ],
        "types": {
          "t_contract(IMdexFactory)11013": {
            "label": "contract IMdexFactory"
          },
          "t_contract(IMdexRouter)11658": {
            "label": "contract IMdexRouter"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "55f22bd0469f7a70359f827f9c6d88261d7ea1a17601dc86e9b4f6c96c962e97": {
      "address": "0x88934638eF657afFD64ba2150bB255d54f5E5b29",
      "txHash": "0x96ef00360233e0496b532f4e872148080eaa34f6264ad682c3d2b7f2c4d062e3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "MdexRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IMdexFactory)11013",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyPartialCloseMinimizeTrading.sol:49"
          },
          {
            "contract": "MdexRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "router",
            "type": "t_contract(IMdexRouter)11658",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyPartialCloseMinimizeTrading.sol:51"
          },
          {
            "contract": "MdexRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "mdx",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyPartialCloseMinimizeTrading.sol:51"
          },
          {
            "contract": "MdexRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)27311",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyPartialCloseMinimizeTrading.sol:53"
          },
          {
            "contract": "MdexRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)27319",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyPartialCloseMinimizeTrading.sol:53"
          },
          {
            "contract": "MdexRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyPartialCloseMinimizeTrading.sol:55"
          }
        ],
        "types": {
          "t_contract(IMdexFactory)11013": {
            "label": "contract IMdexFactory"
          },
          "t_contract(IMdexRouter)11658": {
            "label": "contract IMdexRouter"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWETH)27311": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)27319": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bf9631b28c2f61c32f8a9533b3ebab3d14fe93c7118b408ef6a5f3c066eeb63a": {
      "address": "0xaA8F19FAB381DF42f2767Ae7fB770434C4B710B4",
      "txHash": "0x3834017f9ce0ee5b1dbe968b2fa9c42d5259e128a218c258ef7a38542bbd7cf0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "MdexRestrictedStrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IMdexFactory)11013",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyAddTwosidesOptimal.sol:43"
          },
          {
            "contract": "MdexRestrictedStrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IMdexRouter)11658",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyAddTwosidesOptimal.sol:44"
          },
          {
            "contract": "MdexRestrictedStrategyAddTwoSidesOptimal",
            "label": "mdx",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyAddTwosidesOptimal.sol:46"
          },
          {
            "contract": "MdexRestrictedStrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)27124",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyAddTwosidesOptimal.sol:48"
          },
          {
            "contract": "MdexRestrictedStrategyAddTwoSidesOptimal",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/mdex-restricted/MdexRestrictedStrategyAddTwosidesOptimal.sol:48"
          }
        ],
        "types": {
          "t_contract(IMdexFactory)11013": {
            "label": "contract IMdexFactory"
          },
          "t_contract(IMdexRouter)11658": {
            "label": "contract IMdexRouter"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVault)27124": {
            "label": "contract IVault"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "eaf0c077376c21fb18575d13a9c40758c95f6761e4d40326f9d8102ab2dac834": {
      "address": "0xe9005E936D7D8d28B7C8151bE39195744AE515b7",
      "txHash": "0xeebcf87df9e2a25f94f9c8ae034f237e4450ae223f9f07c7af44b9276a1dad10",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "MdexWorker02",
            "label": "bscPool",
            "type": "t_contract(IBSCPool)26906",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:68"
          },
          {
            "contract": "MdexWorker02",
            "label": "factory",
            "type": "t_contract(IMdexFactory)11013",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:69"
          },
          {
            "contract": "MdexWorker02",
            "label": "router",
            "type": "t_contract(IMdexRouter)11658",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:70"
          },
          {
            "contract": "MdexWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:71"
          },
          {
            "contract": "MdexWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:72"
          },
          {
            "contract": "MdexWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:72"
          },
          {
            "contract": "MdexWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:74"
          },
          {
            "contract": "MdexWorker02",
            "label": "mdx",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:77"
          },
          {
            "contract": "MdexWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:77"
          },
          {
            "contract": "MdexWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:78"
          },
          {
            "contract": "MdexWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:79"
          },
          {
            "contract": "MdexWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:80"
          },
          {
            "contract": "MdexWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:82"
          },
          {
            "contract": "MdexWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:83"
          },
          {
            "contract": "MdexWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)27090",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:84"
          },
          {
            "contract": "MdexWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:84"
          },
          {
            "contract": "MdexWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:85"
          },
          {
            "contract": "MdexWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:87"
          },
          {
            "contract": "MdexWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:90"
          },
          {
            "contract": "MdexWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:93"
          },
          {
            "contract": "MdexWorker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:94"
          },
          {
            "contract": "MdexWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:95"
          },
          {
            "contract": "MdexWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:96"
          },
          {
            "contract": "MdexWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)27124",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:96"
          },
          {
            "contract": "MdexWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:97"
          },
          {
            "contract": "MdexWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:100"
          },
          {
            "contract": "MdexWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/mdex/MdexWorker02.sol:101"
          }
        ],
        "types": {
          "t_contract(IBSCPool)26906": {
            "label": "contract IBSCPool"
          },
          "t_contract(IMdexFactory)11013": {
            "label": "contract IMdexFactory"
          },
          "t_contract(IMdexRouter)11658": {
            "label": "contract IMdexRouter"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)27090": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)27124": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1d6e4f433394d038a2046cf55a85eca265ce81618f5cfc120513a5131a79b5fe": {
      "address": "0x33c66c601a442b2263976332397F923Cd6bF1753",
      "txHash": "0x19103c4c5d797d3de88c8cb832ffe6afbdfc197911df616a8fd5dc09e072a872",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignRewardInfo",
            "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)909_storage)dyn_storage)",
            "src": "contracts/6.12/GrazingRange.sol:56"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignInfo",
            "type": "t_array(t_struct(CampaignInfo)904_storage)dyn_storage",
            "src": "contracts/6.12/GrazingRange.sol:58"
          },
          {
            "contract": "GrazingRange",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)889_storage))",
            "src": "contracts/6.12/GrazingRange.sol:61"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardInfoLimit",
            "type": "t_uint256",
            "src": "contracts/6.12/GrazingRange.sol:65"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardHolder",
            "type": "t_address",
            "src": "contracts/6.12/GrazingRange.sol:67"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_array(t_struct(RewardInfo)909_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct GrazingRange.RewardInfo[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(RewardInfo)909_storage)dyn_storage": {
            "label": "struct GrazingRange.RewardInfo[]"
          },
          "t_struct(RewardInfo)909_storage": {
            "label": "struct GrazingRange.RewardInfo",
            "members": [
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(CampaignInfo)904_storage)dyn_storage": {
            "label": "struct GrazingRange.CampaignInfo[]"
          },
          "t_struct(CampaignInfo)904_storage": {
            "label": "struct GrazingRange.CampaignInfo",
            "members": [
              {
                "label": "stakingToken",
                "type": "t_contract(IERC20)523"
              },
              {
                "label": "rewardToken",
                "type": "t_contract(IERC20)523"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20)523": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)889_storage))": {
            "label": "mapping(uint256 => mapping(address => struct GrazingRange.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)889_storage)": {
            "label": "mapping(address => struct GrazingRange.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)889_storage": {
            "label": "struct GrazingRange.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2ac526e01e152fa37528e9e2dfb3d5a5f42c4527a58d3db3a3d53b41454f5b2e": {
      "address": "0x815C54F332Dd60eAcD839BB12fdc37105783B77F",
      "txHash": "0x91129f997561c1b43a7d565dac82d77bf88a914881b2cc0fa3f2e2edba85fae8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignRewardInfo",
            "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)909_storage)dyn_storage)",
            "src": "contracts/6.12/GrazingRange.sol:56"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignInfo",
            "type": "t_array(t_struct(CampaignInfo)904_storage)dyn_storage",
            "src": "contracts/6.12/GrazingRange.sol:58"
          },
          {
            "contract": "GrazingRange",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)889_storage))",
            "src": "contracts/6.12/GrazingRange.sol:61"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardInfoLimit",
            "type": "t_uint256",
            "src": "contracts/6.12/GrazingRange.sol:65"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardHolder",
            "type": "t_address",
            "src": "contracts/6.12/GrazingRange.sol:67"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_array(t_struct(RewardInfo)909_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct GrazingRange.RewardInfo[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(RewardInfo)909_storage)dyn_storage": {
            "label": "struct GrazingRange.RewardInfo[]"
          },
          "t_struct(RewardInfo)909_storage": {
            "label": "struct GrazingRange.RewardInfo",
            "members": [
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(CampaignInfo)904_storage)dyn_storage": {
            "label": "struct GrazingRange.CampaignInfo[]"
          },
          "t_struct(CampaignInfo)904_storage": {
            "label": "struct GrazingRange.CampaignInfo",
            "members": [
              {
                "label": "stakingToken",
                "type": "t_contract(IERC20)523"
              },
              {
                "label": "rewardToken",
                "type": "t_contract(IERC20)523"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20)523": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)889_storage))": {
            "label": "mapping(uint256 => mapping(address => struct GrazingRange.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)889_storage)": {
            "label": "mapping(address => struct GrazingRange.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)889_storage": {
            "label": "struct GrazingRange.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f3ffb3e69a32aa2af11c16a5e327dba4cdc6a6b5b07627555f6e8695a57964b4": {
      "address": "0xD885797f19214e7dec84454a03bA765C75FEDa39",
      "txHash": "0x96ab2fe73478234edcdafb660b06561c2ec3c6a3385ed44724f489b605b5b046",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)30199",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:66"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)30131",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)19671",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)30441",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:70"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:73"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:75"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:76"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:77"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:78"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:79"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:81"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)30522",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:82"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)30522",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:84"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:86"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:90"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:90"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:93"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:94"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:95"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)31437",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:97"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:100"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:101"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)30199": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)30131": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)19671": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)30441": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)30522": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)31437": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4d492e3857c3dff9efee53e6a07735bd9ca4ec38b35b9a045e713f7f9c0be914": {
      "address": "0x5f4Ea2Bf5FCE383305440c8edAdafc3Ef600E0A1",
      "txHash": "0xa358be51912f07afaecf8f3d8e2caffe0a67ac591190cfd3e4c0ff110bfe3031",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralOracle",
            "label": "usd",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralOracle.sol:34"
          },
          {
            "contract": "DeltaNeutralOracle",
            "label": "chainLinkPriceOracle",
            "type": "t_contract(IChainLinkPriceOracle)5838",
            "src": "contracts/8.10/protocol/DeltaNeutralOracle.sol:37"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(IChainLinkPriceOracle)5838": {
            "label": "contract IChainLinkPriceOracle"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "162b86efaf0e9ac64e0a5a18cf510823971b1f9d5c1993add7b5d47f5365c581": {
      "address": "0x4b837846Ad3322ecAE28b60a2C2Cf16e41B5a3aB",
      "txHash": "0x2f9c20fb701aaacd12f6dea6d7176d06e5de80d318c5923112527064a7e3f713",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "getWrappedNativeAddr",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:79"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "getWNativeRelayer",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:81"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "fairLaunchAddr",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:84"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "maxVaultPositionValue",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:86"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "rebalanceFactor",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:88"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "positionValueTolerance",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:91"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "depositFeeTreasury",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:93"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "depositFeeBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:95"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "withdrawalFeeTreasury",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:97"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "withdrawalFeeBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:99"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "managementFeeTreasury",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:101"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "managementFeePerSec",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:104"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "leverageLevel",
            "type": "t_uint8",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:108"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "alpacaToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:109"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "getSwapRouter",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:111"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:114"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:116"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "whitelistedRebalancers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:119"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "feeExemptedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:122"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "whitelistedReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:125"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "alpacaReinvestFeeTreasury",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:127"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "alpacaBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:129"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "alpacaBeneficiary",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:131"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "alpacaBeneficiaryBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:135"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ed5eeb583b8029bc81b9d640052b19494fa0a1f63e5c5b3541c3c76dc54724f4": {
      "address": "0x61D5E93BfCBf30E6E0efd7E51d6a9222d2b081c2",
      "txHash": "0x62335acb18b45d630acd533776e58a7c9acbbfb6f17236fda01de2e5297e423a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)7184",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:88"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)7113",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:90"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7816",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:90"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)7426",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:91"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)5989",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:93"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:94"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:94"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:96"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:98"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:99"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:100"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:101"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)7829",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:103"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:103"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:104"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:105"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "whitelistCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:107"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:110"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:111"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:112"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:113"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)7955",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:113"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:114"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:116"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:118"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "totalLpBalance",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:119"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)7184": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)7113": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7816": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)7426": {
            "label": "contract IPancakePair"
          },
          "t_contract(IDeltaNeutralOracle)5989": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)7829": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)7955": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "43e116599d743e1e1df49eef2337071854abbc1404b6ddfb488bef2f6cbf8fc6": {
      "address": "0xec135A336BFa6313DDcA09e0E38Ec1b9ccB757f9",
      "txHash": "0xcf707dcb3996d5c9c46d0804c822c8e92bd1e4e87c0f4dc7ac68e90da55c5ada",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)7184",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:88"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)7113",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:90"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7816",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:90"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)7426",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:91"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)5989",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:93"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:94"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:94"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:96"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:98"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:99"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:100"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:101"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)7829",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:103"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:103"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:104"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:105"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "whitelistCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:107"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:110"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:111"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:112"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:113"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)7955",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:113"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:114"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:116"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:118"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "totalLpBalance",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:119"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)7184": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)7113": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7816": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)7426": {
            "label": "contract IPancakePair"
          },
          "t_contract(IDeltaNeutralOracle)5989": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)7829": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)7955": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a3f8576dcefecde78ae26f6a32963bf600eb175137258c1d683004057686b78a": {
      "address": "0x8511e6715845603597a2f33c69dacc5C19bCfbeE",
      "txHash": "0xa26fce641ec6ce60ea10e15e97108170ea83131109213422f2c9f8de0984b4bf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableTo18ConversionFactor",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:103"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetTo18ConversionFactor",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:106"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "lpToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:107"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVault",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:109"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVault",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:110"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVaultWorker",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:112"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVaultWorker",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:113"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:114"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:116"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "alpacaToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:117"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVaultPosId",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:119"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVaultPosId",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:121"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "lastFeeCollected",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:121"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)5989",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:123"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "config",
            "type": "t_contract(IDeltaNeutralVaultConfig)6177",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:126"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "OPENING",
            "type": "t_uint8",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:128"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IDeltaNeutralOracle)5989": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_contract(IDeltaNeutralVaultConfig)6177": {
            "label": "contract IDeltaNeutralVaultConfig"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b13ca16942037cb7a59f9ade54a9ae1b190c155530ab0ed5aeb33f772797138b": {
      "address": "0x28a7178e2125D053220B47195727EFC29f1798DF",
      "txHash": "0x88ffb754b05363cde052f47e4d42d429dd5cdcb825305e25e0497d7518a918e0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralVaultGateway",
            "label": "deltaNeutralVault",
            "type": "t_contract(IDeltaNeutralVault)6029",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultGateway.sol:56"
          }
        ],
        "types": {
          "t_contract(IDeltaNeutralVault)6029": {
            "label": "contract IDeltaNeutralVault"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b0fe361033f2db559c6a019c9f45e43d5e6cfbd6dba7023177598a6c08d89108": {
      "address": "0x7A81cda008E27889A52E5Ea4823a0b22388b5ca6",
      "txHash": "0xe80b9097fbada2b7825a6f24bb292b4e85677d39e3b76abaa5aa8655b5638908",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableTo18ConversionFactor",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:103"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetTo18ConversionFactor",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:106"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "lpToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:107"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVault",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:109"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVault",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:110"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVaultWorker",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:112"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVaultWorker",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:113"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:114"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:116"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "alpacaToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:117"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVaultPosId",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:119"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVaultPosId",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:121"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "lastFeeCollected",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:121"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)5989",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:123"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "config",
            "type": "t_contract(IDeltaNeutralVaultConfig)6177",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:126"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "OPENING",
            "type": "t_uint8",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:128"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IDeltaNeutralOracle)5989": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_contract(IDeltaNeutralVaultConfig)6177": {
            "label": "contract IDeltaNeutralVaultConfig"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "04f5a8bd0a617e5019843ae31621b45a0c1b3fe7d7e3ff15615660c0b262a6b2": {
      "address": "0xf9E292c9608A4aba9A141e55a184D6d68d3EEB70",
      "txHash": "0x0ceac219176b9920dc933c383555e407f6beb6ced2c238644dbdc7ada01fc13c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)7305",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:88"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)7234",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:90"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7937",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:90"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)7547",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:91"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)6090",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:93"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:94"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:94"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:96"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:98"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:99"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:100"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:101"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)7950",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:103"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:103"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:104"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:105"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "whitelistCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:107"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:110"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:111"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:112"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:113"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)8076",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:113"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:114"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:116"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:118"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "totalLpBalance",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:119"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)7305": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)7234": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7937": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)7547": {
            "label": "contract IPancakePair"
          },
          "t_contract(IDeltaNeutralOracle)6090": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)7950": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)8076": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1226efd20a3b69d2020305619b9febf514d17b246188b6a3b1bedb2d5ed3ecc9": {
      "address": "0xD3Bb23a761db394AA8692562502Ae21B854BE6c8",
      "txHash": "0x2fdae753bc2b995f4bda6ae88b54f9c184792c95e2f6a0e0bd3d14f8e2570a07",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ProxyToken",
            "label": "timelock",
            "type": "t_address",
            "src": "contracts/8.10/token/ProxyToken.sol:30"
          },
          {
            "contract": "ProxyToken",
            "label": "okHolders",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/token/ProxyToken.sol:32"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b2edf970eee0f65c2b3044cc25501f9a46fc76ad8bc90ab092c033ab8bba6e19": {
      "address": "0x7e6F681DF3210fbA706fc2F8c59cAdbEDE7227f7",
      "txHash": "0xe2c9663967cc6ff5657b2208d54a274d07e92bcfb0b0b6df5cfe7e0e26869073",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "EmissionForwarder",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/8.10/token/EmissionForwarder.sol:42"
          },
          {
            "contract": "EmissionForwarder",
            "label": "fairLaunch",
            "type": "t_contract(IFairLaunch)12562",
            "src": "contracts/8.10/token/EmissionForwarder.sol:43"
          },
          {
            "contract": "EmissionForwarder",
            "label": "router",
            "type": "t_contract(IAnyswapV4Router)12398",
            "src": "contracts/8.10/token/EmissionForwarder.sol:44"
          },
          {
            "contract": "EmissionForwarder",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/8.10/token/EmissionForwarder.sol:44"
          },
          {
            "contract": "EmissionForwarder",
            "label": "maxCrossChainAmount",
            "type": "t_uint256",
            "src": "contracts/8.10/token/EmissionForwarder.sol:47"
          },
          {
            "contract": "EmissionForwarder",
            "label": "destination",
            "type": "t_address",
            "src": "contracts/8.10/token/EmissionForwarder.sol:49"
          },
          {
            "contract": "EmissionForwarder",
            "label": "destChainId",
            "type": "t_uint64",
            "src": "contracts/8.10/token/EmissionForwarder.sol:50"
          },
          {
            "contract": "EmissionForwarder",
            "label": "token",
            "type": "t_address",
            "src": "contracts/8.10/token/EmissionForwarder.sol:55"
          },
          {
            "contract": "EmissionForwarder",
            "label": "anyToken",
            "type": "t_address",
            "src": "contracts/8.10/token/EmissionForwarder.sol:57"
          },
          {
            "contract": "EmissionForwarder",
            "label": "proxyToken",
            "type": "t_address",
            "src": "contracts/8.10/token/EmissionForwarder.sol:58"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_contract(IFairLaunch)12562": {
            "label": "contract IFairLaunch"
          },
          "t_contract(IAnyswapV4Router)12398": {
            "label": "contract IAnyswapV4Router"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5c8a57d4a8b7a871edd837a628efdbe33e7887080c3ca35385ffed51b859029e": {
      "address": "0xC52dF6dDeDA590Cc59f98a0aE8EDD8c8D46D8097",
      "txHash": "0xec3ea3c9bb840240f2ff9c89fdf8cedb50091fb1de5e09fe52222cf79a090c82",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)32869",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:66"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)32801",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)21574",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)33176",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:70"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:73"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:75"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:76"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:77"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:78"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:79"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:81"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)33257",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:82"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)33257",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:84"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:86"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:90"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:90"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:93"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:94"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:95"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)34227",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:97"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:100"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:101"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)32869": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)32801": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)21574": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)33176": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)33257": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)34227": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "64cbc8f76d84ccbe4b8e684f33d545282bece443f1466820bb6f7bb63986176f": {
      "address": "0x30275F8980aDE89FebfD93023A4Af67da0FE700F",
      "txHash": "0x1a256ea68966d7107dc8ddf858feb54eda97a701dba92c9f582c380e9f0eb2ba",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "getWrappedNativeAddr",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:80"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "getWNativeRelayer",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:82"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "fairLaunchAddr",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:85"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "maxVaultPositionValue",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:87"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "rebalanceFactor",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:89"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "positionValueTolerance",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:91"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "debtRatioTolerance",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:94"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "depositFeeTreasury",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:96"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "depositFeeBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:98"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "withdrawalFeeTreasury",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:100"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "withdrawalFeeBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:102"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "managementFeeTreasury",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:104"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "managementFeePerSec",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:107"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "leverageLevel",
            "type": "t_uint8",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:111"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "alpacaToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:112"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "getSwapRouter",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:114"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:117"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:119"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "whitelistedRebalancers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:122"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "feeExemptedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:125"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "whitelistedReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:128"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "alpacaReinvestFeeTreasury",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:130"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "alpacaBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:132"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "alpacaBeneficiary",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:134"
          },
          {
            "contract": "DeltaNeutralVaultConfig",
            "label": "alpacaBeneficiaryBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultConfig.sol:138"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b1243cc33d3656460067a9d2fed7ecf1cd1f9deb9d6438ecb7722878768b478f": {
      "address": "0x6A31f36eE3A24c25C2F2Bff2271d9A42715094a7",
      "txHash": "0xb87a245560e2c8a4f87d0cc946c7301d4824119ce9d27e80a1a93c4adedbeb1a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableTo18ConversionFactor",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:103"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetTo18ConversionFactor",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:106"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "lpToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:107"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVault",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:109"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVault",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:110"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVaultWorker",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:112"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVaultWorker",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:113"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:114"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:116"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "alpacaToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:117"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVaultPosId",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:119"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVaultPosId",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:121"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "lastFeeCollected",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:121"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)6071",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:123"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "config",
            "type": "t_contract(IDeltaNeutralVaultConfig)6264",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:126"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "OPENING",
            "type": "t_uint8",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:128"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IDeltaNeutralOracle)6071": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_contract(IDeltaNeutralVaultConfig)6264": {
            "label": "contract IDeltaNeutralVaultConfig"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "727e2a5d345244817b183feda1b10d40e13c101145349fd375634aedf47b8eea": {
      "address": "0xDD0106C3f2d74ECbFD86F39f5639cA5A7efAF1c7",
      "txHash": "0x45bc9c56eebdf9896e73e564aded9182429b86fd262ad9e00c44380126c44d19",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralVaultGateway",
            "label": "deltaNeutralVault",
            "type": "t_contract(IDeltaNeutralVault)6111",
            "src": "contracts/8.10/protocol/DeltaNeutralVaultGateway.sol:56"
          }
        ],
        "types": {
          "t_contract(IDeltaNeutralVault)6111": {
            "label": "contract IDeltaNeutralVault"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e575c5e435c93e6c16e8f21abb952bfecacd4a79c39441359a82ca2cf907d90b": {
      "address": "0xd22D9012B1C06Ae593D8f33B706beCEa58eCBF99",
      "txHash": "0xf6a7e00239f3d46c5915c67f8afa57f3327349aa45fc30cbc7a05c93e717e480",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableTo18ConversionFactor",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:105"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetTo18ConversionFactor",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:108"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "lpToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:109"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVault",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:111"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVault",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:112"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVaultWorker",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:114"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVaultWorker",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:115"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:116"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:118"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "alpacaToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:119"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVaultPosId",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:121"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVaultPosId",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:123"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "lastFeeCollected",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:123"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)6090",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:125"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "config",
            "type": "t_contract(IDeltaNeutralVaultConfig)6283",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:128"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "OPENING",
            "type": "t_uint8",
            "src": "contracts/8.10/protocol/DeltaNeutralVault.sol:130"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IDeltaNeutralOracle)6090": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_contract(IDeltaNeutralVaultConfig)6283": {
            "label": "contract IDeltaNeutralVaultConfig"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "a1b51a6502c4d9d7e459807379167ee3939835114f6b648c122b6985477609ed": {
      "address": "0x4D5fC3F859acf7525D7bc0Faf540b827d0b8FE27",
      "txHash": "0x0412ddc8dba55b515e3f54d578904a4d0e7b6dadde572656ddb993a0e3bec81e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)11964",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:88"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)11893",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:90"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)12665",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:90"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)12275",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:91"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)10656",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:93"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:94"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:94"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:96"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:98"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:99"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:100"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:101"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12790",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:103"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:103"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:104"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:105"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "whitelistCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:107"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:110"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:111"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:112"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:113"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)13840",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:113"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:114"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:116"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:118"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02",
            "label": "totalLpBalance",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02.sol:119"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)11964": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)11893": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)12665": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)12275": {
            "label": "contract IPancakePair"
          },
          "t_contract(IDeltaNeutralOracle)10656": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12790": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)13840": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b92922479129c49a45d9394436cd2a77f423385f9f40ecd4aaccba3a8d6f3f72": {
      "address": "0x14b3Cae61465656329A1240B67146249FA1FEe97",
      "txHash": "0x84434790ac74b34a8d7b88c660f0eed59158abddb66cd8f4641b8ceab898032a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "RevenueTreasury",
            "label": "token",
            "type": "t_address",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:42"
          },
          {
            "contract": "RevenueTreasury",
            "label": "grasshouseToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:45"
          },
          {
            "contract": "RevenueTreasury",
            "label": "router",
            "type": "t_contract(ISwapRouter)9765",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:48"
          },
          {
            "contract": "RevenueTreasury",
            "label": "grassHouse",
            "type": "t_contract(IGrassHouse)7570",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:51"
          },
          {
            "contract": "RevenueTreasury",
            "label": "vault",
            "type": "t_contract(IVault)10218",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:54"
          },
          {
            "contract": "RevenueTreasury",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:57"
          },
          {
            "contract": "RevenueTreasury",
            "label": "vaultSwapPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:60"
          },
          {
            "contract": "RevenueTreasury",
            "label": "remaining",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:63"
          },
          {
            "contract": "RevenueTreasury",
            "label": "splitBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:67"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(ISwapRouter)9765": {
            "label": "contract ISwapRouter"
          },
          "t_contract(IGrassHouse)7570": {
            "label": "contract IGrassHouse"
          },
          "t_contract(IVault)10218": {
            "label": "contract IVault"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "aefbf11f45e4887e11cbe41e3e829cd92134ca03eb708dfa0448babcd73fcc33": {
      "address": "0x89110091631F49FdCB7141F791640096B98763cd",
      "txHash": "0xcd37930a410e0788cb5e4a4ad18c6a57f184efb140ac577a4065e02dfc70a39e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "RevenueTreasury",
            "label": "token",
            "type": "t_address",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:42"
          },
          {
            "contract": "RevenueTreasury",
            "label": "grasshouseToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:45"
          },
          {
            "contract": "RevenueTreasury",
            "label": "router",
            "type": "t_contract(ISwapRouter)9811",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:48"
          },
          {
            "contract": "RevenueTreasury",
            "label": "grassHouse",
            "type": "t_contract(IGrassHouse)7616",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:51"
          },
          {
            "contract": "RevenueTreasury",
            "label": "vault",
            "type": "t_contract(IVault)10264",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:54"
          },
          {
            "contract": "RevenueTreasury",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:57"
          },
          {
            "contract": "RevenueTreasury",
            "label": "vaultSwapPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:60"
          },
          {
            "contract": "RevenueTreasury",
            "label": "remaining",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:63"
          },
          {
            "contract": "RevenueTreasury",
            "label": "splitBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/RevenueTreasury.sol:67"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(ISwapRouter)9811": {
            "label": "contract ISwapRouter"
          },
          "t_contract(IGrassHouse)7616": {
            "label": "contract IGrassHouse"
          },
          "t_contract(IVault)10264": {
            "label": "contract IVault"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "97b9b930d5ba449e1486815091e31eb99787b692a899389e9f0d5263c82c05a2": {
      "address": "0xf097FC9aF4072F5709B95E168346499B363180d6",
      "txHash": "0xfda98be983dc4868092c68e2a031488d5daaf5b32a5f1dca1a500d9eaecbc3b4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:65"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:75"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)34140",
            "src": "contracts/6/protocol/Vault.sol:80"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5781_storage)",
            "src": "contracts/6/protocol/Vault.sol:81"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:86"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)34140": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5781_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5781_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4698181d72e82314231c4aea4fe73748d5dc8f41f4112a31b71900ee38b64e61": {
      "address": "0x20064f5cA352D95Dda597AcB5ECd10A86850cAf9",
      "txHash": "0xaf049dae3d0f80127bc0292f5375683d1b5648c2e2d6e2fb18717424f32a46ad",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wexMaster",
            "type": "t_contract(IWexMaster)34247",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:67"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)28166",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:68"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)28804",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:68"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)32942",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:70"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:71"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:71"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:73"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wex",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:76"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:76"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:77"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:79"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:80"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:82"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)33023",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:83"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)33023",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:84"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:84"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:85"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:87"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:89"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:89"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:92"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:93"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:94"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:95"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)33993",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:95"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:96"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:99"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:100"
          }
        ],
        "types": {
          "t_contract(IWexMaster)34247": {
            "label": "contract IWexMaster"
          },
          "t_contract(IWaultSwapFactory)28166": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)28804": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IPancakePair)32942": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)33023": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)33993": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "925df57f35cbae28fe696f46a6add046eb0b4efa5d7787427df0cf47b5296810": {
      "address": "0x5fd571BEA8d104a28BFE44874f2Aaf69F8e67C26",
      "txHash": "0xddd40719663a165c9ae0ac83c3411f2d7c73a40bf3d2d21adb1dfc0f9fcae9f1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "VaultAip42",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/VaultAip42.sol:62"
          },
          {
            "contract": "VaultAip42",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/VaultAip42.sol:64"
          },
          {
            "contract": "VaultAip42",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/VaultAip42.sol:65"
          },
          {
            "contract": "VaultAip42",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/VaultAip42.sol:73"
          },
          {
            "contract": "VaultAip42",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/VaultAip42.sol:75"
          },
          {
            "contract": "VaultAip42",
            "label": "config",
            "type": "t_contract(IVaultConfig)34140",
            "src": "contracts/6/protocol/VaultAip42.sol:80"
          },
          {
            "contract": "VaultAip42",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)9192_storage)",
            "src": "contracts/6/protocol/VaultAip42.sol:81"
          },
          {
            "contract": "VaultAip42",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/VaultAip42.sol:84"
          },
          {
            "contract": "VaultAip42",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/VaultAip42.sol:85"
          },
          {
            "contract": "VaultAip42",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/VaultAip42.sol:86"
          },
          {
            "contract": "VaultAip42",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/VaultAip42.sol:87"
          },
          {
            "contract": "VaultAip42",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/VaultAip42.sol:89"
          },
          {
            "contract": "VaultAip42",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/VaultAip42.sol:89"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)34140": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)9192_storage)": {
            "label": "mapping(uint256 => struct VaultAip42.Position)"
          },
          "t_struct(Position)9192_storage": {
            "label": "struct VaultAip42.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9f1e26c2f94537c09027421645100964d39a34334ea2ed5a76f2a86e1e13fb31": {
      "address": "0x45ce9276e6b62eBb91a6a866E49cEaCec5455451",
      "txHash": "0x52304396b2aab7889759dad09945add5aeb9ff11dd46841ad2d1da32277f69de",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "StrategyOracleMinimize",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleMinimize.sol:48"
          },
          {
            "contract": "StrategyOracleMinimize",
            "label": "defaultDiscountFactor",
            "type": "t_uint256",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleMinimize.sol:48"
          },
          {
            "contract": "StrategyOracleMinimize",
            "label": "discountFactors",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleMinimize.sol:48"
          },
          {
            "contract": "StrategyOracleMinimize",
            "label": "liquiditySource",
            "type": "t_address",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleMinimize.sol:53"
          },
          {
            "contract": "StrategyOracleMinimize",
            "label": "priceOracle",
            "type": "t_contract(IPriceOracle)4294",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleMinimize.sol:54"
          },
          {
            "contract": "StrategyOracleMinimize",
            "label": "factory",
            "type": "t_contract(ISwapFactoryLike)4549",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleMinimize.sol:56"
          },
          {
            "contract": "StrategyOracleMinimize",
            "label": "router",
            "type": "t_contract(ISwapRouter02Like)5187",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleMinimize.sol:57"
          },
          {
            "contract": "StrategyOracleMinimize",
            "label": "wrappedNative",
            "type": "t_contract(IWETH)5207",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleMinimize.sol:59"
          },
          {
            "contract": "StrategyOracleMinimize",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)5215",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleMinimize.sol:59"
          },
          {
            "contract": "StrategyOracleMinimize",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleMinimize.sol:62"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_contract(IPriceOracle)4294": {
            "label": "contract IPriceOracle"
          },
          "t_contract(ISwapFactoryLike)4549": {
            "label": "contract ISwapFactoryLike"
          },
          "t_contract(ISwapRouter02Like)5187": {
            "label": "contract ISwapRouter02Like"
          },
          "t_contract(IWETH)5207": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)5215": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ccfa86ab47813a5519d1776bfdd6f39ee5276cbd05a79c54ea7b720a6e117e36": {
      "address": "0x799Cb521dFC34c8277d31f3Ee0D1FA6A07f2a55e",
      "txHash": "0x4c613390f5eb6d3d7609fda3e28e75dea9a0e9f34eeb36ef5a2c31844c5db742",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "StrategyOracleLiquidate",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleLiquidate.sol:48"
          },
          {
            "contract": "StrategyOracleLiquidate",
            "label": "defaultDiscountFactor",
            "type": "t_uint256",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleLiquidate.sol:48"
          },
          {
            "contract": "StrategyOracleLiquidate",
            "label": "discountFactors",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleLiquidate.sol:48"
          },
          {
            "contract": "StrategyOracleLiquidate",
            "label": "liquiditySource",
            "type": "t_address",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleLiquidate.sol:53"
          },
          {
            "contract": "StrategyOracleLiquidate",
            "label": "priceOracle",
            "type": "t_contract(IPriceOracle)4294",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleLiquidate.sol:54"
          },
          {
            "contract": "StrategyOracleLiquidate",
            "label": "factory",
            "type": "t_contract(ISwapFactoryLike)4549",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleLiquidate.sol:56"
          },
          {
            "contract": "StrategyOracleLiquidate",
            "label": "router",
            "type": "t_contract(ISwapRouter02Like)5187",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleLiquidate.sol:56"
          },
          {
            "contract": "StrategyOracleLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.11/protocol/strategies/waultswap/StrategyOracleLiquidate.sol:59"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_contract(IPriceOracle)4294": {
            "label": "contract IPriceOracle"
          },
          "t_contract(ISwapFactoryLike)4549": {
            "label": "contract ISwapFactoryLike"
          },
          "t_contract(ISwapRouter02Like)5187": {
            "label": "contract ISwapRouter02Like"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a7b489ea5f3fecfb17f4f4701480c7a74978fc951de96169a91d5ed6bd63d220": {
      "address": "0xe87822C211Eaaae2D294c592EC9Dd44eAFF7372c",
      "txHash": "0xf89a3a861b2f175433ddfaaa0c73c0b1b6669c64ea53f2eb6e7916b62f6fff18",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)32869",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)32801",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)21574",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)33176",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:69"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:72"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:73"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:75"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "beneficialVault",
            "type": "t_contract(IVault)34227",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:77"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:78"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "addStrat",
            "type": "t_contract(IStrategy)33257",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)33257",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:82"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:82"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:85"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:85"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:86"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:89"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:89"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:93"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:93"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:96"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:97"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:99"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:101"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "cakePool",
            "type": "t_contract(ICakePool)32621",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:102"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)32869": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)32801": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)21574": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)33176": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)34227": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)33257": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(ICakePool)32621": {
            "label": "contract ICakePool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6730943dbef311f67bad9049691985bcd58ad021c60e267ad8c1af30c9eea76b": {
      "address": "0xbc13DF0cAE75114a44c3d7ACd6aDFAa229444d06",
      "txHash": "0x30eb08766e85fb3c8847dccdeda69e599445f6d3c10de6794e09fbf3176d4f6a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)32869",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)32801",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:70"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)21574",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:70"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)33176",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:72"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:73"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:73"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:75"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:77"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:78"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:79"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:80"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:81"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "addStrat",
            "type": "t_contract(IStrategy)33257",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:84"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)33257",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:85"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:85"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:86"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:88"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:92"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:92"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:95"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:97"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:98"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "beneficialVault",
            "type": "t_contract(IVault)34227",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:98"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:99"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:102"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:102"
          },
          {
            "contract": "PancakeswapV2Worker02Migrate",
            "label": "masterChefV2",
            "type": "t_contract(IPancakeMasterChefV2)32934",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02Migrate.sol:105"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)32869": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)32801": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)21574": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)33176": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)33257": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)34227": {
            "label": "contract IVault"
          },
          "t_contract(IPancakeMasterChefV2)32934": {
            "label": "contract IPancakeMasterChefV2"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "91d2d16cb214a8f493c6b783825a3c34296d531be864d790b1851362413cf4fb": {
      "address": "0x0c99DAA3516C1F4405F1618A69182d806F68Ba43",
      "txHash": "0x45854b364af6af7aeb7b28372962af967cc274ad1650fc307ec50860cf71270c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)11668",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:91"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)11597",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:93"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)12369",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:93"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)11979",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:94"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)10360",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:96"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:97"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:97"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:99"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:101"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:102"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:103"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:104"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12494",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:106"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:106"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:107"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:108"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "whitelistCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:110"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:113"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:114"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:115"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:116"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "beneficialVault",
            "type": "t_contract(IVault)13527",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:116"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:117"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:119"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:121"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "totalLpBalance",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:121"
          },
          {
            "contract": "DeltaNeutralPancakeWorker02Migrate",
            "label": "masterChefV2",
            "type": "t_contract(IPancakeMasterChefV2)11737",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeWorker02Migrate.sol:124"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)11668": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)11597": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)12369": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)11979": {
            "label": "contract IPancakePair"
          },
          "t_contract(IDeltaNeutralOracle)10360": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12494": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)13527": {
            "label": "contract IVault"
          },
          "t_contract(IPancakeMasterChefV2)11737": {
            "label": "contract IPancakeMasterChefV2"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "028b2a6f170567ec7321fcb2a5454fdda30d76edf98badaf4fab51fabf2a6dad": {
      "address": "0x123F8a227dFF608244838cc7886612F84B4B063E",
      "txHash": "0xf5dfe858fed6c1c3a6fd3714037e2ad9e621b747ff83dce34a2fcbcc3bb0e6d1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)32869",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:64"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)32801",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:66"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)21574",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:66"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)33176",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:69"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:69"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:71"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:72"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "beneficialVault",
            "type": "t_contract(IVault)34227",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:77"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:79"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "addStrat",
            "type": "t_contract(IStrategy)33257",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)33257",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:82"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:85"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:88"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:88"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:92"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:92"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:95"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:96"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:98"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:98"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "cakePool",
            "type": "t_contract(ICakePool)32621",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:100"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "accumulatedBounty",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:102"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "lastCakePoolActionTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:105"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)32869": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)32801": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)21574": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)33176": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)34227": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)33257": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(ICakePool)32621": {
            "label": "contract ICakePool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7a5ccc74e6de6a2ba044f2c7fd6676b7383c2e592990f5eafaaf1e581b92b3ae": {
      "address": "0xDf10a6Ead89D6719E82e8ECBCb62f03E17eA9e39",
      "txHash": "0xe9e4644b86b846edc011e6982152977688f1b0ce8408eed7d1c53e63c6b0db1b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)32869",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:67"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)32801",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:69"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)21574",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:69"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)33176",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:72"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:72"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:74"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:76"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:77"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:78"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:79"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:80"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:82"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)33257",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)33257",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:84"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:84"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:85"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:87"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:91"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:91"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:94"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:95"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:97"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)34227",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:97"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:98"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:101"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:101"
          },
          {
            "contract": "PancakeswapV2MCV2Worker02",
            "label": "masterChefV2",
            "type": "t_contract(IPancakeMasterChefV2)32934",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2MCV2Worker02.sol:104"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)32869": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)32801": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)21574": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)33176": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)33257": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)34227": {
            "label": "contract IVault"
          },
          "t_contract(IPancakeMasterChefV2)32934": {
            "label": "contract IPancakeMasterChefV2"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "82c558e7b63d2717ffd2b4e4e5aaf82a8ea7899aa6a3f5bfbeeaab6ff0c4bf8d": {
      "address": "0xc6Ad47130B748f9Bb45FA5d54c75DBaAF3F5e91D",
      "txHash": "0x7c3f7c5ffb4f661447c18a6cd7fd151ce87fb1cf681a889d8bdb422a905a7370",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)11668",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:90"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)11597",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:92"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)12369",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:92"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)11979",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:93"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)10360",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:95"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:96"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:96"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:98"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:100"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:101"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:102"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:103"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12494",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:105"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:105"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:106"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:107"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "whitelistCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:109"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:112"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:113"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:114"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:115"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)13527",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:115"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:116"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:118"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:120"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "totalLpBalance",
            "type": "t_uint256",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:120"
          },
          {
            "contract": "DeltaNeutralPancakeMCV2Worker02",
            "label": "masterChefV2",
            "type": "t_contract(IPancakeMasterChefV2)11737",
            "src": "contracts/8.10/protocol/workers/DeltaNeutralPancakeMCV2Worker02.sol:123"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)11668": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)11597": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)12369": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)11979": {
            "label": "contract IPancakePair"
          },
          "t_contract(IDeltaNeutralOracle)10360": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12494": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)13527": {
            "label": "contract IVault"
          },
          "t_contract(IPancakeMasterChefV2)11737": {
            "label": "contract IPancakeMasterChefV2"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3158a98abf764bf6943c5f9f9b1a1e6166f253ab075b1bd88ea4015707a66ee9": {
      "address": "0x83365FB7264aA2C45CEf33887E956BEb1C740204",
      "txHash": "0x407cab7e615027aa89655ddfdbb4222234a3f97b9613c4ebb39f6cd35df47dc7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)32884",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)32816",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)21574",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)33191",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:69"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:72"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:73"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:75"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "beneficialVault",
            "type": "t_contract(IVault)34242",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:77"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:78"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "addStrat",
            "type": "t_contract(IStrategy)33272",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)33272",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:82"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:82"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:85"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:85"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:86"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:89"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:89"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:93"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:93"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:96"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:97"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:99"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:101"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "cakePool",
            "type": "t_contract(ICakePool)32636",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:102"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)32884": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)32816": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)21574": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)33191": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)34242": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)33272": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(ICakePool)32636": {
            "label": "contract ICakePool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cf27bf09e6fa32f2628cbcab02493a8d213d9ca74eaa35c9eb4e486e170133d7": {
      "address": "0xC3d3Dd195554dBdeA6f4C545474451fa1C8DD43d",
      "txHash": "0x35eaa62bd63a902fa1e4a33fec77f6e2669d8a77357bc5ee7df0d8b09a12baff",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)32884",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:66"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)32816",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)21574",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)33191",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:71"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:71"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:73"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "beneficialVault",
            "type": "t_contract(IVault)34242",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:78"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:79"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "addStrat",
            "type": "t_contract(IStrategy)33272",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:82"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)33272",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:86"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:86"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:90"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:90"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:94"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:94"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:97"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:98"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:100"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:100"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "cakePool",
            "type": "t_contract(ICakePool)32636",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:102"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "accumulatedBounty",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:104"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "lastCakePoolActionTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:107"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)32884": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)32816": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)21574": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)33191": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)34242": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)33272": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(ICakePool)32636": {
            "label": "contract ICakePool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f2f84a4bbfa397c4177949b9bac3ba03e869f1c1f534d60fb1faadad09e22a82": {
      "address": "0x99A7fCc5ff4292A84f7413bE6a882B8df0ED9fCD",
      "txHash": "0x7a70169b81238bf3d048718bde5223a7bd71d3f888b84a5870163871078eedcc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)32884",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)32816",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)21574",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)33191",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:69"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:72"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:73"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:75"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "beneficialVault",
            "type": "t_contract(IVault)34242",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:75"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:77"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:78"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "addStrat",
            "type": "t_contract(IStrategy)33272",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)33272",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:82"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:82"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:85"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:85"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:86"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:89"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:89"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:93"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:93"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:96"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:97"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:99"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:99"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "cakePool",
            "type": "t_contract(ICakePool)32636",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:101"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "accumulatedBounty",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:103"
          },
          {
            "contract": "CakeMaxiWorker02Migrate",
            "label": "lastCakePoolActionTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02Migrate.sol:106"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)32884": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)32816": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)21574": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)33191": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)34242": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)33272": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(ICakePool)32636": {
            "label": "contract ICakePool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6a88e310d8a487999d389ba6a5c020170911f825325e9aac744b5e0f84f25c65": {
      "address": "0x5d01ce11E22baA27fA3fBC1065838F4024bD108B",
      "txHash": "0x1daad51ea7bacf816b64f9c19349a7b8962ef0e5bbda3dcd572ab666807a7ce3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)32884",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:64"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)32816",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:66"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)21574",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:66"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)33191",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:69"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:69"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:71"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:72"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "beneficialVault",
            "type": "t_contract(IVault)34242",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:77"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:79"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "addStrat",
            "type": "t_contract(IStrategy)33272",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)33272",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:82"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:85"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:88"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:88"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:92"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:92"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:95"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:96"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:98"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:98"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "cakePool",
            "type": "t_contract(ICakePool)32636",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:100"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "accumulatedBounty",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:102"
          },
          {
            "contract": "CakeMaxiWorker02MCV2",
            "label": "lastCakePoolActionTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02MCV2.sol:105"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)32884": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)32816": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)21574": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)33191": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)34242": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)33272": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(ICakePool)32636": {
            "label": "contract ICakePool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "674a793a9b644d8d5ebf71deba37797e45764b28361a46e8415b6a67403a8749": {
      "address": "0x28D1080672a619259B85A8c9E08168580eD6e0eb",
      "txHash": "0x43e1bd0cc2948da086732a0c03f55cb1493a91bf3a608ed86f460cec6ff976dd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableTo18ConversionFactor",
            "type": "t_uint256",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:105"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetTo18ConversionFactor",
            "type": "t_uint256",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:108"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "lpToken",
            "type": "t_address",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:109"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVault",
            "type": "t_address",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:111"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVault",
            "type": "t_address",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:112"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVaultWorker",
            "type": "t_address",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:114"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVaultWorker",
            "type": "t_address",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:115"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableToken",
            "type": "t_address",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:116"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetToken",
            "type": "t_address",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:118"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "alpacaToken",
            "type": "t_address",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:119"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "stableVaultPosId",
            "type": "t_uint256",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:121"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "assetVaultPosId",
            "type": "t_uint256",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:123"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "lastFeeCollected",
            "type": "t_uint256",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:123"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "priceOracle",
            "type": "t_contract(IDeltaNeutralOracle)10667",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:125"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "config",
            "type": "t_contract(IDeltaNeutralVaultConfig)10860",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:128"
          },
          {
            "contract": "DeltaNeutralVault",
            "label": "OPENING",
            "type": "t_uint8",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVault.sol:130"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IDeltaNeutralOracle)10667": {
            "label": "contract IDeltaNeutralOracle"
          },
          "t_contract(IDeltaNeutralVaultConfig)10860": {
            "label": "contract IDeltaNeutralVaultConfig"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "39057675560cde1d4d4c3078e3e8ac7467241b1cdda477daa16b8617be7c532d": {
      "address": "0x8da764D803572f014E4752287b79B95d0EBC4BDD",
      "txHash": "0x02f6eb82836ff11e6af9fdf592e7d4f61f4705d43d063cc9bb451902404a3489",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DeltaNeutralVaultGateway",
            "label": "deltaNeutralVault",
            "type": "t_contract(IDeltaNeutralVault)10707",
            "src": "solidity/contracts/8.10/protocol/DeltaNeutralVaultGateway.sol:56"
          }
        ],
        "types": {
          "t_contract(IDeltaNeutralVault)10707": {
            "label": "contract IDeltaNeutralVault"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
