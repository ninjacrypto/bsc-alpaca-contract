{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x5379F32C8D5F663EACb61eeF63F722950294f452",
    "txHash": "0x6a3396f2b0e87dcd763d12883f9f5d87acea61f637ac39ac1246e713174e0e77"
  },
  "proxies": [
    {
      "address": "0xC2f8CcAf5530d9148bb07A6947b2f0F317e59e23",
      "txHash": "0x59499c61d93052aa8e80e386254da12f2ea0147698393585ed8609d85237ead1",
      "kind": "transparent"
    },
    {
      "address": "0x85fb19fC1fEd868E65BdFec58E64CcCb8546b0bf",
      "txHash": "0x430057f859f789b85a83c6f342fd24d44a89168caf53e10fc32b1cc368b95f5d",
      "kind": "transparent"
    },
    {
      "address": "0xe8323FFf67043C29A19E0A13b66F0EafedB46df4",
      "txHash": "0xc6dcc3c50585fe30998049447c85668b148953135f280241b72b9695238c9a2d",
      "kind": "transparent"
    },
    {
      "address": "0xF4B424DB20d8664cF559Fa3c095C54F4569A7f57",
      "txHash": "0xc43a4612b583bb3f908fe1049a2232e38c8345f1289a1ac522cdbf0233510e96",
      "kind": "transparent"
    },
    {
      "address": "0x50441d9c8E08E3Dcce8D517E2257a3882d43fee9",
      "txHash": "0xccaa8adfe6c2319f1df6c25fadec841a24113aa25c29a66e7f439912b5c09260",
      "kind": "transparent"
    },
    {
      "address": "0x1eaAf599b95d7cab0151B8384d15fe3F68Aa4ee3",
      "txHash": "0x93b5b34718268833e9c87556f379f512c302ee92e0cc131742f675e4f91bfb74",
      "kind": "transparent"
    },
    {
      "address": "0x9f612544075d3E088Ef004b99eC2c77Fe622DA8e",
      "txHash": "0x97db5636bbd0185c6afc0e4a05d6b24cb677d2556f180688dfb87036deaac255",
      "kind": "transparent"
    },
    {
      "address": "0xCfE0fA9Eae5a225A4C33e39d4AefE32667EFf11F",
      "txHash": "0xfe2e30131a9ec51b374f19901c2d667aeb98f24ea04270fd397b8746ca184f28",
      "kind": "transparent"
    },
    {
      "address": "0x4362635a0b2F8dF98cDE4Cdde5F5f3bE96f45316",
      "txHash": "0x40690ed03335ecb3cab65c0448cfa0dacf9f1b1b13394453f7d710033ffde701",
      "kind": "transparent"
    },
    {
      "address": "0x8dcEC5e136B6321a50F8567588c2f25738D286C2",
      "txHash": "0x18604371ec39e96a9194c257902d86df81f5489b2fa1dc54157926b785641431",
      "kind": "transparent"
    },
    {
      "address": "0xfE49AffC3fFa7bed8346F8f33f8250d3C6fDf073",
      "txHash": "0xbeb8e4c87405ee340d3092b9900383513fd405adcc2b45e593f5b4c2b8aa4e34",
      "kind": "transparent"
    },
    {
      "address": "0x3FFa4Cd446F8127db0ED316b1E952876Be2E61B0",
      "txHash": "0xdf8c80b246c10b3d9b904ceed2631f7983aa29d9c1d32c9eb595849f19b8369e",
      "kind": "transparent"
    },
    {
      "address": "0xa6b2a3Fdd415Ca304a36909a35f974B670960843",
      "txHash": "0x3a80106f10757c5f6db3e9cea4b92ddab8d5c62de04533b2df48a5f53a842610",
      "kind": "transparent"
    },
    {
      "address": "0xDD8A4302299115226676F943E01306107DD98495",
      "txHash": "0x5b60b4e5b08172e6d2044cbd6cd64f0623b6c2ed7440ee8a1a56a8da5b19ce9e",
      "kind": "transparent"
    },
    {
      "address": "0xB6960fAf74e7adA47bCBB3923d793da253Ff521f",
      "txHash": "0x5966b8b99ce82b3dd96fbc447d52444ed42eed4f8bd941239181b43d5cb1ecbc",
      "kind": "transparent"
    },
    {
      "address": "0xbD861fE2D91A2E82928FE0413fA77BfEB822F373",
      "txHash": "0x46f100f98c830fef31cfd63925cea754259b8e6e9f1f4f3e7bc9c62313a5a0d8",
      "kind": "transparent"
    },
    {
      "address": "0x1D0EDCA3F151dC9fafb5CE79547D153229985F42",
      "txHash": "0x51c856a3c3ac172ead80df82f9c1286f46b0586786baf65240d685f68cf3e7e0",
      "kind": "transparent"
    },
    {
      "address": "0x0541C542e2039D13238B5AbC6d32A23ae3222B1D",
      "txHash": "0x43f2036eaf2cafc588cf030062f7f4bfd5823d65dc7c21a60e3b062c12e56e06",
      "kind": "transparent"
    },
    {
      "address": "0x68f131fe93cFc18A6B3eC6312e18c089221a5C34",
      "txHash": "0x429aaf9273e8fc26f113031cd0bfa960a5c8985700fe7e30d020351f9e15955f",
      "kind": "transparent"
    },
    {
      "address": "0x32951e060e6AD6D512fC3Eaa958f3A8F4F82ac6C",
      "txHash": "0x5a4917b28402e353d50bb763b54613695ac45861f876734a82531103946ff762",
      "kind": "transparent"
    },
    {
      "address": "0x5C8035eB6f6E724eE6748D9844b6E9ffec0C5cB5",
      "txHash": "0xb8f0e46852af01660a3d90cd2d152458c9ed0d019943a3e453c876c1b53035f0",
      "kind": "transparent"
    }
  ],
  "impls": {
    "026142ba7a51ea17afdba8db51649e139fcb3a6937b369582ba7b8c94ee88cea": {
      "address": "0x13C052C34BeAEd5f7C4856fAA4Da0544B9Df99a7",
      "txHash": "0x0f7872d754f1cc364a2a13494398b9384e1cd2a9c0a18f5ed456b91faeecce0e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddBaseTokenOnly.sol:20"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)8678",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddBaseTokenOnly.sol:21"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)8678": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "16eb2d598a98c1b50ee4e5d1b76001180b1fbfbd5b86f451536394b46b1b2c8f": {
      "address": "0x3Af78AeB766059e2dB89654ed438a8d976CD2dc5",
      "txHash": "0x6ab0b454f8b1728b6ddcda12554110965b5a5154ba47bdeb8ff8ad8c65a37cbd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyLiquidate.sol:17"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)8678",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)8678": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d7b62848423c8c0885c38c4c3c2e724470e136b5731686ae9a38e21a2cdd088b": {
      "address": "0x588c58d88319B2EDF7426006668cDfF60940F3C7",
      "txHash": "0xdc45571ab8874834f880add7c99a814e0749f89992f624c641343ac265c9761a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SimplePriceOracle",
            "label": "feeder",
            "type": "t_address",
            "src": "contracts/6/protocol/SimplePriceOracle.sol:11"
          },
          {
            "contract": "SimplePriceOracle",
            "label": "store",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(PriceData)6151_storage))",
            "src": "contracts/6/protocol/SimplePriceOracle.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(PriceData)6151_storage))": {
            "label": "mapping(address => mapping(address => struct SimplePriceOracle.PriceData))"
          },
          "t_mapping(t_address,t_struct(PriceData)6151_storage)": {
            "label": "mapping(address => struct SimplePriceOracle.PriceData)"
          },
          "t_struct(PriceData)6151_storage": {
            "label": "struct SimplePriceOracle.PriceData",
            "members": [
              {
                "label": "price",
                "type": "t_uint192"
              },
              {
                "label": "lastUpdate",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "6c883b146c73b165c5657fe34f9eb19c86870b61d1141bb7bcfe3617158d2576": {
      "address": "0x3175EC52c36fFF63dCe00E8a50E6066D38884a11",
      "txHash": "0x9595cb82856f9d7d9a06bd439ab87d6474bff4986e081bafcd2b0fb585c6300c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)6127",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:29"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)14398_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:30"
          }
        ],
        "types": {
          "t_contract(PriceOracle)6127": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)14398_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)14398_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7f29d4fd64f3656c2c27c15f92ba44e0910ee99be21b0bcbc9fd9c46f4b6044d": {
      "address": "0xFe16999D88856a9E492cE3088Eaea8Fc9E2a05C4",
      "txHash": "0x20a3765bf6a394f4a50900d82ae9032d43b7504949b163da368831a012aab031",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:42"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:44"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:46"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)11746)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:48"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)3918",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:50"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:57"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)11746)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)11746": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)3918": {
            "label": "contract InterestModel"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f837206ea7531c10dd48f7528a75c4b7c512b3c95f812a9fff53025f969559c1": {
      "address": "0xD50aAb6B210fe049B6c5262f5A7676204699AB8E",
      "txHash": "0x9062c4528bd5c5eb05d83ec5cc5d2ee8df0b6ea919469046e3fc0c96831f3f21",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)11654",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)6721_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)11654": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)6721_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)6721_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9f94e1235301de89bd272a056e00e3924629397d386c13b662852bd1646be40f": {
      "address": "0x88d5186eb7fE8a28b358f1382A1499B2b81D8550",
      "txHash": "0x492ba508a4f6f2e21910dc81c02bc18065724edc09b4c716705d71e9b115aab2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:19"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:21"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)9376",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:22"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)9376": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9c34d77d958c30538df46e8b86963f6c7ff13c4ef76862ac965fe16b4bd26d1a": {
      "address": "0xC1203f662CecE399768ab9a92A2717d3CA93B465",
      "txHash": "0xb7f435f0f45ccc274fd2e0a92663e3f0ee9780bba1dabd01120ac19ea402b957",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyLiquidate.sol:17"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)9376",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)9376": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0e78b610f8ad84ec18fb3da2cd151377adda6c89a359e22eafdde7601f58007a": {
      "address": "0x205eC09443deBb37A526a384f68622baE69F6Fc6",
      "txHash": "0xe9b74bd4b5f651f4c49015fe177bb58291e099fbe8b87b59d7f08cb001ffebdd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "DebtToken",
            "label": "timelock",
            "type": "t_address",
            "src": "contracts/6/protocol/DebtToken.sol:11"
          },
          {
            "contract": "DebtToken",
            "label": "okHolders",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/DebtToken.sol:13"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bff9fe37dacb8f7f2affab5474fafb19e4d94d5905c97473eb713e202620b102": {
      "address": "0x7EEAA96bf1aBaA206615046c0991E678a2b12Da1",
      "txHash": "0x36b6ac0cc06f713a136dc108175829cb7e2a2b681cd985feaf0152d580f70f10",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)12483",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)7324_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)12483": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)7324_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)7324_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c961655dc0586f031055131c37a9927b1dd85aba2f3939288cee850f3c96a65d": {
      "address": "0xb63AcD06c7d6ecE492dFbA61C606855e49FB93F3",
      "txHash": "0x2c0579db550cd4d2d49a9d0c961f07a18396f2db4ce90d7dbcbb2057e3bb1c9f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)12377",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:31"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:32"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9393",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:33"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3393",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:34"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:35"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:36"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:37"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:38"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:39"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:40"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:43"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:44"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:45"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12390",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:46"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)12390",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:47"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:48"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:49"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:50"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)12377": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9393": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3393": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12390": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3e5460bb0c86748c85e7ce4682ab70f06ae2c7daf8e6e366681efe208e7f06e5": {
      "address": "0xabE59308AC72f04b1a2D04175d5247ba981075a6",
      "txHash": "0x8aec036da3c4619372d831e72d15c3a7959963a154c84daf1ebb2947c93ae7e9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9393",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)12398",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9393": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)12398": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5428f0ba3268ba1cc7c786a4099d43ddf4db7ec68afd5c8ef34e0b556f7fc208": {
      "address": "0x7e1A283C5FBE6b69C95397dEe0D02E6688afd0ff",
      "txHash": "0x9dfaee61de8a7353575e345daa60cb25a60befdd16cf9d2e7d32ad9fd512c503",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:13"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:15"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:17"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)12620)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:19"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)12633",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:21"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:23"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:25"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:28"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)12620)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)12620": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)12633": {
            "label": "contract InterestModel"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4cee1b89aed468306fe1fb6c5ec5dd3cdb4499e0627dd7ceee207cd31947e029": {
      "address": "0x02728B3d91823C86E4009D2441d46E7397F7BDd0",
      "txHash": "0x71a197e8e58e75f9f222d4e9989a72086ad0f4b13749be8eed1f2353e2b6ccf0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimalMigrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimalMigrate.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimalMigrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimalMigrate.sol:22"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f1e1a9472007289080912e6b19387577c38d6dc3e6b6d9a08887d9f76bb15bdb": {
      "address": "0x83dF8EDB615B455bFCe270ee2EE3562FD202353F",
      "txHash": "0x3421aecc48ae16df7f4188b26019907e048662618ff5ab52f4ce1acb50551d6d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddBaseTokenOnly.sol:19"
          },
          {
            "contract": "PancakeswapV2StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddBaseTokenOnly.sol:20"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "48a8b489935ac30d66c2f44ec0412b0c4d1271e453bff73b304b26fa06db8875": {
      "address": "0x4F34511e604a1795E854aEF9D872cb9c9836F1dF",
      "txHash": "0xd42bf9ad8f32e86f74242c7fe9739ad2ba19bb2ce5e75a04e7aaed8a92e47892",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyLiquidate.sol:17"
          },
          {
            "contract": "PancakeswapV2StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "21d3b67135442ee77b7443cf7b523059267978b1cd9ec2fd39e1833f9106e5d7": {
      "address": "0x811938726bC82Da82fC4aC5de28851F27Cc1dcb3",
      "txHash": "0x219070e455cf03b87fab6c4aa1e3da812efc8ee908f174d62a8306dd072ed403",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyWithdrawMinimizeTrading.sol:20"
          },
          {
            "contract": "PancakeswapV2StrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyWithdrawMinimizeTrading.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyWithdrawMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)15119",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyWithdrawMinimizeTrading.sol:22"
          },
          {
            "contract": "PancakeswapV2StrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)15127",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyWithdrawMinimizeTrading.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IWETH)15119": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)15127": {
            "label": "contract IWNativeRelayer"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "382d6f8a174c545b58f6e519a8e7c1e4a6f6e0d931145be6d87ddc3bec3a3e67": {
      "address": "0x77d23aFF927f3d46e51D449372c957B3CBBFB40e",
      "txHash": "0xc438dc7f26622afcb0dd2bbbd0bc76a8fb70720b69c02b58bcc805365a3063c0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddBaseTokenOnly.sol:19"
          },
          {
            "contract": "PancakeswapV2StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddBaseTokenOnly.sol:20"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0e096643820f2115971d4faf686bc318e95fd18548bddf834ac4336d3b25e247": {
      "address": "0xf02bE2D27461c4FB4fB7d474215E799cA07F3A97",
      "txHash": "0x32916977bc590a0de5c6dd1d1ce15ed9fa3c9d6bd1f33a1df9827b0dde0654a1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)15014",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)15014": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f10a7b89c6c4c11dbeddc841f4ab231cdf45a0d948d4aeffb9f74be70c6d3e3b": {
      "address": "0xAd4e7E32F2168073e456a9A14e11abb116e6b305",
      "txHash": "0x15c1cdb18cb7332e5699bf0808732609f99bb6a9af1b5fe60526be704517bb2c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3a301e3d17b75ae5b03f8222d86c333e3aeab0b369fba084843c1ae702232bc9": {
      "address": "0x349dBcF399e39642D43B6926C8Ac30D9CFEC5b80",
      "txHash": "0x4dc22fde26455cc5b67666dbcb2f25cc6ee2d93ad6b234bc92f3c92abb9f6f17",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bf5da656c7e7e48676402cfb9120aec68806a53a9f1bd5bddb45bdab0886809f": {
      "address": "0x9e698f779Cec7F42663B051Ff8176A55FCb8d471",
      "txHash": "0xe8d4711c35fe57701bfbdc86c8056b19e77bd198c44a8c85d830426ace53e5cf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7bd0f64c58a654d06a610f48f15adcbc0f800ac8a5fd1cc68b0bd07ab833b0e5": {
      "address": "0x7880Fd4125772d5Ef0e6F342E209c193d8c2c8A3",
      "txHash": "0xbac70b21ad65e5e846cc0b46de31215e5d7212f687cfb35d61d31a5f941a4753",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)12659",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:31"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:32"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:33"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:34"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:35"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:36"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:37"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:38"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:39"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:40"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:43"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:44"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:45"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12672",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:46"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)12672",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:47"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:48"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:49"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:50"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:53"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)12659": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12672": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8949036904553fbf6e1433c155dba40c2f57abb7463cea36466d3fa327a93d1a": {
      "address": "0x09FD9321aad19bF98C85A7DF06891b38ABcbe57B",
      "txHash": "0xa1b8cab81f2fb26ea60b31a421aa959b794c3fc5116ed11462931731233ca4d5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:13"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:15"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:17"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)15215)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:19"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)15228",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:21"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:23"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:25"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:27"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:29"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)15215)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)15215": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)15228": {
            "label": "contract InterestModel"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5c9bc885c81d307817c13349e92180112226688296e909b8f712731f5d574e2a": {
      "address": "0x036664394715D255895f600861fE882A167dbF57",
      "txHash": "0x97874e36e150be07614a93358be2752b64f45b0af15a703e7a576f56fa9d13ab",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "DebtToken",
            "label": "timelock",
            "type": "t_address",
            "src": "contracts/6/protocol/DebtToken.sol:11"
          },
          {
            "contract": "DebtToken",
            "label": "okHolders",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/DebtToken.sol:13"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d56626a41bc68f496a348f13ec34418b3a4860dfe1d75516d4326e9c96f0c01a": {
      "address": "0xcF33D2dFdA8A99ca81876E301577FF83866ce88B",
      "txHash": "0xbbdbe4e960e21f48ed8543d45273e5910234924a0518a7635d5286b580bbba66",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)15099",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)7428_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)15099": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)7428_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)7428_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9b3938766bbd9ba4345874a66b368e86b4ef784fae6a480c2fef18d9224f1636": {
      "address": "0x0EEca1690C59FB195Fd158f44C4f3230Ed28561C",
      "txHash": "0xb2bcad547c86e9d2ea0e7b4e7f78e6e53df428fbf87f8304041af2088ad2ad34",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)15014",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)15014": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c33d097ab882f73cab9db8eebf24c10e34ff31659632c0b7dcfbdbed02789308": {
      "address": "0x462c2D17fd631B6BDB172a72d6da7D7EC48f4e14",
      "txHash": "0xf5dfe36ab7f645bd8300006ada680c36b1b106b44b3dc18a65b5965b08d929e2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c1ac4680e67a393367af5b24ff033c3ef802be99720ecaead3ac9f1ff7a15e15": {
      "address": "0xBbf2a7FacDB318F7670cE87A5F6571Bb001d8F06",
      "txHash": "0x52019a5863e5a7dd96e5f4dba19a16dd06752135cce0816c91873db645d288f5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)15014",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)15014": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2698fd32ca8d71c3df4a538ab0f790788326cdb50a5c6924cd6c51ea879d05e1": {
      "address": "0xD50A06E444d2A85098B3dbc66a5D1946789Bb869",
      "txHash": "0x122370ea38d5e80b294f999c88e5f108ee2cc063e67ff4382f75be979d4abb73",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignRewardInfo",
            "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)909_storage)dyn_storage)",
            "src": "contracts/6.12/GrazingRange.sol:54"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignInfo",
            "type": "t_array(t_struct(CampaignInfo)904_storage)dyn_storage",
            "src": "contracts/6.12/GrazingRange.sol:56"
          },
          {
            "contract": "GrazingRange",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)889_storage))",
            "src": "contracts/6.12/GrazingRange.sol:59"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardInfoLimit",
            "type": "t_uint256",
            "src": "contracts/6.12/GrazingRange.sol:63"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardHolder",
            "type": "t_address",
            "src": "contracts/6.12/GrazingRange.sol:65"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_array(t_struct(RewardInfo)909_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct GrazingRange.RewardInfo[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(RewardInfo)909_storage)dyn_storage": {
            "label": "struct GrazingRange.RewardInfo[]"
          },
          "t_struct(RewardInfo)909_storage": {
            "label": "struct GrazingRange.RewardInfo",
            "members": [
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(CampaignInfo)904_storage)dyn_storage": {
            "label": "struct GrazingRange.CampaignInfo[]"
          },
          "t_struct(CampaignInfo)904_storage": {
            "label": "struct GrazingRange.CampaignInfo",
            "members": [
              {
                "label": "stakingToken",
                "type": "t_contract(IERC20)523"
              },
              {
                "label": "rewardToken",
                "type": "t_contract(IERC20)523"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20)523": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)889_storage))": {
            "label": "mapping(uint256 => mapping(address => struct GrazingRange.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)889_storage)": {
            "label": "mapping(address => struct GrazingRange.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)889_storage": {
            "label": "struct GrazingRange.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b854e9e07531db861363894aaf3d8a7523747ac1870ff6c83372e45178e485bd": {
      "address": "0xB7dA04CB7dae797397e290C79079f959e4877009",
      "txHash": "0x58d85784e5b65c90b184415e98719b89d7a86fb271f1daf7043756ee471d90d7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddBaseTokenOnly.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddBaseTokenOnly.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddBaseTokenOnly.sol:24"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6ab477c6e5921e4c3db10f9b7dd6c804c2c5a07996b01db4f403dac15be4fc69": {
      "address": "0x93E8027515a51c68fed014E3Ae76d6c490358796",
      "txHash": "0xe02d363a9228851f66820602e07a553bfc5592d29620ecb5d11ff54c94351b0d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:18"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:19"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:21"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7ee01e9ac28ae0ce3b3e5ad38c2a901d68144f96a77e46f528ca7c949de5b650": {
      "address": "0x32b02e91dD0D7496FF34EBD9dEB12973eE86e946",
      "txHash": "0x2092bfdd65c2c604db705313f373b5757b9dc3b13ca5b9f398ade9740867f7bf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:21"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)12806",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)12814",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:24"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:26"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IWETH)12806": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)12814": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "549f7fbbdce84772b6b3efd3f60297e1181b8a3bfe2feb3c1280f9e3c128c94a": {
      "address": "0x4a967509e424969Bc766D5B0dA74e59e18392CDA",
      "txHash": "0x0d6064c30e0029e8954491a5c8ab3c9c810aa08a6112060e0a772d774d7949e3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)12701",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:24"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:26"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)12701": {
            "label": "contract IVault"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c362a0ff214b93bfb274b9e752721dd977d60fb6d07d995b38ec1679247c76f1": {
      "address": "0xcac73A0f24968e201c2cc326edbC92A87666b430",
      "txHash": "0xa03b0412d85206d09a6a5bef2011a1ad68178ffcc46cc5ad86c5258a6c5c8010",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)16756",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7906",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:52"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:54"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:55"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:56"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:57"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:58"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:60"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:61"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:62"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:62"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:65"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:69"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker.sol:70"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)16756": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7906": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16784": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e16b45f17caded9d02b697c1d54c25feebcfe0d98eb76ebc71dae461af138c5e": {
      "address": "0x744BB95C6f31A0B6f7E7B53c46342b42Aafc21D3",
      "txHash": "0xe906d13a2bbebd8fe5e107e86fc04cca9b88623736f05e03b2720c0c1427a43c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddBaseTokenOnly.sol:21"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddBaseTokenOnly.sol:22"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddBaseTokenOnly.sol:23"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "38cb5eeb8a7d2a8f851ac2733b94a097ac7cbccb419c7a65355b538ddd0ea100": {
      "address": "0xd7F9D59381346da932C68BA399e398501E0601E1",
      "txHash": "0xa763fdb2908c4179426d1146b77cfae91d65f0fad5d92eb20baa6362afb9265c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:19"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:20"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:22"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "930a6bd255d31ddf17df073ae962078e496df03a99c6d046f9d7e4b617e3cb32": {
      "address": "0xBf4C99bF1DB12E1AD96672C7ad652BC5fE0F23eb",
      "txHash": "0x0afe074b42daf93e09cae7f983fd50a9782dc275584229463ca6ac87b854c1d9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:26"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:27"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)16187",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:28"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)16195",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:29"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:31"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IWETH)16187": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)16195": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d7e17487189ee0f031b2a169bc7cd63474f13efe3f12259b4193071035284258": {
      "address": "0xda5C06064d29bd7525123D86d17c57512cE98586",
      "txHash": "0xf80e7f4646be0251a66f052ea2584086768dd39ec7ca6ccb7cce4569ed32feeb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:23"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:24"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)16082",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:25"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:27"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IVault)16082": {
            "label": "contract IVault"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9e5b06d4dc1a15900daccae2a880d31a87b430309687c0bf69a497a84833593d": {
      "address": "0x9D97bAd1fD253bA3Ac46A8281ae6571Ad6D307dE",
      "txHash": "0x273345372522844a5cdfc405cdf936fff68751bea3a121ef480ccd97ead39e7a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "wexMaster",
            "type": "t_contract(IWexMaster)17010",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:46"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12951",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:47"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)13589",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:47"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:49"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:50"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:50"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:52"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "wex",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:55"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:55"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:56"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:58"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:59"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:61"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:62"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:63"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:63"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:64"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:66"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:68"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker.sol:69"
          }
        ],
        "types": {
          "t_contract(IWexMaster)17010": {
            "label": "contract IWexMaster"
          },
          "t_contract(IWaultSwapFactory)12951": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)13589": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16784": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4743c1df3eaf4146aa00f9013222e083cba23380bf04aedfe0fa31606ba19120": {
      "address": "0x3DFC436f2194CA9Ab2faf314F95492c0485b16b5",
      "txHash": "0x4cf09fce17be573b60f4177169a90035c82f692d9fb54d2efeafbb236af2360e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)16906",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:52"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)29450_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:54"
          },
          {
            "contract": "WorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:55"
          }
        ],
        "types": {
          "t_contract(PriceOracle)16906": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)29450_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)29450_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "747cda4e0173bbd85c0829dd31f2f0db408884dbaacc9ccb3ae0c100eefffa13": {
      "address": "0x9A5105C9dD6c6AE76518f4afbbd388514C334D96",
      "txHash": "0x6a9764582f2d7a8dbed4372b69615015a6d023b092df9a5655fe3eaeab8857fa",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly.sol:35"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly.sol:36"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly.sol:38"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "03d83c12a0a15aae680a21edf05c60ef2a4ba87e1bbb049ba8114bc2dca10c4a": {
      "address": "0x75A6B8C95bB115706b111C50BCad3607b9565E83",
      "txHash": "0x3f9813de6c74250a3de93099c20605bc811779604f19fe4fbd91dc65ee0c9691",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:39"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8079",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:42"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:42"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8079": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5ae60b12ece203dd85d16008cecfe18bf0935976280bb629bbc2106c4c02d1c1": {
      "address": "0xb7025d33762580FD48b412c3A5108Be33c91Df77",
      "txHash": "0x8be47cc4336c4b4163da388ab5ee737fa7aac5d7bdf156204cb6e3f4ae5d9a32",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading.sol:39"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)16195",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading.sol:42"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IWNativeRelayer)16195": {
            "label": "contract IWNativeRelayer"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8d392be80039560cca3fae929b53016e9b27d62ce4d4625a4e7a83ffdbe12bd7": {
      "address": "0x69B5018910F9C8D82d544f315e9D3477236eD0E1",
      "txHash": "0xf27b8144b1512e797bb07d305c5bb1bd3719a76b0e51369e297fbf692f9d590c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:36"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:37"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "vault",
            "type": "t_contract(IVault)16082",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:40"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVault)16082": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "aa0c4c091151b5396d7e62bde780d27253e0b97747d60e4f0f08f89190b3a23b": {
      "address": "0xFBeFffDBa82C98cf157Cc709Ab0cf7e19301BC27",
      "txHash": "0x0bfb177b2001ec7f513f050dcf1d078d0422dd16c48c92804b21ec7ba08928b1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)16906",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:56"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:57"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:58"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)28866_storage)",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:59"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:60"
          }
        ],
        "types": {
          "t_contract(PriceOracle)16906": {
            "label": "contract PriceOracle"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Config)28866_storage)": {
            "label": "mapping(address => struct SingleAssetWorkerConfig.Config)"
          },
          "t_struct(Config)28866_storage": {
            "label": "struct SingleAssetWorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "78c2c2e20b87f68aecd8ee7f699847597b2796fe86a953ae49888834bb655acc": {
      "address": "0x025bA0e82d45E29E831c53637Bea2cE9D88199C2",
      "txHash": "0x605e5b246200a3cae83fcd4c6840cd4573b6bf16a7b0303b4a5b4608eea957c0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)16756",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:55"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:57"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7906",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:57"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:59"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:60"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:60"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:62"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:63"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:65"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "beneficialVault",
            "type": "t_contract(IVault)16818",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:66"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:67"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:68"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:70"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:71"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:72"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:72"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:73"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:75"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:75"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:76"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:79"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:79"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:83"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker.sol:84"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)16756": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7906": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)16818": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16784": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b5e52a1495508415c1b36f7212daf2f616684ed75321737c671a83a85940401e": {
      "address": "0x564c51709Ce87eB07a16Ba6f595C08b8bd20400a",
      "txHash": "0xeb85d2fea8f8e2b7e8f6d8247bef1bae62a1b06a2bb75f89aec5fd574a24398e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "OracleMedianizer",
            "label": "primarySourceCount",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:26"
          },
          {
            "contract": "OracleMedianizer",
            "label": "primarySources",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660)))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:28"
          },
          {
            "contract": "OracleMedianizer",
            "label": "maxPriceDeviations",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:30"
          },
          {
            "contract": "OracleMedianizer",
            "label": "maxPriceStales",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:32"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => contract PriceOracle)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660))": {
            "label": "mapping(address => mapping(uint256 => contract PriceOracle))"
          },
          "t_mapping(t_uint256,t_contract(PriceOracle)16660)": {
            "label": "mapping(uint256 => contract PriceOracle)"
          },
          "t_contract(PriceOracle)16660": {
            "label": "contract PriceOracle"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "c4c781872862b93d23896d4769a5054cc50defc19092c77c67fc2ff116e858ca": {
      "address": "0xc60E83fA880E525FA7E46f170e3E1337d87BaAa3",
      "txHash": "0xebd070626da3b24f3736c37e20d60e44e6c2d4710b37fed1f13629d6a1ee1be8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:41"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:43"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:45"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17090)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:47"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17103",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:49"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:56"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:58"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17090)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17090": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17103": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7e3bb24126c1ed5dfb12be3c890b52b8cab0ca0879abedcad9da26066f8af8a6": {
      "address": "0x58aE2f9aae13Fde75c61Dd2448838D84B43F66ea",
      "txHash": "0xaac1f533c4a8bea60d02d6f8cf366d53c84b0a5b10f49355f7aa90e4fadd7fe9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ChainLinkPriceOracle",
            "label": "priceFeeds",
            "type": "t_mapping(t_address,t_mapping(t_address,t_contract(AggregatorV3Interface)45))",
            "src": "contracts/6/protocol/price-oracle/ChainLinkPriceOracle.sol:27"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_address,t_contract(AggregatorV3Interface)45))": {
            "label": "mapping(address => mapping(address => contract AggregatorV3Interface))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_contract(AggregatorV3Interface)45)": {
            "label": "mapping(address => contract AggregatorV3Interface)"
          },
          "t_contract(AggregatorV3Interface)45": {
            "label": "contract AggregatorV3Interface"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "53d8a580bfee38780474e0cbd3234d673390d73f89251fcc2337f3c1d654cbf6": {
      "address": "0x0e98F04411d43c800608CA5019C216C212aAE694",
      "txHash": "0x7832a131755b9e15902ef256baa3fe58bd93f88a5595ed057f9ffeabd4173e43",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:60"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:71"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)16884",
            "src": "contracts/6/protocol/Vault.sol:78"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5817_storage)",
            "src": "contracts/6/protocol/Vault.sol:79"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:82"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:83"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)16884": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5817_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5817_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c7846a35ee75364980b54a3270872a4928a315aa702244b09981216820c881e1": {
      "address": "0xc69C8C2944C331a8f9B49C5027dA45E427c3708b",
      "txHash": "0xcc4310df46f2c59c81d1f7752711055ea028ba36bc31ff3848a6e2729365c4e8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)16645",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:66"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7795",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:68"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:70"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:71"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:73"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:75"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:76"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:77"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:78"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:79"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:81"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16673",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:82"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16673",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:83"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:84"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:86"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:90"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:90"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:93"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:94"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:95"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)16707",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:96"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:97"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:100"
          },
          {
            "contract": "PancakeswapV2Worker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/pcs/PancakeswapV2Worker02.sol:101"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)16645": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7795": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16673": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)16707": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1dac03f2ffae2ee766c042fbcb96d5f091f92503bfbd8e37c488ef129e35214b": {
      "address": "0x3297961610d8A64f41CB4f577448bf3a57738303",
      "txHash": "0xafe2dd11397e26a904d76cbcff1174a8cefee9aa1087c97236e9d713d3980f32",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "OracleMedianizer",
            "label": "primarySourceCount",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:26"
          },
          {
            "contract": "OracleMedianizer",
            "label": "primarySources",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660)))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:28"
          },
          {
            "contract": "OracleMedianizer",
            "label": "maxPriceDeviations",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:30"
          },
          {
            "contract": "OracleMedianizer",
            "label": "maxPriceStales",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/6/protocol/OracleMedianizer.sol:32"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => contract PriceOracle)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_contract(PriceOracle)16660))": {
            "label": "mapping(address => mapping(uint256 => contract PriceOracle))"
          },
          "t_mapping(t_uint256,t_contract(PriceOracle)16660)": {
            "label": "mapping(uint256 => contract PriceOracle)"
          },
          "t_contract(PriceOracle)16660": {
            "label": "contract PriceOracle"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "6ff80cb937e10bb9e493ac8b54525ceb3ef2baadff9e65376fa203827cd5227f": {
      "address": "0x238B84Fc7635C33F46313ebff4283dc0e2eE3221",
      "txHash": "0x5902d649866e0ab75e38db38a85cecefce9aaa5fcd95f899b1cf5bbc125432d7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:44"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:46"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:48"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17138)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:50"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17151",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWrappedNativeAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:56"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getFairLaunchAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:59"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:61"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:62"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillTreasuryBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:64"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:68"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17138)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17138": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17151": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0d80212f715e777f517734365e885853280d1e2dbc4039420feb56569b4ce6e7": {
      "address": "0xCE8ecbaB55105164FdcfE9B8ac67b0f644B212FC",
      "txHash": "0x4c9662593b484b3ae219097c349268d9fdee9db786892fa3617413c2ddcd8150",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:60"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:71"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)16923",
            "src": "contracts/6/protocol/Vault.sol:78"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5756_storage)",
            "src": "contracts/6/protocol/Vault.sol:79"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:82"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:83"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)16923": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5756_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5756_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f7ec519ca6b6f1d0bd57bab7c84cc66d70dafa565ccf28085fd617a72574eed3": {
      "address": "0x97D3282F64Dc0A0243386880fC00542CD00a20f4",
      "txHash": "0x462e165bdcb0fb11a46657c0cc573c5a6a8f048c070370d6f4afe54790780ecb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wexMaster",
            "type": "t_contract(IWexMaster)17010",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:67"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12951",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:68"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)13589",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:68"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:70"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:71"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:71"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:73"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "wex",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:76"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:76"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:77"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:79"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:80"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:82"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:83"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16784",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:84"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:84"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:85"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:87"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:89"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:89"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:92"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "reinvestPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:93"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:94"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:95"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)16818",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:95"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:96"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:99"
          },
          {
            "contract": "WaultSwapWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/waultswap/WaultSwapWorker02.sol:100"
          }
        ],
        "types": {
          "t_contract(IWexMaster)17010": {
            "label": "contract IWexMaster"
          },
          "t_contract(IWaultSwapFactory)12951": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)13589": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16784": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IVault)16818": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b100103ee955aab9679e79fd9a1bf3a6da8e579bdb27a361c7d445a930de6956": {
      "address": "0xC82aca9C28Da7092527C160F5bD72dBC3dF6c8E3",
      "txHash": "0x9c3613e419b8573ff6ea318734b7516e6b7290d105fe4d04649888be389ff95b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)22422",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3419",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)13471",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3661",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:71"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:73"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)22629",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:75"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:78"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)22450",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:79"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)22450",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:94"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:95"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:97"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:98"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)22422": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3419": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)13471": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3661": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)22629": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)22450": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "569462fdded32ec1cf28fce98c2ea3d939364312a4bad7077409baf585e0eda9": {
      "address": "0x1313C57C5Db43F932A8c91e12d19c2890fe3AE55",
      "txHash": "0x465c1c24198b4ac6bdf481c83a09962450f2f39173ef8fd6ad9de360a2d5665f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseLiquidate.sol:41"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseLiquidate.sol:41"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseLiquidate.sol:43"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "226f6395a340b895794c9cda27e45d8c147638f1b1a450715c37be256e32a693": {
      "address": "0x1fA4d6a2498CbdEc555fA727689f9B9d4587B464",
      "txHash": "0x93a6cf26ec6e863cce2c522f5683cfda800c111e69f8c61ae8eb5d6b6ada18d1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading.sol:42"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading.sol:43"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)17147",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading.sol:45"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)17155",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading.sol:45"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyPartialCloseMinimizeTrading.sol:47"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IWETH)17147": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)17155": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1ed313e8a8d5cf832b6c25a6edb6bf605340a12471543f5b1983871cc3c2e4b0": {
      "address": "0x91C1F2E7F7E6B77171EbDA204F074a574eDf2D24",
      "txHash": "0xcc28d04cd2a5200d8358dc86bb2e6377b7655b8a783833d6e7c1743ab671685e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseLiquidate",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)13131",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseLiquidate.sol:35"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseLiquidate",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)13769",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseLiquidate.sol:36"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseLiquidate.sol:38"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)13131": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)13769": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d68b7e92392b9975efc4475cd8abbf4b19d8cc8a9ebc7d6f810885bc3240d819": {
      "address": "0x83D6f3ac9c88C238B0d1676e1FcE59F4B026ad03",
      "txHash": "0x692bb9264b20f156f99e5fbcf86a424680afaad9592ad3b2680432501f61d342",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)13131",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseMinimizeTrading.sol:41"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)13769",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseMinimizeTrading.sol:42"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)17147",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseMinimizeTrading.sol:44"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)17155",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseMinimizeTrading.sol:44"
          },
          {
            "contract": "WaultSwapRestrictedStrategyPartialCloseMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyPartialCloseMinimizeTrading.sol:46"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)13131": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)13769": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IWETH)17147": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)17155": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "eafa4c08c020a0bde27ca67c550c4f981a75be87d5f05442a6542fdd6bc1d46d": {
      "address": "0x23850A04f9dBf488780d998Dd0048d472f7cC61c",
      "txHash": "0x4364f7f0562a0fb862b8008dc250eab1302c14f49f70db94581d044e2898f492",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate.sol:41"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate.sol:43"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseLiquidate.sol:43"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "354225867a5c534728a16189d1785b51bb6d9d3148547e41d576c93d50920959": {
      "address": "0xd1B41E43fe46Db03959ee87Dc00f498AE3D7c547",
      "txHash": "0xdcdd923772c1938dd274e724d35c4700bc200fc25f951138526771f08f67fff9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseWithdrawMinimizeTrading.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseWithdrawMinimizeTrading.sol:41"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseMinimizeTrading",
            "label": "wbnb",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseWithdrawMinimizeTrading.sol:42"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseWithdrawMinimizeTrading.sol:42"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyPartialCloseMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)17155",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyPartialCloseWithdrawMinimizeTrading.sol:44"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IWNativeRelayer)17155": {
            "label": "contract IWNativeRelayer"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a2f5e484ee43caefe253bb5237a7d8442d5ca35d97e8f649f9ef8cc6f7322af5": {
      "address": "0x20EbEe5D5127d47b686ECfAcf548Ca4a65108684",
      "txHash": "0xd8d5e98233de1dc0ca87bba35221b3d241cf11f063194c369e433e635b1745a9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:40"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6e84bcbce484df6f99cd90d4ca266fceb7ae67e2dcfd152745a784770e80e0d9": {
      "address": "0x67420cc8FDa18B061Fb4ba63777736Cd8aE3053F",
      "txHash": "0x3fea338b0f8c42a2541d487f93bc9744e23f074f4cdd9d04aafcb7d1332e356b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8086",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:41"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:43"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyLiquidate.sol:43"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8086": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c83ff55be7ed992979b5f41bd224c0b90a59d4ec97c43779c9d91f974aa5cb57": {
      "address": "0x64E7dE687625981497f21bD31135F6A9049935F7",
      "txHash": "0x0787b18f2a10e548f3699945216162aad45bd9a6b758b2863fee9c85ea219bc8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)13131",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:37"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)13769",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:38"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:40"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)13131": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)13769": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "59e0c0b2246a9ffe76b89a6edf3a09782dd871068693623adc2cc80d37ed2495": {
      "address": "0xC2d5CF622F314E8d79f84C5c643e18C509425857",
      "txHash": "0x03da2fdb828655be4054e9f5a1d20ceac3d752c1f73c2f1b434cf05485fcf883",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)16976",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:52"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)29671_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:54"
          },
          {
            "contract": "WorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:55"
          }
        ],
        "types": {
          "t_contract(PriceOracle)16976": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)29671_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)29671_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b400d79171b91d78211fd33cb45021684a9871b8739daf91db74ab55bbc09f06": {
      "address": "0x9b659a26938e6Bf15264A89457B555B46b034D34",
      "txHash": "0x2b50edf5c6b695b0058add28585d3871097c9a22f0476ede032066c1f37c36d3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)16976",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:56"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:57"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:58"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)28963_storage)",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:59"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:60"
          }
        ],
        "types": {
          "t_contract(PriceOracle)16976": {
            "label": "contract PriceOracle"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Config)28963_storage)": {
            "label": "mapping(address => struct SingleAssetWorkerConfig.Config)"
          },
          "t_struct(Config)28963_storage": {
            "label": "struct SingleAssetWorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c55d5475e8dbfabafd9064d18301d39849b12c357967ba5bf07052ac48eac05b": {
      "address": "0x5702223873b50b934265360074AF68973900613F",
      "txHash": "0x820f7e2c5be6136b627f6d16d3176cba80a5cb93bd4fd9ce368240b0221c5ffb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:45"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:47"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:49"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17383)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:51"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17396",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:53"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWrappedNativeAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:55"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:57"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getFairLaunchAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:60"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:62"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:63"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillTreasuryBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:65"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:68"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "approvedAddStrategies",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:70"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17383)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17383": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17396": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "99fe2a72b87783175f0648b6b3c9dcb9eb326004a9f2bbedcea9d477be805716": {
      "address": "0xac85FA48997B9CC3784c4FeDff0070091a322C31",
      "txHash": "0x1977297028d1033cc38858f7cf9dad0fd0210967db1b89d4f307d2bf5825dd82",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:65"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:75"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)17152",
            "src": "contracts/6/protocol/Vault.sol:80"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5942_storage)",
            "src": "contracts/6/protocol/Vault.sol:81"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:86"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)17152": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5942_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5942_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3fe77852d4fa3d86e8bfc4115a60318eab658f28688d744b9394eb12acd696a5": {
      "address": "0xCbBC7F00B6c68c0901AF71d103c9DBf362Fc429C",
      "txHash": "0xa94e8e2835666fee10ec1288e1758e63218ece9764cf9edc28a39e2541009dc3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)17021",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:52"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)29756_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:54"
          },
          {
            "contract": "WorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:55"
          }
        ],
        "types": {
          "t_contract(PriceOracle)17021": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)29756_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)29756_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cd347d4914f7860cb5d35c95d62089d97057b3dd10428420f34cefd92a473f78": {
      "address": "0x0a3617197113Ed2a9BbcadfB3C4f417734b1F8Aa",
      "txHash": "0xcdbd48f668b2a79ee7eb26128e184d74940bf3f50866e36e31f00d657dbbe8dd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)17021",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:56"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:57"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:58"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)29028_storage)",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:59"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:60"
          }
        ],
        "types": {
          "t_contract(PriceOracle)17021": {
            "label": "contract PriceOracle"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Config)29028_storage)": {
            "label": "mapping(address => struct SingleAssetWorkerConfig.Config)"
          },
          "t_struct(Config)29028_storage": {
            "label": "struct SingleAssetWorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4fb88fd4eafde2b593c152a6761aa1cbc015762d28bc51ad5e0df39408882fef": {
      "address": "0x14613598f0E929f8bb1F89051FD976b0A7b67beC",
      "txHash": "0xf24b6bbfc5a2dea19f0f13d39467b332bf2f2f829a931d0dd4ea14138ff83278",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:45"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:47"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:49"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17448)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:51"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17461",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:53"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWrappedNativeAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:55"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:57"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getFairLaunchAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:60"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:62"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:63"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillTreasuryBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:65"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:68"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "approvedAddStrategies",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:70"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17448)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17448": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17461": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7eeba5c432e7954bec1fa6ce9a35b3bb45140d2c6004bd2f9b23fac62a416063": {
      "address": "0x15bC06b928917228893DA2496b0EA86345a63853",
      "txHash": "0x80c3283e4bb9ea205ce935823beeb2b2e27a933a28eae766e02007acd52eb4a4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:65"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:75"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)17207",
            "src": "contracts/6/protocol/Vault.sol:80"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5987_storage)",
            "src": "contracts/6/protocol/Vault.sol:81"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:86"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)17207": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5987_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5987_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "88d9101882c2c79d37a5ea07ebaa823d0328ddafaefd920f306aef6bcc1482c7": {
      "address": "0xC2f7c637702b9131cb58dCBf49A119b77D994eD3",
      "txHash": "0x10c42ccb5e1fc16b310a801094a4a56e8d25773962fe0f4b96ee7f34fb3fdaf1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:46"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:48"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:50"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17563)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17576",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWrappedNativeAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:56"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getWNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:58"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getFairLaunchAddr",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:61"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:63"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:64"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillTreasuryBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:66"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:69"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "approvedAddStrategies",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:70"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedLiquidators",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:73"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17563)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17563": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17576": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "37d5545254a7ab729b54e2f28ce2b3e33dc77beb6399216ff4cbee2196448add": {
      "address": "0xcC7830c29Fa5FdF0E289562470672285290e3a20",
      "txHash": "0x1235f0905c2a13bf2f78988f37aae326bcb89c1bfc889a3c9fa553522ec6ed66",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:65"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:75"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)17322",
            "src": "contracts/6/protocol/Vault.sol:80"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)6080_storage)",
            "src": "contracts/6/protocol/Vault.sol:81"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:86"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:89"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)17322": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)6080_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)6080_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "805c8510b68f41a1c9be1996c04b242599731bd3ae985d2e5add8a13ee134283": {
      "address": "0xCDd640F7Cc3c5001CA06f00d578b85F895Dd2379",
      "txHash": "0x7f14793a90ba65a6023ea5c8e14623375ea9c94371aa65c73f5443e6caffd06a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)17113",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:63"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3268",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)8263",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:65"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3510",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:67"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:68"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:70"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:71"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:73"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVault",
            "type": "t_contract(IVault)17175",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:74"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:75"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:76"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:78"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "addStrat",
            "type": "t_contract(IStrategy)17141",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:79"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)17141",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:80"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:81"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:83"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:84"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:87"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:91"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "reinvestThreshold",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:94"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryAccount",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:95"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "treasuryBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:97"
          },
          {
            "contract": "CakeMaxiWorker02",
            "label": "buybackAmount",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/single-asset/CakeMaxiWorker02.sol:98"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)17113": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3268": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)8263": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3510": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)17175": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)17141": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
