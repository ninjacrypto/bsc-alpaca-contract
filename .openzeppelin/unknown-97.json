{
  "manifestVersion": "3.1",
  "impls": {
    "161a2337b77b4036b905f0242e930b6efde4c2764d743924da6b98db20e2e948": {
      "address": "0x106fb4c32DE618483e46aD5F474647c5488FC5B0",
      "txHash": "0x7d1cccce467b1235ff35ceb476b12d861a46be186f8a1784c2b0141d3d526df8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "FairLaunch",
            "label": "alpaca",
            "type": "t_contract(AlpacaToken)14807",
            "src": "contracts/6/token/FairLaunch.sol:48"
          },
          {
            "contract": "FairLaunch",
            "label": "devaddr",
            "type": "t_address",
            "src": "contracts/6/token/FairLaunch.sol:50"
          },
          {
            "contract": "FairLaunch",
            "label": "alpacaPerBlock",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:52"
          },
          {
            "contract": "FairLaunch",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:54"
          },
          {
            "contract": "FairLaunch",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:56"
          },
          {
            "contract": "FairLaunch",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:58"
          },
          {
            "contract": "FairLaunch",
            "label": "migrator",
            "type": "t_contract(IMigratorFairLaunch)16187",
            "src": "contracts/6/token/FairLaunch.sol:60"
          },
          {
            "contract": "FairLaunch",
            "label": "poolInfo",
            "type": "t_array(t_struct(PoolInfo)14847_storage)dyn_storage",
            "src": "contracts/6/token/FairLaunch.sol:63"
          },
          {
            "contract": "FairLaunch",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)14836_storage))",
            "src": "contracts/6/token/FairLaunch.sol:65"
          },
          {
            "contract": "FairLaunch",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:67"
          },
          {
            "contract": "FairLaunch",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:69"
          }
        ],
        "types": {
          "t_contract(AlpacaToken)14807": {
            "label": "contract AlpacaToken"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IMigratorFairLaunch)16187": {
            "label": "contract IMigratorFairLaunch"
          },
          "t_array(t_struct(PoolInfo)14847_storage)dyn_storage": {
            "label": "struct FairLaunch.PoolInfo[]"
          },
          "t_struct(PoolInfo)14847_storage": {
            "label": "struct FairLaunch.PoolInfo",
            "members": [
              {
                "label": "stakeToken",
                "type": "t_address"
              },
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accAlpacaPerShare",
                "type": "t_uint256"
              },
              {
                "label": "accAlpacaPerShareTilBonusEnd",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)14836_storage))": {
            "label": "mapping(uint256 => mapping(address => struct FairLaunch.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)14836_storage)": {
            "label": "mapping(address => struct FairLaunch.UserInfo)"
          },
          "t_struct(UserInfo)14836_storage": {
            "label": "struct FairLaunch.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "15eb27b545de9888d81c91f4566a45abdb3156c0e41450edf1fe29cd90b35e75": {
      "address": "0xF207d1bf8416A92B9f818ef675b2c31454345072",
      "txHash": "0x420e10a9495026de8bc8be2cfb5362e811d8e4f14911c11179011b69880f4498",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)1533",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddBaseTokenOnly.sol:20"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)7017",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddBaseTokenOnly.sol:21"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)1533": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)7017": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2f0265bd18a99d0f08f7a1a993ddf61f41d22a9c112cfa40d8679cfc0cfdfb8c": {
      "address": "0xC10D2B82670879075191ddb7351cbd5128958Cd8",
      "txHash": "0x5b54fa1ea31f8a6bba04e1ead944165d5b61e8dc38b2b565ba14a821146fce0c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)1533",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyLiquidate.sol:17"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)7017",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)1533": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)7017": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "59b54aeac485618910716683f992a6b7f21092d96c65dc2c2ffcb1c243e88bee": {
      "address": "0xeBEc6563aFBFc3B0b3E6dB0a850071842Ea648D4",
      "txHash": "0xbcd9fd556b2f439eaf468e078c5006cb0a7329fc3d69aff1f70895d1360d89ad",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:42"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:44"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:46"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)10022)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:48"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)2300",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:50"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:57"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)10022)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)10022": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)2300": {
            "label": "contract InterestModel"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "90340167bad7e1af082ba23fad39fbda991c72817d52c844bd6907036a43feea": {
      "address": "0x0126F71AFb76e16Fbaf6F4ee3E755378078dBA2F",
      "txHash": "0xca31ded9ad177a0fa90911864797bcbb2fed9b2e6249158e196fdd8b3bd6c985",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SimplePriceOracle",
            "label": "feeder",
            "type": "t_address",
            "src": "contracts/6/protocol/SimplePriceOracle.sol:11"
          },
          {
            "contract": "SimplePriceOracle",
            "label": "store",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(PriceData)4534_storage))",
            "src": "contracts/6/protocol/SimplePriceOracle.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(PriceData)4534_storage))": {
            "label": "mapping(address => mapping(address => struct SimplePriceOracle.PriceData))"
          },
          "t_mapping(t_address,t_struct(PriceData)4534_storage)": {
            "label": "mapping(address => struct SimplePriceOracle.PriceData)"
          },
          "t_struct(PriceData)4534_storage": {
            "label": "struct SimplePriceOracle.PriceData",
            "members": [
              {
                "label": "price",
                "type": "t_uint192"
              },
              {
                "label": "lastUpdate",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "afccb811cb75ad4e0b272f3371b1d6ef9da09bb5296542187aea4f702d810fb7": {
      "address": "0x99eDc7a16C2f6ee87a10bB85397AB3A6Ad1063b8",
      "txHash": "0x74eb3f7826d33933ead283471f46f0cebfd0bb85d67164a0db81de03a504c19b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "UniswapWorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)4510",
            "src": "contracts/6/protocol/workers/UniswapWorkerConfig.sol:29"
          },
          {
            "contract": "UniswapWorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)13381_storage)",
            "src": "contracts/6/protocol/workers/UniswapWorkerConfig.sol:30"
          }
        ],
        "types": {
          "t_contract(PriceOracle)4510": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)13381_storage)": {
            "label": "mapping(address => struct UniswapWorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)13381_storage": {
            "label": "struct UniswapWorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f837206ea7531c10dd48f7528a75c4b7c512b3c95f812a9fff53025f969559c1": {
      "address": "0xF0Fcf676AEAeD3C05022b0E90A6C610ADf0096Ee",
      "txHash": "0x4ef7d7babc0426c1acffb7ec9456ab91c2576020ebd489cbbe1bfca4c510d903",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)10045",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5102_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)10045": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5102_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5102_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3f67d68a9f0f35e3424e1e75b4c83db0b6de93b11dcea0e65a90e1316ee50c97": {
      "address": "0x726B79438B79090F3C6fcF127B8490e5837D61Be",
      "txHash": "0xd0490b438b568f79cc6bd258f0275e4433576b307bd38fb31ae9e8bf3abe073a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "SushiswapWorker",
            "label": "masterChef",
            "type": "t_contract(IMasterChef)9834",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:31"
          },
          {
            "contract": "SushiswapWorker",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)1533",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:32"
          },
          {
            "contract": "SushiswapWorker",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)7012",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:33"
          },
          {
            "contract": "SushiswapWorker",
            "label": "lpToken",
            "type": "t_contract(IUniswapV2Pair)1775",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:34"
          },
          {
            "contract": "SushiswapWorker",
            "label": "weth",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:35"
          },
          {
            "contract": "SushiswapWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:36"
          },
          {
            "contract": "SushiswapWorker",
            "label": "quoteToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:37"
          },
          {
            "contract": "SushiswapWorker",
            "label": "sushi",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:38"
          },
          {
            "contract": "SushiswapWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:39"
          },
          {
            "contract": "SushiswapWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:40"
          },
          {
            "contract": "SushiswapWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:43"
          },
          {
            "contract": "SushiswapWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:44"
          },
          {
            "contract": "SushiswapWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:45"
          },
          {
            "contract": "SushiswapWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)9847",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:46"
          },
          {
            "contract": "SushiswapWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)9847",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:47"
          },
          {
            "contract": "SushiswapWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/SushiswapWorker.sol:48"
          }
        ],
        "types": {
          "t_contract(IMasterChef)9834": {
            "label": "contract IMasterChef"
          },
          "t_contract(IUniswapV2Factory)1533": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)7012": {
            "label": "contract IUniswapV2Router02"
          },
          "t_contract(IUniswapV2Pair)1775": {
            "label": "contract IUniswapV2Pair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)9847": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bddbc06463634b292ba94b98ff70529d6c3ec452b0e4b519bd23391fc2ad223a": {
      "address": "0x75853Ae0C21aD471D1C805CCf69D59616835482e",
      "txHash": "0x37a0e4a51262419674ccfec06159dc71b524da96d7ac40bdda57d20c1e36904f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)1533",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)7012",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddTwoSidesOptimal.sol:23"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)9876",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddTwoSidesOptimal.sol:24"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)1533": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)7012": {
            "label": "contract IUniswapV2Router02"
          },
          "t_contract(IVault)9876": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7f29d4fd64f3656c2c27c15f92ba44e0910ee99be21b0bcbc9fd9c46f4b6044d": {
      "address": "0x89c45bc7C96C6174A78EE62B6F72be8f55966779",
      "txHash": "0xc18f3eed3a729895599b8bd6bafcd7df9df682bc3bb2df9c64cfdcd94c8b89fd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:42"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:44"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:46"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)10034)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:48"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)2300",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:50"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:57"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)10034)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)10034": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)2300": {
            "label": "contract InterestModel"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7803e1189164d4411ba12ab8eccfa8fb70fb18537002706538b1f91a3d1d9dcc": {
      "address": "0x64019821BBb6D7B15084d30A42b438e4Caaa3848",
      "txHash": "0x56031c4d39ca744cc128e14f65c27d735c7fa6b1773f8698cc7a436e2d062123",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "FairLaunch",
            "label": "alpaca",
            "type": "t_contract(AlpacaToken)14820",
            "src": "contracts/6/token/FairLaunch.sol:48"
          },
          {
            "contract": "FairLaunch",
            "label": "devaddr",
            "type": "t_address",
            "src": "contracts/6/token/FairLaunch.sol:50"
          },
          {
            "contract": "FairLaunch",
            "label": "alpacaPerBlock",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:52"
          },
          {
            "contract": "FairLaunch",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:54"
          },
          {
            "contract": "FairLaunch",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:56"
          },
          {
            "contract": "FairLaunch",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:58"
          },
          {
            "contract": "FairLaunch",
            "label": "migrator",
            "type": "t_contract(IMigratorFairLaunch)16200",
            "src": "contracts/6/token/FairLaunch.sol:60"
          },
          {
            "contract": "FairLaunch",
            "label": "poolInfo",
            "type": "t_array(t_struct(PoolInfo)14860_storage)dyn_storage",
            "src": "contracts/6/token/FairLaunch.sol:63"
          },
          {
            "contract": "FairLaunch",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)14849_storage))",
            "src": "contracts/6/token/FairLaunch.sol:65"
          },
          {
            "contract": "FairLaunch",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:67"
          },
          {
            "contract": "FairLaunch",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:69"
          }
        ],
        "types": {
          "t_contract(AlpacaToken)14820": {
            "label": "contract AlpacaToken"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IMigratorFairLaunch)16200": {
            "label": "contract IMigratorFairLaunch"
          },
          "t_array(t_struct(PoolInfo)14860_storage)dyn_storage": {
            "label": "struct FairLaunch.PoolInfo[]"
          },
          "t_struct(PoolInfo)14860_storage": {
            "label": "struct FairLaunch.PoolInfo",
            "members": [
              {
                "label": "stakeToken",
                "type": "t_address"
              },
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accAlpacaPerShare",
                "type": "t_uint256"
              },
              {
                "label": "accAlpacaPerShareTilBonusEnd",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)14849_storage))": {
            "label": "mapping(uint256 => mapping(address => struct FairLaunch.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)14849_storage)": {
            "label": "mapping(address => struct FairLaunch.UserInfo)"
          },
          "t_struct(UserInfo)14849_storage": {
            "label": "struct FairLaunch.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "dc6e334931f4d334fc81dece778fc3093a8e2fc3b061e65f1782a23c4eab4c0b": {
      "address": "0x99b8884cF9b63A30667C58B3a3C956B06B87F004",
      "txHash": "0x6447c5db6d1db53d30f7fee66c258379ed9258f93015cca314b16faf1fd94265",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "aab64d3cdd377503891f44891b3f87d42ee9f0eab20ea7207f6c9509b070d8b6": {
      "address": "0x384db783E23eD426Fcb6237a4D43f6158D178801",
      "txHash": "0x63e0d05136956ecba0888e7a682fca8214eeefde2c9686fb184487fd8bb793a9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "FairLaunch",
            "label": "alpaca",
            "type": "t_contract(AlpacaToken)16298",
            "src": "contracts/6/token/FairLaunch.sol:48"
          },
          {
            "contract": "FairLaunch",
            "label": "devaddr",
            "type": "t_address",
            "src": "contracts/6/token/FairLaunch.sol:50"
          },
          {
            "contract": "FairLaunch",
            "label": "alpacaPerBlock",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:52"
          },
          {
            "contract": "FairLaunch",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:54"
          },
          {
            "contract": "FairLaunch",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:56"
          },
          {
            "contract": "FairLaunch",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:58"
          },
          {
            "contract": "FairLaunch",
            "label": "migrator",
            "type": "t_contract(IMigratorFairLaunch)17690",
            "src": "contracts/6/token/FairLaunch.sol:60"
          },
          {
            "contract": "FairLaunch",
            "label": "poolInfo",
            "type": "t_array(t_struct(PoolInfo)16338_storage)dyn_storage",
            "src": "contracts/6/token/FairLaunch.sol:63"
          },
          {
            "contract": "FairLaunch",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)16327_storage))",
            "src": "contracts/6/token/FairLaunch.sol:65"
          },
          {
            "contract": "FairLaunch",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:67"
          },
          {
            "contract": "FairLaunch",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/6/token/FairLaunch.sol:69"
          }
        ],
        "types": {
          "t_contract(AlpacaToken)16298": {
            "label": "contract AlpacaToken"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IMigratorFairLaunch)17690": {
            "label": "contract IMigratorFairLaunch"
          },
          "t_array(t_struct(PoolInfo)16338_storage)dyn_storage": {
            "label": "struct FairLaunch.PoolInfo[]"
          },
          "t_struct(PoolInfo)16338_storage": {
            "label": "struct FairLaunch.PoolInfo",
            "members": [
              {
                "label": "stakeToken",
                "type": "t_address"
              },
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accAlpacaPerShare",
                "type": "t_uint256"
              },
              {
                "label": "accAlpacaPerShareTilBonusEnd",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)16327_storage))": {
            "label": "mapping(uint256 => mapping(address => struct FairLaunch.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)16327_storage)": {
            "label": "mapping(address => struct FairLaunch.UserInfo)"
          },
          "t_struct(UserInfo)16327_storage": {
            "label": "struct FairLaunch.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "026142ba7a51ea17afdba8db51649e139fcb3a6937b369582ba7b8c94ee88cea": {
      "address": "0xE739A8d6AaDbD4fa44Ad7541f8a5a5D7dbfD25F4",
      "txHash": "0x337ba8050b40bc83c4868b86fd4f871b17abdc38c7df5e11c25ff929203cc13c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)1533",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddBaseTokenOnly.sol:20"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)7076",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyAddBaseTokenOnly.sol:21"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)1533": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)7076": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "16eb2d598a98c1b50ee4e5d1b76001180b1fbfbd5b86f451536394b46b1b2c8f": {
      "address": "0x5dd4422c6541a59F5C788d43A014004CF614bBfA",
      "txHash": "0x5d435103d6175c6fbeae75ddb7c2a3526bb84debeb057986620938ebf1458f07",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)1533",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyLiquidate.sol:17"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)7076",
            "src": "contracts/6/protocol/strategies/unisushiswap/StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)1533": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)7076": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6c883b146c73b165c5657fe34f9eb19c86870b61d1141bb7bcfe3617158d2576": {
      "address": "0xf6C9ebd3C5ACe90957f0dF3219E6d5A902554840",
      "txHash": "0xc59f8d46a0f702afbb94e7d3f35d3dba22d943d76f7f4790a3b9d147cb9406d0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "UniswapWorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)4509",
            "src": "contracts/6/protocol/workers/UniswapWorkerConfig.sol:29"
          },
          {
            "contract": "UniswapWorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)14865_storage)",
            "src": "contracts/6/protocol/workers/UniswapWorkerConfig.sol:30"
          }
        ],
        "types": {
          "t_contract(PriceOracle)4509": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)14865_storage)": {
            "label": "mapping(address => struct UniswapWorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)14865_storage": {
            "label": "struct UniswapWorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7e7f6b47b25e8cd1cdd270eb6ef5de787c564e0a1b509bb323141430130ff0c8": {
      "address": "0x879FE936Fcc3B17b1F701991A5703B051213490F",
      "txHash": "0xfdedf6cb53a9194dc9bc56c924bc008a6ef18fea1c3ca58d39be9a6dd9ed0d36",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)9918",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:31"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)1533",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:32"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)7070",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:33"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "lpToken",
            "type": "t_contract(IUniswapV2Pair)1775",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:34"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:35"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:36"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "quoteToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:37"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:38"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:39"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:40"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:43"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:44"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:45"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)9931",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:46"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)9931",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:47"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:48"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)9918": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IUniswapV2Factory)1533": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)7070": {
            "label": "contract IUniswapV2Router02"
          },
          "t_contract(IUniswapV2Pair)1775": {
            "label": "contract IUniswapV2Pair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)9931": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "914f5869a2b8ab79c11f6af49b5c870aa6cdca19bc63e19a957bce248cff7bd8": {
      "address": "0xfCBe4E179A928851CD1972E2ec6C2c82a0AA7a28",
      "txHash": "0xfb4ab5d9fdbb070220092685c0503e630d1f6f746c918fcee85aad4fc57392fd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)10065",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5102_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)10065": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5102_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5102_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d7b62848423c8c0885c38c4c3c2e724470e136b5731686ae9a38e21a2cdd088b": {
      "address": "0x1568064b7d2920d6E849C6B46497DEC428a5Fe3B",
      "txHash": "0x24a322421f128b5de2b66074932becf8ae5e87aa21ee664cf19cda1833ed7a17",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SimplePriceOracle",
            "label": "feeder",
            "type": "t_address",
            "src": "contracts/6/protocol/SimplePriceOracle.sol:11"
          },
          {
            "contract": "SimplePriceOracle",
            "label": "store",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(PriceData)6151_storage))",
            "src": "contracts/6/protocol/SimplePriceOracle.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(PriceData)6151_storage))": {
            "label": "mapping(address => mapping(address => struct SimplePriceOracle.PriceData))"
          },
          "t_mapping(t_address,t_struct(PriceData)6151_storage)": {
            "label": "mapping(address => struct SimplePriceOracle.PriceData)"
          },
          "t_struct(PriceData)6151_storage": {
            "label": "struct SimplePriceOracle.PriceData",
            "members": [
              {
                "label": "price",
                "type": "t_uint192"
              },
              {
                "label": "lastUpdate",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "766afa746ede251a2339a318d8d12854b250fe819ba9a132b6b0f952cb2bbc99": {
      "address": "0x7a5573CE1F18FEE21306ABfb263778AAaFE065Ce",
      "txHash": "0x450e577d34cae4e6bbf4918a105b647b10a29c52f788daf3a93c58f0f048ea1e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:40"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:41"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:49"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:50"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)11700",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)6721_storage)",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:60"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:65"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:66"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)11700": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)6721_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)6721_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6b678ded4169699e40841e824a1e45b6818a6227fa3e6fe8269f1606243927d4": {
      "address": "0x94586a818765bC5609C62cd4583aBd30F055eE7D",
      "txHash": "0x3252ab3345438bfdaf4529fda171b959ef5b4091c00be41226d8cd561a7999db",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:19"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:21"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)8705",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:22"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)8705": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "62a645184262508b9cec87f86434a07f93ec966ce1d6fab46793fca51b302986": {
      "address": "0xC515374154Ee82BA975fB53Ef81c52F9316bE22E",
      "txHash": "0x51d7b6fc3a7e0833126f042d16ebefba85e5dd9d8be63f9d5f32ca23073dff10",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyLiquidate.sol:17"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)8705",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)8705": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "be37baea61b0110c89551eb2117c952d3272410650553abed34b0f272edb95ec": {
      "address": "0x9c688A52974cb0279625D110cCDd59789cBA98E5",
      "txHash": "0xe6e108d3a19a8249a9b5304442c352ab27eaffaf53fb14052821a73b17e8f635",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)11553",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:31"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:32"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)8705",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:33"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "lpToken",
            "type": "t_contract(IUniswapV2Pair)3393",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:34"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:35"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:36"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "quoteToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:37"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:38"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:39"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:40"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:43"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:44"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:45"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)11566",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:46"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)11566",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:47"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:48"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:49"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)11553": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)8705": {
            "label": "contract IUniswapV2Router02"
          },
          "t_contract(IUniswapV2Pair)3393": {
            "label": "contract IUniswapV2Pair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)11566": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9a4257ae08cb3012c02042d0123fc3dbcbecdefbd068d7f8f18dcaaa8764dbba": {
      "address": "0x39982f5ce993250c6F0d2045653Abb15f055819C",
      "txHash": "0x2d32c64dc6d588ee66c294ad5df5e7b35279836509a58ec341294d9d7bba2ed6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IUniswapV2Factory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IUniswapV2Router02)8705",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)11595",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Factory)3151": {
            "label": "contract IUniswapV2Factory"
          },
          "t_contract(IUniswapV2Router02)8705": {
            "label": "contract IUniswapV2Router02"
          },
          "t_contract(IVault)11595": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0e78b610f8ad84ec18fb3da2cd151377adda6c89a359e22eafdde7601f58007a": {
      "address": "0x86bb4d5e2c6088882708770614b7faC05e0043f7",
      "txHash": "0x210c5bf5ac6d82e175b297dfb12d4943f1a55d7ddf3b1c9092c5af42db83775b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "DebtToken",
            "label": "timelock",
            "type": "t_address",
            "src": "contracts/6/protocol/DebtToken.sol:11"
          },
          {
            "contract": "DebtToken",
            "label": "okHolders",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/DebtToken.sol:13"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "85a4f438c9c15fb9f5a9d7e1cd1983a060168fee49714ec7bfefcec6ffaffe49": {
      "address": "0xF5729A6ee9a48f68459b944CA860eE6538FBC073",
      "txHash": "0x6c30f3862cd5c5b7812bd5da3b3475ddbb1f4154cd60ae42f8ffe628527903a1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:40"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:41"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:49"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:50"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)11834",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)6865_storage)",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:60"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:65"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:66"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)11834": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)6865_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)6865_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "dfcfa624276102a2af6a3df1cfd7b2d81741c968b795d0bc2e7091b879fd680e": {
      "address": "0x4e00DEC121005896c3330F3D7DE3169B81b7784f",
      "txHash": "0x010c0c2d1b123accddaccaa6e512025b16a9874a27f130fb2f485f33f4220e16",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)12470",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)7426_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)12470": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)7426_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)7426_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "22fdfdf02bfdd6c627a35a48b2bbf26bffd7538cebb1b3213d9505b501a1fa60": {
      "address": "0x107F74e32B42aC12D72aEacD013EB8db5f8234B8",
      "txHash": "0x3e942fe9e970a3b8163629c03fb28c9a7ed4e227d25ee40255f3d6d4fb4df050",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)12460",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)7318_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)12460": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)7318_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)7318_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "155fa48981b08bb53c8a0e75c58d915f819f70060a1bdc3cbc769fc3da990c91": {
      "address": "0x91B1b5C90D7D21e2E74a8f98adBc9f50bcf50Db5",
      "txHash": "0x11bf005b0c6001ad66e7f61614676fc6ae4aaef1041fb417859b49020283a1df",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)12476",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)7324_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)12476": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)7324_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)7324_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9f94e1235301de89bd272a056e00e3924629397d386c13b662852bd1646be40f": {
      "address": "0x1446d9825058230d144480Faa7318Ff4b6c2CE95",
      "txHash": "0x099817f4183fd9adf014d53e39f065d68af86827424421899bd47644294d826a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:19"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:21"
          },
          {
            "contract": "StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9386",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddBaseTokenOnly.sol:22"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9386": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9c34d77d958c30538df46e8b86963f6c7ff13c4ef76862ac965fe16b4bd26d1a": {
      "address": "0xc7Cdac1Df9BeF355956d0dDBA516FCa92C0c0065",
      "txHash": "0x2aa6bf1dc485e474840ffbb456d675b5a0941af0facc909f5ef29df505e0c8cc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyLiquidate.sol:17"
          },
          {
            "contract": "StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9386",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9386": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "892aa6e92f0496c7c94a04465adb2506042243c464cecc57acab9831ea1bd52e": {
      "address": "0x14fDe28f22516f6D7B8073A70806Ae6f64B8CCa3",
      "txHash": "0xcb45fcdf9fb28ea6ee501a4bc553c49f5c5eea6d1049fa42c9547ee7785b7219",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)6725",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:24"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)16032_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:25"
          }
        ],
        "types": {
          "t_contract(PriceOracle)6725": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)16032_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)16032_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5428f0ba3268ba1cc7c786a4099d43ddf4db7ec68afd5c8ef34e0b556f7fc208": {
      "address": "0x6E56F45b238d01Ba8B0a0542cE69bad48a641b6D",
      "txHash": "0xde5230d8e8b741140dc2984f57b11f596e702dd7fbc54a272f339f09800b8ca1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:13"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:15"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:17"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)12620)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:19"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)12633",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:21"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:23"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:25"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:28"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)12620)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)12620": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)12633": {
            "label": "contract InterestModel"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "c961655dc0586f031055131c37a9927b1dd85aba2f3939288cee850f3c96a65d": {
      "address": "0x8d7ce111088eaCA3F600D95294dA0658d0da401b",
      "txHash": "0xe6929de1a26bac6782304ea091fc35da6651a4bb5f102cd7573a0131683cba5d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)12377",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:31"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:32"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9393",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:33"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3393",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:34"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:35"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:36"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:37"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:38"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:39"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:40"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:43"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:44"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:45"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12390",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:46"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)12390",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:47"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:48"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:49"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:50"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)12377": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9393": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3393": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12390": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3e5460bb0c86748c85e7ce4682ab70f06ae2c7daf8e6e366681efe208e7f06e5": {
      "address": "0x04497C3629b7bd96F7c01F88B70e9b5D5252DeCE",
      "txHash": "0x9bce80285c3fff1dbc5d91f10025942fb032de69e82fdd2fcf9827d48a2ff65e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9386",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)12391",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9386": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)12391": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9b7b6662d8188e4aa2820e58f41ddd4e652a09e52894dae36017eb5509dff65d": {
      "address": "0xFe2C462a24a70337b59b84aAF2B1152E34B000bF",
      "txHash": "0x52d6f6d2e9f03fe6b6cb31ece6acc21a53089b92a09df2dcbe6847e7041a6480",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyWithdrawMinimizeTrading.sol:18"
          },
          {
            "contract": "StrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9393",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyWithdrawMinimizeTrading.sol:19"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9393": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b668969f6adac4bcd98fca48f9c5daed4f112014ab4d6118f2fa4f0e408f7246": {
      "address": "0xe9EEf24fC74CaD87b2Fc95b030D8929cb77B81cD",
      "txHash": "0x16f9ad87cf14e4fd7ad28a3bf3ec6ad9000fac9be5e066ee1fe13a843712b8a2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyWithdrawMinimizeTrading.sol:20"
          },
          {
            "contract": "StrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9393",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyWithdrawMinimizeTrading.sol:21"
          },
          {
            "contract": "StrategyWithdrawMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)12503",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyWithdrawMinimizeTrading.sol:22"
          },
          {
            "contract": "StrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)12511",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyWithdrawMinimizeTrading.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9393": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IWETH)12503": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)12511": {
            "label": "contract IWNativeRelayer"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bff9fe37dacb8f7f2affab5474fafb19e4d94d5905c97473eb713e202620b102": {
      "address": "0x0D64290fDB61f1E52E4A8e29b6CF5eFba8098565",
      "txHash": "0xc2d37254dcd583407591286a09b6f0a570deba8928e148a2316cbe32c97ab37d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)12483",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)7324_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)12483": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)7324_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)7324_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8949036904553fbf6e1433c155dba40c2f57abb7463cea36466d3fa327a93d1a": {
      "address": "0xB058642267c22802d0aA8D9d5ea50Bfb82A2Ac63",
      "txHash": "0x1694c6faeca7b7f08955b5584b0046f1bf19586b8c81ce8d53a71a869c1910c1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:13"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:15"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:17"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)12653)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:19"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)12666",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:21"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:23"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:25"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:27"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:29"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)12653)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)12653": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)12666": {
            "label": "contract InterestModel"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5c9bc885c81d307817c13349e92180112226688296e909b8f712731f5d574e2a": {
      "address": "0x446EF52a8D1Ba286eCF32C345abc9d83dDe875B5",
      "txHash": "0x97faee58172fba38dc388a52fed8cf6edc884b2b144e41c4caa8f135d39e884c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "DebtToken",
            "label": "timelock",
            "type": "t_address",
            "src": "contracts/6/protocol/DebtToken.sol:11"
          },
          {
            "contract": "DebtToken",
            "label": "okHolders",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/DebtToken.sol:13"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d56626a41bc68f496a348f13ec34418b3a4860dfe1d75516d4326e9c96f0c01a": {
      "address": "0x2515661b7018927F493Fb0B0A5Eb20609d6a0ac1",
      "txHash": "0xb9f214c84fe51c4468d1ca348080c1b425cc54ec6c16e508079c68ac2c28f002",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:37"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:38"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:39"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:47"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:48"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)12537",
            "src": "contracts/6/protocol/Vault.sol:56"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)7357_storage)",
            "src": "contracts/6/protocol/Vault.sol:57"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:58"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:59"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:61"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:64"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)12537": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)7357_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)7357_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9a9e7bc19a1f17258ad359afc99ba5cd77a21a494accc410ea705258b876bad4": {
      "address": "0x5930EF5D560a5F43Fab5b202c694820921e6a261",
      "txHash": "0x0c4e1cd89062b7879eb04cfa26901a83d6f8a2ff9060b1e42db124ad6ff03cdc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9426",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)12452",
            "src": "contracts/6/protocol/strategies/pancakeswap/StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9426": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)12452": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "eb6d0a9baebb23cd16bc96bbdf1d346af6eaca8ea19a8fa9e560aa04e19e685a": {
      "address": "0xDB61033D4690dABf807F96265638af0507E8B367",
      "txHash": "0x52a71c53856829218128418539af4799d74face8578c4cff3097d384e8308c0d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)12410",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:31"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3151",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:32"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9426",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:33"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3393",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:34"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:35"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:36"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:37"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:38"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:39"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:40"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:43"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:44"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:45"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12423",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:46"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)12423",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:47"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:48"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:49"
          },
          {
            "contract": "PancakeswapWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapWorker.sol:50"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)12410": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3151": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9426": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3393": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12423": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0e096643820f2115971d4faf686bc318e95fd18548bddf834ac4336d3b25e247": {
      "address": "0xc58aC4E7556E12585cc1bA94609Def6f6bb68A78",
      "txHash": "0xf7b3f1d69576e04f47b9794bf2e24c29c3cf1e44cfc86d781048ddb1a70d3917",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)15014",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)15014": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d9b444502958b3c76679e12b2407368de8cd97589459957e6ba21f49f56dca0d": {
      "address": "0xAA6C946aE99317Fa2954CF0c77dF9E89AaF1EB39",
      "txHash": "0x56ddea9773de7367815b756928c96069aad417a2d74a9f74f91598ecea3bad99",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:41"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:42"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:51"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:52"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:55"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:56"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4cee1b89aed468306fe1fb6c5ec5dd3cdb4499e0627dd7ceee207cd31947e029": {
      "address": "0x834f1d71D14c83e44d8E48FdA4147Df69d88fCda",
      "txHash": "0x815230a3dbe56e5f81893a8fb852b3138b527b261823d4e2ff5f4215fbb9087f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimalMigrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimalMigrate.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimalMigrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimalMigrate.sol:22"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "48a8b489935ac30d66c2f44ec0412b0c4d1271e453bff73b304b26fa06db8875": {
      "address": "0x07b047bf63fCe2b671dA208B90e329443eD21568",
      "txHash": "0x9196f9a3572f7c1eda4704793185cb71d9489cf777daa0e1be9925b0754eb98d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyLiquidate.sol:17"
          },
          {
            "contract": "PancakeswapV2StrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyLiquidate.sol:18"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "382d6f8a174c545b58f6e519a8e7c1e4a6f6e0d931145be6d87ddc3bec3a3e67": {
      "address": "0xFe10F7b55235209520693f86D20e10dE8aa6A1B4",
      "txHash": "0x8afa2d71e917bb3a06411fcb3674d3a7d8aaddfe27325540cc01a4480e8c9b8b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddBaseTokenOnly.sol:19"
          },
          {
            "contract": "PancakeswapV2StrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddBaseTokenOnly.sol:20"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3a301e3d17b75ae5b03f8222d86c333e3aeab0b369fba084843c1ae702232bc9": {
      "address": "0x805a43f99df8D7D6E74F12527Ca356cfc91409e1",
      "txHash": "0xbb587e3e99eac06027fe02a6e30f2d40ab2b3fd619bce58c8758477b3d4c704e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bf5da656c7e7e48676402cfb9120aec68806a53a9f1bd5bddb45bdab0886809f": {
      "address": "0xcA0d1BcC67Ca6135f5691Fe4a1944F31D7B33Ea2",
      "txHash": "0xa0cb434e3ed5ccef11bfde997f7030cf601de52da5294fb15e7501e5a6e6c627",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f10a7b89c6c4c11dbeddc841f4ab231cdf45a0d948d4aeffb9f74be70c6d3e3b": {
      "address": "0x8f04Bd1F42e197cad77134595F8d73886D49b089",
      "txHash": "0x541c31a3a54029c53dead069805298c265b5ef43fafcee86b5b606510a7a6658",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7bd0f64c58a654d06a610f48f15adcbc0f800ac8a5fd1cc68b0bd07ab833b0e5": {
      "address": "0x1d48a93E4C38b072fE6f628581CD7f20E257eF09",
      "txHash": "0xe37d945b14ac5652688274fec9c2068baf04ce76fc61c5ed55a2c4d8b0ecf06d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)12659",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:31"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:32"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:33"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:34"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:35"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:36"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:37"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:38"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:39"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:40"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:43"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:44"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:45"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12672",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:46"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)12672",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:47"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:48"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:49"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:50"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:53"
          },
          {
            "contract": "PancakeswapV2WorkerMigrate",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2WorkerMigrate.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)12659": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12672": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c33d097ab882f73cab9db8eebf24c10e34ff31659632c0b7dcfbdbed02789308": {
      "address": "0x604C9f99C650a1cB5E631804651A8f929FB94441",
      "txHash": "0x68432bdff9f7f75730614155ff4f7c4a3b06626213ae9dee82d9fdf4db3a130f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)14972",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)9497",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)14985",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)14972": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)9497": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)14985": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "efb65838b4407ba2bf1b038818ed4f829620823961dfd2bc0f70d2f564f56a9a": {
      "address": "0xE5756ae1BB9036A570ef73E9755aF5450325d691",
      "txHash": "0xffc5b05aece1450b555f72125983a7814e0fa846314e57956eab7d91dccd9a70",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignRewardInfo",
            "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)24762_storage)dyn_storage)",
            "src": "contracts/6/token/GrazingRange.sol:54"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignInfo",
            "type": "t_array(t_struct(CampaignInfo)24757_storage)dyn_storage",
            "src": "contracts/6/token/GrazingRange.sol:56"
          },
          {
            "contract": "GrazingRange",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)24744_storage))",
            "src": "contracts/6/token/GrazingRange.sol:59"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardInfoLimit",
            "type": "t_uint256",
            "src": "contracts/6/token/GrazingRange.sol:63"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_array(t_struct(RewardInfo)24762_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct GrazingRange.RewardInfo[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(RewardInfo)24762_storage)dyn_storage": {
            "label": "struct GrazingRange.RewardInfo[]"
          },
          "t_struct(RewardInfo)24762_storage": {
            "label": "struct GrazingRange.RewardInfo",
            "members": [
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(CampaignInfo)24757_storage)dyn_storage": {
            "label": "struct GrazingRange.CampaignInfo[]"
          },
          "t_struct(CampaignInfo)24757_storage": {
            "label": "struct GrazingRange.CampaignInfo",
            "members": [
              {
                "label": "stakingToken",
                "type": "t_contract(IERC20)1128"
              },
              {
                "label": "rewardToken",
                "type": "t_contract(IERC20)1128"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20)1128": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)24744_storage))": {
            "label": "mapping(uint256 => mapping(address => struct GrazingRange.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)24744_storage)": {
            "label": "mapping(address => struct GrazingRange.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)24744_storage": {
            "label": "struct GrazingRange.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1ca7265afe1151eea4ed0825460781099e7f0c106024e7a0bc61fc4dd90b6e01": {
      "address": "0xD5ec396C0497b4dfC9a14c859a182d730CB7cBAC",
      "txHash": "0xccae5337b0cbc75a3787c47b26b96ad9a4847cb934b24035084cd10ef4e04280",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignRewardInfo",
            "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)26949_storage)dyn_storage)",
            "src": "contracts/6/token/GrazingRange.sol:53"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignInfo",
            "type": "t_array(t_struct(CampaignInfo)26944_storage)dyn_storage",
            "src": "contracts/6/token/GrazingRange.sol:55"
          },
          {
            "contract": "GrazingRange",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)26931_storage))",
            "src": "contracts/6/token/GrazingRange.sol:58"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardInfoLimit",
            "type": "t_uint256",
            "src": "contracts/6/token/GrazingRange.sol:62"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_array(t_struct(RewardInfo)26949_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct GrazingRange.RewardInfo[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(RewardInfo)26949_storage)dyn_storage": {
            "label": "struct GrazingRange.RewardInfo[]"
          },
          "t_struct(RewardInfo)26949_storage": {
            "label": "struct GrazingRange.RewardInfo",
            "members": [
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(CampaignInfo)26944_storage)dyn_storage": {
            "label": "struct GrazingRange.CampaignInfo[]"
          },
          "t_struct(CampaignInfo)26944_storage": {
            "label": "struct GrazingRange.CampaignInfo",
            "members": [
              {
                "label": "stakingToken",
                "type": "t_contract(IERC20)1128"
              },
              {
                "label": "rewardToken",
                "type": "t_contract(IERC20)1128"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20)1128": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)26931_storage))": {
            "label": "mapping(uint256 => mapping(address => struct GrazingRange.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)26931_storage)": {
            "label": "mapping(address => struct GrazingRange.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)26931_storage": {
            "label": "struct GrazingRange.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4410d309242d9e102aae9e048f770c21c911a76a89778bd33db00ca631a38dbe": {
      "address": "0xb7118d327430345ADfF6073A47F4c3F6c4c2eb4B",
      "txHash": "0xb46500373f096cf38ca48e21ff5d427802f685ec2165c04f5e3f8a91f47ec042",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignRewardInfo",
            "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)26949_storage)dyn_storage)",
            "src": "contracts/6/token/GrazingRange.sol:53"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignInfo",
            "type": "t_array(t_struct(CampaignInfo)26944_storage)dyn_storage",
            "src": "contracts/6/token/GrazingRange.sol:55"
          },
          {
            "contract": "GrazingRange",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)26931_storage))",
            "src": "contracts/6/token/GrazingRange.sol:58"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardInfoLimit",
            "type": "t_uint256",
            "src": "contracts/6/token/GrazingRange.sol:62"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_array(t_struct(RewardInfo)26949_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct GrazingRange.RewardInfo[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(RewardInfo)26949_storage)dyn_storage": {
            "label": "struct GrazingRange.RewardInfo[]"
          },
          "t_struct(RewardInfo)26949_storage": {
            "label": "struct GrazingRange.RewardInfo",
            "members": [
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(CampaignInfo)26944_storage)dyn_storage": {
            "label": "struct GrazingRange.CampaignInfo[]"
          },
          "t_struct(CampaignInfo)26944_storage": {
            "label": "struct GrazingRange.CampaignInfo",
            "members": [
              {
                "label": "stakingToken",
                "type": "t_contract(IERC20)1128"
              },
              {
                "label": "rewardToken",
                "type": "t_contract(IERC20)1128"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20)1128": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)26931_storage))": {
            "label": "mapping(uint256 => mapping(address => struct GrazingRange.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)26931_storage)": {
            "label": "mapping(address => struct GrazingRange.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)26931_storage": {
            "label": "struct GrazingRange.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a9e79741a7c5e622ff4e17e5bc2a940b026044510dd0b5bf2ba444c4ac547eab": {
      "address": "0x43baFeB85762830A0099b4b36503Bdf2bB20af29",
      "txHash": "0x00d8fe063e5d5da79c4c559c323947661d53f1c38e2e582e10c1b8ebfdbc8213",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignRewardInfo",
            "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)909_storage)dyn_storage)",
            "src": "contracts/6.12/GrazingRange.sol:54"
          },
          {
            "contract": "GrazingRange",
            "label": "campaignInfo",
            "type": "t_array(t_struct(CampaignInfo)904_storage)dyn_storage",
            "src": "contracts/6.12/GrazingRange.sol:56"
          },
          {
            "contract": "GrazingRange",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)889_storage))",
            "src": "contracts/6.12/GrazingRange.sol:59"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardInfoLimit",
            "type": "t_uint256",
            "src": "contracts/6.12/GrazingRange.sol:63"
          },
          {
            "contract": "GrazingRange",
            "label": "rewardHolder",
            "type": "t_address",
            "src": "contracts/6.12/GrazingRange.sol:65"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_array(t_struct(RewardInfo)909_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct GrazingRange.RewardInfo[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(RewardInfo)909_storage)dyn_storage": {
            "label": "struct GrazingRange.RewardInfo[]"
          },
          "t_struct(RewardInfo)909_storage": {
            "label": "struct GrazingRange.RewardInfo",
            "members": [
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(CampaignInfo)904_storage)dyn_storage": {
            "label": "struct GrazingRange.CampaignInfo[]"
          },
          "t_struct(CampaignInfo)904_storage": {
            "label": "struct GrazingRange.CampaignInfo",
            "members": [
              {
                "label": "stakingToken",
                "type": "t_contract(IERC20)523"
              },
              {
                "label": "rewardToken",
                "type": "t_contract(IERC20)523"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20)523": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)889_storage))": {
            "label": "mapping(uint256 => mapping(address => struct GrazingRange.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)889_storage)": {
            "label": "mapping(address => struct GrazingRange.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)889_storage": {
            "label": "struct GrazingRange.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b854e9e07531db861363894aaf3d8a7523747ac1870ff6c83372e45178e485bd": {
      "address": "0x4C2c0C5AAecDBBF281A8Af20b122b7838F1570F3",
      "txHash": "0x393435940958b464d80833c4b57bafd207652af5af92cb750116af6636dc72e3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddBaseTokenOnly.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddBaseTokenOnly.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddBaseTokenOnly.sol:24"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6ab477c6e5921e4c3db10f9b7dd6c804c2c5a07996b01db4f403dac15be4fc69": {
      "address": "0x89f8094143DE140597Ff1164E10BF7C1950979c1",
      "txHash": "0x3ec9c7629b12a9f811f48960e8dd9a1803c1920afab6c7977dcfa8c34330f177",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:18"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:19"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyLiquidate.sol:21"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7ee01e9ac28ae0ce3b3e5ad38c2a901d68144f96a77e46f528ca7c949de5b650": {
      "address": "0xe5Ad4c270A12c5E0a6eDC9AFB81c673565871f15",
      "txHash": "0x7ea8eedf00f6413552bb2d30200e7e5ee7cd4ce9ff6c6e9f68c5183bfc6cc48e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:21"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)12806",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)12814",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:24"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyWithdrawMinimizeTrading.sol:26"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IWETH)12806": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)12814": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "549f7fbbdce84772b6b3efd3f60297e1181b8a3bfe2feb3c1280f9e3c128c94a": {
      "address": "0xCf2BE5C1622e5972501095596afBdde3D277d145",
      "txHash": "0x3d74d46fe62ef903ac47334146cfe8c5e614fd892e7d498ccfac8c07edc6af39",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)12701",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:24"
          },
          {
            "contract": "PancakeswapV2RestrictedStrategyAddTwoSidesOptimal",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted/PancakeswapV2RestrictedStrategyAddTwosidesOptimal.sol:26"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)12701": {
            "label": "contract IVault"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c362a0ff214b93bfb274b9e752721dd977d60fb6d07d995b38ec1679247c76f1": {
      "address": "0x01783D8f55284cD7d70dccECbf1D13Af3bc509E3",
      "txHash": "0x82403d2037de206b4b07fdab1dcf2112e2d6119452c828f79acf08a5b54678c4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)12659",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:31"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:32"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:33"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:34"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:35"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:36"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:37"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "cake",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:38"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:39"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:40"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:43"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:44"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:45"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)12672",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:46"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)12672",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:47"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:48"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:49"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:50"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:53"
          },
          {
            "contract": "PancakeswapV2Worker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/PancakeswapV2Worker.sol:54"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)12659": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)12672": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c1ac4680e67a393367af5b24ff033c3ef802be99720ecaead3ac9f1ff7a15e15": {
      "address": "0x01c65461f6368aC26Ab1362b26E6669e6bF47C79",
      "txHash": "0x4bef4d522257ce02e18e7e415e5e3dcb24b32902e7d265a310f1a459bf8af340",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:21"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7184",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:22"
          },
          {
            "contract": "PancakeswapV2StrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)12701",
            "src": "contracts/6/protocol/strategies/pancakeswapV2/PancakeswapV2StrategyAddTwoSidesOptimal.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7184": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IVault)12701": {
            "label": "contract IVault"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e16b45f17caded9d02b697c1d54c25feebcfe0d98eb76ebc71dae461af138c5e": {
      "address": "0x62A74C80d203EFcadFddF51CCdb146A866D5EFDA",
      "txHash": "0x8defb4e8b93ac66cfbeff2af268a3180c3fb045d4a69ea47e0fa10365f9ce41e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddBaseTokenOnly.sol:21"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddBaseTokenOnly.sol:22"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddBaseTokenOnly.sol:23"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "38cb5eeb8a7d2a8f851ac2733b94a097ac7cbccb419c7a65355b538ddd0ea100": {
      "address": "0x1937b158aa53345829d29b7C76770360541131f8",
      "txHash": "0xa7bfba8dc74e15c05bc358a2739e1e2652e074bee0e591ae24a45113a55cfe98",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:19"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:20"
          },
          {
            "contract": "WaultSwapRestrictedStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyLiquidate.sol:22"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "930a6bd255d31ddf17df073ae962078e496df03a99c6d046f9d7e4b617e3cb32": {
      "address": "0x8B74fd2eC34EB3068BFE7Fb979e78679EB219BC4",
      "txHash": "0xe0a7dbfb57c96d1feaa9c93c9df88f5e086118c2b54b012ec4f3c0547eb1e57c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:26"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:27"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "wbnb",
            "type": "t_contract(IWETH)16187",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:28"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)16195",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:29"
          },
          {
            "contract": "WaultSwapRestrictedStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyWithdrawMinimizeTrading.sol:31"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IWETH)16187": {
            "label": "contract IWETH"
          },
          "t_contract(IWNativeRelayer)16195": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d7e17487189ee0f031b2a169bc7cd63474f13efe3f12259b4193071035284258": {
      "address": "0xA55446a8CC11D659C67fad52a0196b5177afB362",
      "txHash": "0xce01c9ce15e0ef0374db9f6bd6793fedc072a7e405160b2c0904d20dbc3b8f1f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:23"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:24"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "vault",
            "type": "t_contract(IVault)16082",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:25"
          },
          {
            "contract": "WaultSwapRestrictedStrategyAddTwoSidesOptimal",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/waultswap-restricted/WaultSwapRestrictedStrategyAddTwoSidesOptimal.sol:27"
          }
        ],
        "types": {
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IVault)16082": {
            "label": "contract IVault"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9e5b06d4dc1a15900daccae2a880d31a87b430309687c0bf69a497a84833593d": {
      "address": "0xF7144e2a83cF0298f583Ab055d2282514Bc4ACF0",
      "txHash": "0x074c382392b57ec58d3b7f24c3337c6648bcb2db69e82b1ae4d16397e7105a74",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "wexMaster",
            "type": "t_contract(IWexMaster)16245",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:34"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "factory",
            "type": "t_contract(IWaultSwapFactory)12230",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:35"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "router",
            "type": "t_contract(IWaultSwapRouter02)12868",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:36"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:37"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:38"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:39"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:40"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "wex",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:41"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:42"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:43"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:47"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:48"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:49"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16048",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:50"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16048",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:51"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:52"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:53"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:54"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:55"
          },
          {
            "contract": "WaultSwapWorker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/WaultSwapWorker.sol:56"
          }
        ],
        "types": {
          "t_contract(IWexMaster)16245": {
            "label": "contract IWexMaster"
          },
          "t_contract(IWaultSwapFactory)12230": {
            "label": "contract IWaultSwapFactory"
          },
          "t_contract(IWaultSwapRouter02)12868": {
            "label": "contract IWaultSwapRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16048": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b477eb71235c8ac910be89da4f02d129ee08bae3a8894c9f3face04ecb64a5f2": {
      "address": "0x62d92AC154c0a0883e3d687BdBCf55a71983df9c",
      "txHash": "0xe854c8606abb0ce2dc97e5cbc36d65158a73c68e96094bdf09741932cdbbbb00",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)4516",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:24"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)32975_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:25"
          }
        ],
        "types": {
          "t_contract(PriceOracle)4516": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)32975_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)32975_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4743c1df3eaf4146aa00f9013222e083cba23380bf04aedfe0fa31606ba19120": {
      "address": "0xB213666B0a35e22732692635F44966186E28C463",
      "txHash": "0x95530f3fb940a019504df14f3a2cf0cd606ebb105505116658ef79f993b38793",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "WorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)4516",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:31"
          },
          {
            "contract": "WorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)33168_storage)",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:32"
          },
          {
            "contract": "WorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/WorkerConfig.sol:33"
          }
        ],
        "types": {
          "t_contract(PriceOracle)4516": {
            "label": "contract PriceOracle"
          },
          "t_mapping(t_address,t_struct(Config)33168_storage)": {
            "label": "mapping(address => struct WorkerConfig.Config)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Config)33168_storage": {
            "label": "struct WorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e9d39427975d60d594b2f0f7ff5cc08afb2384fd026b8a123f0d5721f8282b6d": {
      "address": "0x5dF170D53Fb910b56b45E87f61a30856bc7Dc8F4",
      "txHash": "0xc66113f003c56e281cd46dd661eaf3505b1185737829866b8a77c6b5d41c0109",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly.sol:20"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly.sol:21"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ea1febcec7a7abd11afb454a361219302ded3cf364bf13d7e88764da20ed50a8": {
      "address": "0x36C9ee44111ed47Fb7b020d29aeA72AbB4aBb7Bb",
      "txHash": "0x699a9bc36a840ae46f11ecb62c05eee77a09b70ef94c6345ee91a8eeb4e60df7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyLiquidate.sol:20"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyLiquidate.sol:21"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyLiquidate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyLiquidate.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyLiquidate.sol:23"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "823b2e186449e4a228c8b04f826dc9d259f1079e3ee0c8ac6fd560ab5669bb29": {
      "address": "0xFFba29FcbBFDB7fBef8230884c4dD899b9204F25",
      "txHash": "0x97b7681499b0421aca84886c72cf498ff002042063323f5fc4f9b6e8efdddd5a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading.sol:24"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading.sol:25"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading.sol:26"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)16195",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading.sol:27"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IWNativeRelayer)16195": {
            "label": "contract IWNativeRelayer"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4466d6291e1f5794760291baa2f2d59734ae479c6c31a4e8279861440cd936d3": {
      "address": "0xAE796ed4b43211fb58Aa8Dee6dda2B07099a9c3a",
      "txHash": "0x0de863634d0369a35dfad660527d5b1aa4dd8159d2499552820d3c9da249398a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm.sol:21"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm.sol:22"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm.sol:23"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm.sol:24"
          },
          {
            "contract": "PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm",
            "label": "vault",
            "type": "t_contract(IVault)16082",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-cake-maxi/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm.sol:25"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVault)16082": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "57abce33a07b49d5374bcf19043f29cb0643483843aa3289e9241e0335d8cab6": {
      "address": "0x753d6C70706A6Fc693164fED8736c2fe19cbE8b7",
      "txHash": "0xac83a0d38307e6c04c92a9ff37f76e93e76c979cc926aaea1aa173a89d6d82f9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "CakeMaxiWorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)4516",
            "src": "contracts/6/protocol/workers/CakeMaxiWorkerConfig.sol:34"
          },
          {
            "contract": "CakeMaxiWorkerConfig",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/CakeMaxiWorkerConfig.sol:35"
          },
          {
            "contract": "CakeMaxiWorkerConfig",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/CakeMaxiWorkerConfig.sol:36"
          },
          {
            "contract": "CakeMaxiWorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)27378_storage)",
            "src": "contracts/6/protocol/workers/CakeMaxiWorkerConfig.sol:37"
          },
          {
            "contract": "CakeMaxiWorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/CakeMaxiWorkerConfig.sol:38"
          }
        ],
        "types": {
          "t_contract(PriceOracle)4516": {
            "label": "contract PriceOracle"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Config)27378_storage)": {
            "label": "mapping(address => struct CakeMaxiWorkerConfig.Config)"
          },
          "t_struct(Config)27378_storage": {
            "label": "struct CakeMaxiWorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c70f97a16d5925bc6093ca8c9a4731eda6e252f69c44ffffa9d70b989f50d84d": {
      "address": "0xe3C92Bb9Eb435C384FC9d7aceE1d184e10210829",
      "txHash": "0xe3e8811778a9b2980fab87ed11f20090d137ffeccf63b4927f748b4efe0f5070",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)16035",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:39"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:40"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:41"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:42"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:43"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:44"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:45"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:46"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:47"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "beneficialVault",
            "type": "t_contract(IVault)16082",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:48"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:51"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:52"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:53"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16048",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:54"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16048",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:55"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:56"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:57"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:58"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:59"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:60"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:63"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:64"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)16035": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)16082": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16048": {
            "label": "contract IStrategy"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "747cda4e0173bbd85c0829dd31f2f0db408884dbaacc9ccb3ae0c100eefffa13": {
      "address": "0xbD2814a82DCC20c9De480385b19c071189BAE4Ba",
      "txHash": "0x92506cc86c37358b986b32411fd1ebf212e2e144f2f9e341bec3abff44cebe86",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly.sol:35"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly.sol:36"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseTokenOnly",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseTokenOnly.sol:38"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "03d83c12a0a15aae680a21edf05c60ef2a4ba87e1bbb049ba8114bc2dca10c4a": {
      "address": "0x5Cb40bBe39184037f3dE5caC9F1abdc7753BD19D",
      "txHash": "0xdc2fba6c0fdd874c05529a7e44c74880546d69f67132dcee765b6856b6a828eb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyLiquidate.sol:35"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyLiquidate.sol:36"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyLiquidate.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyLiquidate",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyLiquidate.sol:38"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5ae60b12ece203dd85d16008cecfe18bf0935976280bb629bbc2106c4c02d1c1": {
      "address": "0x342D3d3e5469984095ed56F71d46B30e8576C9ec",
      "txHash": "0xf8327ba8e456b0ad2086b7f79883a4f6a82cfa77c775ecdf3f8940e061f5082f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading.sol:39"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyWithdrawMinimizeTrading",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)16195",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyWithdrawMinimizeTrading.sol:42"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IWNativeRelayer)16195": {
            "label": "contract IWNativeRelayer"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "27256da1eb55fc7d1bad3194c41cd5da631f9ac38bad0c18e3a0967d03e68d34": {
      "address": "0x52304b4eB1072733C3B497D636991F94431F5175",
      "txHash": "0x2953b2e9856c478c84dba5db151ea0c4737fd515f59ad9412a67ee2b6fcdc2d8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm.sol:36"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm.sol:37"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "vault",
            "type": "t_contract(IVault)16082",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedCakeMaxiStrategyAddBaseWithFarm.sol:40"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVault)16082": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8d392be80039560cca3fae929b53016e9b27d62ce4d4625a4e7a83ffdbe12bd7": {
      "address": "0xCe103608885A272A40d1426d634DAD2dacb0bbA8",
      "txHash": "0xaf7036b3fd02f83eebb4e62ad9c8f3ae11d56253fa50998f703bf493ab8aa08e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:36"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:37"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:38"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "okWorkers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:40"
          },
          {
            "contract": "PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm",
            "label": "vault",
            "type": "t_contract(IVault)16082",
            "src": "contracts/6/protocol/strategies/pancakeswapV2-restricted-single-asset/PancakeswapV2RestrictedSingleAssetStrategyAddBaseWithFarm.sol:40"
          }
        ],
        "types": {
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVault)16082": {
            "label": "contract IVault"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "aa0c4c091151b5396d7e62bde780d27253e0b97747d60e4f0f08f89190b3a23b": {
      "address": "0xF5E0a6D9a72eeF17ec779608085eAA40e7455EAe",
      "txHash": "0xcafaa00d0eb62cd23a4e396aeb14fa44eca9d94171abb0c0736b3b28cf3ef261",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "oracle",
            "type": "t_contract(PriceOracle)4516",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:49"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:50"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:51"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_struct(Config)31217_storage)",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:51"
          },
          {
            "contract": "SingleAssetWorkerConfig",
            "label": "governor",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/SingleAssetWorkerConfig.sol:53"
          }
        ],
        "types": {
          "t_contract(PriceOracle)4516": {
            "label": "contract PriceOracle"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Config)31217_storage)": {
            "label": "mapping(address => struct SingleAssetWorkerConfig.Config)"
          },
          "t_struct(Config)31217_storage": {
            "label": "struct SingleAssetWorkerConfig.Config",
            "members": [
              {
                "label": "acceptDebt",
                "type": "t_bool"
              },
              {
                "label": "workFactor",
                "type": "t_uint64"
              },
              {
                "label": "killFactor",
                "type": "t_uint64"
              },
              {
                "label": "maxPriceDiff",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "78c2c2e20b87f68aecd8ee7f699847597b2796fe86a953ae49888834bb655acc": {
      "address": "0xAeAa9A7d582f38Dbc5bEfdE638Ca10B21C1224B4",
      "txHash": "0xadb82b6f880c0f3617ff7681d483cce979bad74a1c8fa557202cef8e32b69f28",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "masterChef",
            "type": "t_contract(IPancakeMasterChef)16035",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:56"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "factory",
            "type": "t_contract(IPancakeFactory)3222",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:58"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "router",
            "type": "t_contract(IPancakeRouter02)7185",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:58"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "lpToken",
            "type": "t_contract(IPancakePair)3464",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:60"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:61"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "baseToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:61"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "farmingToken",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:63"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:64"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:66"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "beneficialVault",
            "type": "t_contract(IVault)16082",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:67"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "shares",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:68"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "okStrats",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:69"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "totalShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:71"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "addStrat",
            "type": "t_contract(IStrategy)16048",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:72"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "liqStrat",
            "type": "t_contract(IStrategy)16048",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:73"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "beneficialVaultBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:73"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "reinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:74"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "maxReinvestBountyBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:76"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "rewardBalance",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:76"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "okReinvestors",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:77"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "path",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:80"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "rewardPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:80"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:84"
          },
          {
            "contract": "CakeMaxiWorker",
            "label": "feeDenom",
            "type": "t_uint256",
            "src": "contracts/6/protocol/workers/CakeMaxiWorker.sol:85"
          }
        ],
        "types": {
          "t_contract(IPancakeMasterChef)16035": {
            "label": "contract IPancakeMasterChef"
          },
          "t_contract(IPancakeFactory)3222": {
            "label": "contract IPancakeFactory"
          },
          "t_contract(IPancakeRouter02)7185": {
            "label": "contract IPancakeRouter02"
          },
          "t_contract(IPancakePair)3464": {
            "label": "contract IPancakePair"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVault)16082": {
            "label": "contract IVault"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IStrategy)16048": {
            "label": "contract IStrategy"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c4c781872862b93d23896d4769a5054cc50defc19092c77c67fc2ff116e858ca": {
      "address": "0x421aB711e15E711F4707aa67Cf8d73db51287894",
      "txHash": "0x504dbc76b598c921ebd0e4a339281733170946af7504f941af48b9451fb7fd10",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:41"
          }, 
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:43"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:45"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17090)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:47"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17103",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:49"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:52"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:54"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:56"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:58"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17090)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17090": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17103": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "669cfdea40bc26cbfd9dd86f4aaafd2d2bcc687642e0d21905582de05ad03e2c": {
      "address": "0xA3462163973FD13aB43F9262AB9f20d03b569DB3",
      "txHash": "0xa870f324ee6b9448467e35349332b555317a1911757d83e34a2d7716147ed7b5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "minDebtSize",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:42"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getReservePoolBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:44"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "getKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:46"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "workers",
            "type": "t_mapping(t_address,t_contract(IWorkerConfig)17122)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:48"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "interestModel",
            "type": "t_contract(InterestModel)17135",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:50"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wrappedNative",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:53"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "wNativeRelayer",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:55"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "fairLaunch",
            "type": "t_address",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:57"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "maxKillBps",
            "type": "t_uint256",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:59"
          },
          {
            "contract": "ConfigurableInterestVaultConfig",
            "label": "whitelistedCallers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/6/protocol/ConfigurableInterestVaultConfig.sol:61"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_contract(IWorkerConfig)17122)": {
            "label": "mapping(address => contract IWorkerConfig)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IWorkerConfig)17122": {
            "label": "contract IWorkerConfig"
          },
          "t_contract(InterestModel)17135": {
            "label": "contract InterestModel"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "53d8a580bfee38780474e0cbd3234d673390d73f89251fcc2337f3c1d654cbf6": {
      "address": "0x8AD71A587dB708435f52eb2e11902e487775f3Fb",
      "txHash": "0x4a93c9ac829804a7e6cd5808d793d9ef7abcf3a5556f80beafc43bc0c203ba6f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "Vault",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:60"
          },
          {
            "contract": "Vault",
            "label": "POSITION_ID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:62"
          },
          {
            "contract": "Vault",
            "label": "STRATEGY",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:63"
          },
          {
            "contract": "Vault",
            "label": "token",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:71"
          },
          {
            "contract": "Vault",
            "label": "debtToken",
            "type": "t_address",
            "src": "contracts/6/protocol/Vault.sol:73"
          },
          {
            "contract": "Vault",
            "label": "config",
            "type": "t_contract(IVaultConfig)16884",
            "src": "contracts/6/protocol/Vault.sol:78"
          },
          {
            "contract": "Vault",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(Position)5817_storage)",
            "src": "contracts/6/protocol/Vault.sol:79"
          },
          {
            "contract": "Vault",
            "label": "nextPositionID",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:82"
          },
          {
            "contract": "Vault",
            "label": "fairLaunchPoolId",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:83"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtShare",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:84"
          },
          {
            "contract": "Vault",
            "label": "vaultDebtVal",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:85"
          },
          {
            "contract": "Vault",
            "label": "lastAccrueTime",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          },
          {
            "contract": "Vault",
            "label": "reservePool",
            "type": "t_uint256",
            "src": "contracts/6/protocol/Vault.sol:87"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IVaultConfig)16884": {
            "label": "contract IVaultConfig"
          },
          "t_mapping(t_uint256,t_struct(Position)5817_storage)": {
            "label": "mapping(uint256 => struct Vault.Position)"
          },
          "t_struct(Position)5817_storage": {
            "label": "struct Vault.Position",
            "members": [
              {
                "label": "worker",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "debtShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  },
  "admin": {
    "address": "0x2c6c09b46d00A88161B7e4AcFaFEc58990548aC2",
    "txHash": "0xf60ec45c53a93170fca6a750b30d1577fd1adf6ef23fd4a21a15bf1afa9755f9"
  }
}
