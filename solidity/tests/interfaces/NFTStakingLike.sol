// SPDX-License-Identifier: GPL-3.0
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.2. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface NFTStakingLike {
    error NFTStaking_BadParamsLength();
    error NFTStaking_InvalidNFTAddress();
    error NFTStaking_NFTAlreadyStaked();
    error NFTStaking_NoNFTStaked();
    error NFTStaking_PoolAlreadyExist();
    error NFTStaking_PoolNotExist();
    error NFTStaking_Unauthorize();
    event LogAddPool(
        address indexed _caller,
        bytes32 indexed _poolId,
        address[] _stakeNFTToken,
        uint256
    );
    event LogSetStakeNFTToken(
        address indexed _caller,
        bytes32 indexed _poolId,
        address[] _stakeNFTToken,
        uint256[] _allowance
    );
    event LogStakeNFT(
        address indexed _staker,
        bytes32 indexed _poolId,
        address _nftAddress,
        uint256 _nftTokenId
    );
    event LogUnstakeNFT(
        address indexed _staker,
        bytes32 indexed _poolId,
        address _nftAddress,
        uint256 _nftTokenId
    );
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    function addPool(
        bytes32 _poolId,
        address[] memory _stakeNFTToken,
        uint256 _poolWeight
    ) external;

    function initialize() external;

    function isEligibleNFT(bytes32 _poolId, address _nftAddress)
        external
        view
        returns (bool);

    function isStaked(bytes32 _poolId, address _user)
        external
        view
        returns (bool);

    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) external pure returns (bytes4);

    function owner() external view returns (address);

    function poolInfo(bytes32)
        external
        view
        returns (uint256 isInit, uint256 poolWeight);

    function renounceOwnership() external;

    function setStakeNFTToken(
        bytes32 _poolId,
        address[] memory _stakeNFTToken,
        uint256[] memory _allowance
    ) external;

    function stakeNFT(
        bytes32 _poolId,
        address _nftAddress,
        uint256 _nftTokenId
    ) external;

    function transferOwnership(address newOwner) external;

    function unstakeNFT(bytes32 _poolId) external;

    function userHighestWeightPoolId(address) external view returns (bytes32);

    function userStakingNFT(bytes32, address)
        external
        view
        returns (address nftAddress, uint256 nftTokenId);
}
